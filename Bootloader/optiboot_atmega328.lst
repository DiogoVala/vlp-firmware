
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00007fc6  0000075a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c6  00007900  00007900  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000764  2**0
                  CONTENTS, READONLY
  3 .bss          00000042  0080010a  0080010a  00000764  2**0
                  ALLOC
  4 .stab         0000231c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001404  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007900 <main>:
    7900:	cd b7       	in	r28, 0x3d	; 61
    7902:	de b7       	in	r29, 0x3e	; 62
    7904:	26 97       	sbiw	r28, 0x06	; 6
    7906:	de bf       	out	0x3e, r29	; 62
    7908:	cd bf       	out	0x3d, r28	; 61
    790a:	f8 94       	cli
    790c:	11 24       	eor	r1, r1
    790e:	8f ed       	ldi	r24, 0xDF	; 223
    7910:	98 e0       	ldi	r25, 0x08	; 8
    7912:	9e bf       	out	0x3e, r25	; 62
    7914:	8d bf       	out	0x3d, r24	; 61
    7916:	cd b7       	in	r28, 0x3d	; 61
    7918:	de b7       	in	r29, 0x3e	; 62
    791a:	84 b7       	in	r24, 0x34	; 52
    791c:	14 be       	out	0x34, r1	; 52
    791e:	83 ff       	sbrs	r24, 3
    7920:	18 c0       	rjmp	.+48     	; 0x7952 <main+0x52>
    7922:	40 91 ec 08 	lds	r20, 0x08EC	; 0x8008ec <__bss_end+0x7a0>
    7926:	50 91 ed 08 	lds	r21, 0x08ED	; 0x8008ed <__bss_end+0x7a1>
    792a:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <__bss_end+0x7a2>
    792e:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <__bss_end+0x7a3>
    7932:	4f 3e       	cpi	r20, 0xEF	; 239
    7934:	5e 4b       	sbci	r21, 0xBE	; 190
    7936:	6d 4a       	sbci	r22, 0xAD	; 173
    7938:	7e 4d       	sbci	r23, 0xDE	; 222
    793a:	59 f4       	brne	.+22     	; 0x7952 <main+0x52>
    793c:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <__bss_end+0x7a0>
    7940:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <__bss_end+0x7a1>
    7944:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <__bss_end+0x7a2>
    7948:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <__bss_end+0x7a3>
    794c:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__bss_end+0x79f>
    7950:	8f d1       	rcall	.+798    	; 0x7c70 <appStart>
    7952:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__bss_end+0x79f>
    7956:	8f ee       	ldi	r24, 0xEF	; 239
    7958:	9e eb       	ldi	r25, 0xBE	; 190
    795a:	ad ea       	ldi	r26, 0xAD	; 173
    795c:	be ed       	ldi	r27, 0xDE	; 222
    795e:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__bss_end+0x7a0>
    7962:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <__bss_end+0x7a1>
    7966:	a0 93 ee 08 	sts	0x08EE, r26	; 0x8008ee <__bss_end+0x7a2>
    796a:	b0 93 ef 08 	sts	0x08EF, r27	; 0x8008ef <__bss_end+0x7a3>
    796e:	11 e0       	ldi	r17, 0x01	; 1
    7970:	a0 e0       	ldi	r26, 0x00	; 0
    7972:	b1 e0       	ldi	r27, 0x01	; 1
    7974:	e6 ec       	ldi	r30, 0xC6	; 198
    7976:	ff e7       	ldi	r31, 0x7F	; 127
    7978:	02 c0       	rjmp	.+4      	; 0x797e <cpchk>

0000797a <copy>:
    797a:	05 90       	lpm	r0, Z+
    797c:	0d 92       	st	X+, r0

0000797e <cpchk>:
    797e:	aa 30       	cpi	r26, 0x0A	; 10
    7980:	b1 07       	cpc	r27, r17
    7982:	d9 f7       	brne	.-10     	; 0x797a <copy>
    7984:	11 e0       	ldi	r17, 0x01	; 1
    7986:	aa e0       	ldi	r26, 0x0A	; 10
    7988:	b1 e0       	ldi	r27, 0x01	; 1
    798a:	01 c0       	rjmp	.+2      	; 0x798e <clchk>

0000798c <clear>:
    798c:	1d 92       	st	X+, r1

0000798e <clchk>:
    798e:	ac 34       	cpi	r26, 0x4C	; 76
    7990:	b1 07       	cpc	r27, r17
    7992:	e1 f7       	brne	.-8      	; 0x798c <clear>
    7994:	8a b1       	in	r24, 0x0a	; 10
    7996:	83 60       	ori	r24, 0x03	; 3
    7998:	8a b9       	out	0x0a, r24	; 10
    799a:	8b b1       	in	r24, 0x0b	; 11
    799c:	8c 7f       	andi	r24, 0xFC	; 252
    799e:	8b b9       	out	0x0b, r24	; 11
    79a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    79a4:	80 e1       	ldi	r24, 0x10	; 16
    79a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    79aa:	86 e0       	ldi	r24, 0x06	; 6
    79ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    79b0:	18 e1       	ldi	r17, 0x18	; 24
    79b2:	10 93 c1 00 	sts	0x00C1, r17	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    79b6:	82 e0       	ldi	r24, 0x02	; 2
    79b8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    79bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rf24_mode+0x1>
    79c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rf24_mode+0x2>
    79c4:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <rf24_mode+0x3>
    79c8:	8c 83       	std	Y+4, r24	; 0x04
    79ca:	9d 83       	std	Y+5, r25	; 0x05
    79cc:	ae 83       	std	Y+6, r26	; 0x06
    79ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rf24_mode+0x4>
    79d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rf24_mode+0x5>
    79d6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <rf24_mode+0x6>
    79da:	89 83       	std	Y+1, r24	; 0x01
    79dc:	9a 83       	std	Y+2, r25	; 0x02
    79de:	ab 83       	std	Y+3, r26	; 0x03
    79e0:	e9 d2       	rcall	.+1490   	; 0x7fb4 <spi_init>
    79e2:	be 01       	movw	r22, r28
    79e4:	6c 5f       	subi	r22, 0xFC	; 252
    79e6:	7f 4f       	sbci	r23, 0xFF	; 255
    79e8:	ce 01       	movw	r24, r28
    79ea:	01 96       	adiw	r24, 0x01	; 1
    79ec:	a2 d2       	rcall	.+1348   	; 0x7f32 <nrf24_config>
    79ee:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
    79f2:	8e e0       	ldi	r24, 0x0E	; 14
    79f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    79f8:	00 e0       	ldi	r16, 0x00	; 0
    79fa:	10 e0       	ldi	r17, 0x00	; 0
    79fc:	28 e1       	ldi	r18, 0x18	; 24
    79fe:	c2 2e       	mov	r12, r18
    7a00:	38 e0       	ldi	r19, 0x08	; 8
    7a02:	b3 2e       	mov	r11, r19
    7a04:	aa 24       	eor	r10, r10
    7a06:	a3 94       	inc	r10
    7a08:	45 e0       	ldi	r20, 0x05	; 5
    7a0a:	94 2e       	mov	r9, r20
    7a0c:	51 e1       	ldi	r21, 0x11	; 17
    7a0e:	85 2e       	mov	r8, r21
    7a10:	63 e0       	ldi	r22, 0x03	; 3
    7a12:	d6 2e       	mov	r13, r22
    7a14:	cf d0       	rcall	.+414    	; 0x7bb4 <getch>
    7a16:	81 34       	cpi	r24, 0x41	; 65
    7a18:	71 f4       	brne	.+28     	; 0x7a36 <clchk+0xa8>
    7a1a:	cc d0       	rcall	.+408    	; 0x7bb4 <getch>
    7a1c:	f8 2e       	mov	r15, r24
    7a1e:	15 d1       	rcall	.+554    	; 0x7c4a <verifySpace>
    7a20:	e2 e8       	ldi	r30, 0x82	; 130
    7a22:	fe 16       	cp	r15, r30
    7a24:	f9 f0       	breq	.+62     	; 0x7a64 <clchk+0xd6>
    7a26:	f1 e8       	ldi	r31, 0x81	; 129
    7a28:	ff 12       	cpse	r15, r31
    7a2a:	02 c0       	rjmp	.+4      	; 0x7a30 <clchk+0xa2>
    7a2c:	85 e0       	ldi	r24, 0x05	; 5
    7a2e:	01 c0       	rjmp	.+2      	; 0x7a32 <clchk+0xa4>
    7a30:	83 e0       	ldi	r24, 0x03	; 3
    7a32:	7c d0       	rcall	.+248    	; 0x7b2c <putch>
    7a34:	78 c0       	rjmp	.+240    	; 0x7b26 <clchk+0x198>
    7a36:	82 34       	cpi	r24, 0x42	; 66
    7a38:	11 f4       	brne	.+4      	; 0x7a3e <clchk+0xb0>
    7a3a:	84 e1       	ldi	r24, 0x14	; 20
    7a3c:	03 c0       	rjmp	.+6      	; 0x7a44 <clchk+0xb6>
    7a3e:	85 34       	cpi	r24, 0x45	; 69
    7a40:	19 f4       	brne	.+6      	; 0x7a48 <clchk+0xba>
    7a42:	85 e0       	ldi	r24, 0x05	; 5
    7a44:	08 d1       	rcall	.+528    	; 0x7c56 <getNch>
    7a46:	6f c0       	rjmp	.+222    	; 0x7b26 <clchk+0x198>
    7a48:	85 35       	cpi	r24, 0x55	; 85
    7a4a:	41 f4       	brne	.+16     	; 0x7a5c <clchk+0xce>
    7a4c:	b3 d0       	rcall	.+358    	; 0x7bb4 <getch>
    7a4e:	08 2f       	mov	r16, r24
    7a50:	10 e0       	ldi	r17, 0x00	; 0
    7a52:	b0 d0       	rcall	.+352    	; 0x7bb4 <getch>
    7a54:	18 2b       	or	r17, r24
    7a56:	00 0f       	add	r16, r16
    7a58:	11 1f       	adc	r17, r17
    7a5a:	64 c0       	rjmp	.+200    	; 0x7b24 <clchk+0x196>
    7a5c:	86 35       	cpi	r24, 0x56	; 86
    7a5e:	21 f4       	brne	.+8      	; 0x7a68 <clchk+0xda>
    7a60:	84 e0       	ldi	r24, 0x04	; 4
    7a62:	f9 d0       	rcall	.+498    	; 0x7c56 <getNch>
    7a64:	80 e0       	ldi	r24, 0x00	; 0
    7a66:	e5 cf       	rjmp	.-54     	; 0x7a32 <clchk+0xa4>
    7a68:	84 36       	cpi	r24, 0x64	; 100
    7a6a:	09 f0       	breq	.+2      	; 0x7a6e <clchk+0xe0>
    7a6c:	3d c0       	rjmp	.+122    	; 0x7ae8 <clchk+0x15a>
    7a6e:	a2 d0       	rcall	.+324    	; 0x7bb4 <getch>
    7a70:	a1 d0       	rcall	.+322    	; 0x7bb4 <getch>
    7a72:	78 2e       	mov	r7, r24
    7a74:	9f d0       	rcall	.+318    	; 0x7bb4 <getch>
    7a76:	01 15       	cp	r16, r1
    7a78:	80 e7       	ldi	r24, 0x70	; 112
    7a7a:	18 07       	cpc	r17, r24
    7a7c:	18 f4       	brcc	.+6      	; 0x7a84 <clchk+0xf6>
    7a7e:	f8 01       	movw	r30, r16
    7a80:	d7 be       	out	0x37, r13	; 55
    7a82:	e8 95       	spm
    7a84:	80 e8       	ldi	r24, 0x80	; 128
    7a86:	e8 2e       	mov	r14, r24
    7a88:	ff 24       	eor	r15, r15
    7a8a:	f3 94       	inc	r15
    7a8c:	93 d0       	rcall	.+294    	; 0x7bb4 <getch>
    7a8e:	f7 01       	movw	r30, r14
    7a90:	81 93       	st	Z+, r24
    7a92:	7f 01       	movw	r14, r30
    7a94:	7a 94       	dec	r7
    7a96:	71 10       	cpse	r7, r1
    7a98:	f9 cf       	rjmp	.-14     	; 0x7a8c <clchk+0xfe>
    7a9a:	01 15       	cp	r16, r1
    7a9c:	f0 e7       	ldi	r31, 0x70	; 112
    7a9e:	1f 07       	cpc	r17, r31
    7aa0:	18 f0       	brcs	.+6      	; 0x7aa8 <clchk+0x11a>
    7aa2:	f8 01       	movw	r30, r16
    7aa4:	d7 be       	out	0x37, r13	; 55
    7aa6:	e8 95       	spm
    7aa8:	d0 d0       	rcall	.+416    	; 0x7c4a <verifySpace>
    7aaa:	07 b6       	in	r0, 0x37	; 55
    7aac:	00 fc       	sbrc	r0, 0
    7aae:	fd cf       	rjmp	.-6      	; 0x7aaa <clchk+0x11c>
    7ab0:	f8 01       	movw	r30, r16
    7ab2:	a0 e8       	ldi	r26, 0x80	; 128
    7ab4:	b1 e0       	ldi	r27, 0x01	; 1
    7ab6:	8c 91       	ld	r24, X
    7ab8:	11 96       	adiw	r26, 0x01	; 1
    7aba:	2c 91       	ld	r18, X
    7abc:	11 97       	sbiw	r26, 0x01	; 1
    7abe:	90 e0       	ldi	r25, 0x00	; 0
    7ac0:	92 2b       	or	r25, r18
    7ac2:	0c 01       	movw	r0, r24
    7ac4:	a7 be       	out	0x37, r10	; 55
    7ac6:	e8 95       	spm
    7ac8:	11 24       	eor	r1, r1
    7aca:	32 96       	adiw	r30, 0x02	; 2
    7acc:	12 96       	adiw	r26, 0x02	; 2
    7ace:	a1 15       	cp	r26, r1
    7ad0:	82 e0       	ldi	r24, 0x02	; 2
    7ad2:	b8 07       	cpc	r27, r24
    7ad4:	81 f7       	brne	.-32     	; 0x7ab6 <clchk+0x128>
    7ad6:	f8 01       	movw	r30, r16
    7ad8:	97 be       	out	0x37, r9	; 55
    7ada:	e8 95       	spm
    7adc:	07 b6       	in	r0, 0x37	; 55
    7ade:	00 fc       	sbrc	r0, 0
    7ae0:	fd cf       	rjmp	.-6      	; 0x7adc <clchk+0x14e>
    7ae2:	87 be       	out	0x37, r8	; 55
    7ae4:	e8 95       	spm
    7ae6:	1f c0       	rjmp	.+62     	; 0x7b26 <clchk+0x198>
    7ae8:	84 37       	cpi	r24, 0x74	; 116
    7aea:	69 f4       	brne	.+26     	; 0x7b06 <clchk+0x178>
    7aec:	63 d0       	rcall	.+198    	; 0x7bb4 <getch>
    7aee:	62 d0       	rcall	.+196    	; 0x7bb4 <getch>
    7af0:	f8 2e       	mov	r15, r24
    7af2:	60 d0       	rcall	.+192    	; 0x7bb4 <getch>
    7af4:	aa d0       	rcall	.+340    	; 0x7c4a <verifySpace>
    7af6:	f8 01       	movw	r30, r16
    7af8:	85 91       	lpm	r24, Z+
    7afa:	8f 01       	movw	r16, r30
    7afc:	17 d0       	rcall	.+46     	; 0x7b2c <putch>
    7afe:	fa 94       	dec	r15
    7b00:	f1 10       	cpse	r15, r1
    7b02:	f9 cf       	rjmp	.-14     	; 0x7af6 <clchk+0x168>
    7b04:	10 c0       	rjmp	.+32     	; 0x7b26 <clchk+0x198>
    7b06:	85 37       	cpi	r24, 0x75	; 117
    7b08:	39 f4       	brne	.+14     	; 0x7b18 <clchk+0x18a>
    7b0a:	9f d0       	rcall	.+318    	; 0x7c4a <verifySpace>
    7b0c:	8e e1       	ldi	r24, 0x1E	; 30
    7b0e:	0e d0       	rcall	.+28     	; 0x7b2c <putch>
    7b10:	85 e9       	ldi	r24, 0x95	; 149
    7b12:	0c d0       	rcall	.+24     	; 0x7b2c <putch>
    7b14:	8f e0       	ldi	r24, 0x0F	; 15
    7b16:	8d cf       	rjmp	.-230    	; 0x7a32 <clchk+0xa4>
    7b18:	81 35       	cpi	r24, 0x51	; 81
    7b1a:	21 f4       	brne	.+8      	; 0x7b24 <clchk+0x196>
    7b1c:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
    7b20:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__DATA_REGION_ORIGIN__>
    7b24:	92 d0       	rcall	.+292    	; 0x7c4a <verifySpace>
    7b26:	80 e1       	ldi	r24, 0x10	; 16
    7b28:	01 d0       	rcall	.+2      	; 0x7b2c <putch>
    7b2a:	74 cf       	rjmp	.-280    	; 0x7a14 <clchk+0x86>

00007b2c <putch>:
	spi_init();

	nrf24_config(TX_addr, RX_addr);
}

void putch(char ch) {
    7b2c:	cf 93       	push	r28
    7b2e:	df 93       	push	r29
}


// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
	__asm__ __volatile__ (
    7b30:	a8 95       	wdr
    static uint8_t pkt_len = 1; /* There's always at least the ID byte */
    static uint8_t pkt_buf[NRF24_MAX_PAYLOAD]={};
    uint32_t tx_retries = 100;

    watchdogReset();
    if (radio_mode == RADIO_OFF) {
    7b32:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <radio_mode>
    7b36:	91 11       	cpse	r25, r1
    7b38:	07 c0       	rjmp	.+14     	; 0x7b48 <putch+0x1c>
    	while (( UCSR0A & _BV(UDRE0)) == 0);
    7b3a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7b3e:	95 ff       	sbrs	r25, 5
    7b40:	fc cf       	rjmp	.-8      	; 0x7b3a <putch+0xe>
		UDR0 = ch;
    7b42:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7b46:	33 c0       	rjmp	.+102    	; 0x7bae <putch+0x82>
    }
    else
    {
    	pkt_buf[pkt_len++] = ch; /* Fill the local buffer */
    7b48:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <pkt_len.1911>
    7b4c:	91 e0       	ldi	r25, 0x01	; 1
    7b4e:	9e 0f       	add	r25, r30
    7b50:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <pkt_len.1911>
    7b54:	f0 e0       	ldi	r31, 0x00	; 0
    7b56:	e5 5d       	subi	r30, 0xD5	; 213
    7b58:	fe 4f       	sbci	r31, 0xFE	; 254
    7b5a:	80 83       	st	Z, r24
    	if (ch == STK_OK || pkt_len >= MAX_PLD_SIZE) {
    7b5c:	80 31       	cpi	r24, 0x10	; 16
    7b5e:	11 f0       	breq	.+4      	; 0x7b64 <putch+0x38>
    7b60:	9f 31       	cpi	r25, 0x1F	; 31
    7b62:	28 f1       	brcs	.+74     	; 0x7bae <putch+0x82>
    7b64:	c0 e0       	ldi	r28, 0x00	; 0
    7b66:	d0 e0       	ldi	r29, 0x00	; 0
	spi_init();

	nrf24_config(TX_addr, RX_addr);
}

void putch(char ch) {
    7b68:	81 e1       	ldi	r24, 0x11	; 17
    7b6a:	97 e2       	ldi	r25, 0x27	; 39
    7b6c:	01 97       	sbiw	r24, 0x01	; 1
	  "ijmp\n"
	);
}

static void delay8(uint16_t count) {
	while (count --)
    7b6e:	49 f0       	breq	.+18     	; 0x7b82 <putch+0x56>
	...
		__asm__ __volatile__ (
    7b7c:	00 00       	nop
    7b7e:	a8 95       	wdr
    7b80:	f5 cf       	rjmp	.-22     	; 0x7b6c <putch+0x40>
    {
    	pkt_buf[pkt_len++] = ch; /* Fill the local buffer */
    	if (ch == STK_OK || pkt_len >= MAX_PLD_SIZE) {
    		while(tx_retries--) {
	    		my_delay(5);
	    		nrf24_sendData(pkt_buf, pkt_len);
    7b82:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <pkt_len.1911>
    7b86:	8b e2       	ldi	r24, 0x2B	; 43
    7b88:	91 e0       	ldi	r25, 0x01	; 1
    7b8a:	98 d1       	rcall	.+816    	; 0x7ebc <nrf24_sendData>
				if (nrf24_wait_tx_result() == NRF24_MESSAGE_SENT)
    7b8c:	38 d1       	rcall	.+624    	; 0x7dfe <nrf24_wait_tx_result>
    7b8e:	21 96       	adiw	r28, 0x01	; 1
    7b90:	81 11       	cpse	r24, r1
    7b92:	09 c0       	rjmp	.+18     	; 0x7ba6 <putch+0x7a>
					break; /* Payload sent and acknowledged*/
			}
			pkt_len = 1;
    7b94:	81 e0       	ldi	r24, 0x01	; 1
    7b96:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pkt_len.1911>
			pkt_buf[0]++;
    7b9a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pkt_buf.1912>
    7b9e:	8f 5f       	subi	r24, 0xFF	; 255
    7ba0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pkt_buf.1912>
    7ba4:	04 c0       	rjmp	.+8      	; 0x7bae <putch+0x82>
    }
    else
    {
    	pkt_buf[pkt_len++] = ch; /* Fill the local buffer */
    	if (ch == STK_OK || pkt_len >= MAX_PLD_SIZE) {
    		while(tx_retries--) {
    7ba6:	c4 36       	cpi	r28, 0x64	; 100
    7ba8:	d1 05       	cpc	r29, r1
    7baa:	f1 f6       	brne	.-68     	; 0x7b68 <putch+0x3c>
    7bac:	f3 cf       	rjmp	.-26     	; 0x7b94 <putch+0x68>
			}
			pkt_len = 1;
			pkt_buf[0]++;
    	}
    }
}
    7bae:	df 91       	pop	r29
    7bb0:	cf 91       	pop	r28
    7bb2:	08 95       	ret

00007bb4 <getch>:
 	static uint8_t pkt_id = UINT8_MAX;  /* Number (ID) of the packet */
    static uint8_t pkt_len = 0;  /* Number of bytes in the local buffer */
    static uint8_t pkt_buf[32];  /* Local buffer to store bytes */

	while (1) {
		if(radio_mode == RADIO_OFF){
    7bb4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <radio_mode>
    7bb8:	81 11       	cpse	r24, r1
    7bba:	08 c0       	rjmp	.+16     	; 0x7bcc <getch+0x18>
			if (( UCSR0A & (1 << RXC0)) != 0) /* If we have data in the UART */
    7bbc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7bc0:	87 ff       	sbrs	r24, 7
    7bc2:	04 c0       	rjmp	.+8      	; 0x7bcc <getch+0x18>
}


// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
	__asm__ __volatile__ (
    7bc4:	a8 95       	wdr
	while (1) {
		if(radio_mode == RADIO_OFF){
			if (( UCSR0A & (1 << RXC0)) != 0) /* If we have data in the UART */
			{
				watchdogReset();
				ch = UDR0;
    7bc6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
				break;
    7bca:	08 95       	ret
			}
		}
		/* If there is data in the local buffer or data in RF24 fifo */
		if (pkt_len || (nrf24_rxFifoEmpty() == NRF24_DATA_AVAILABLE)) {
    7bcc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pkt_len.1925>
    7bd0:	88 23       	and	r24, r24
    7bd2:	49 f0       	breq	.+18     	; 0x7be6 <getch+0x32>
}


// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
	__asm__ __volatile__ (
    7bd4:	a8 95       	wdr
		}
		/* If there is data in the local buffer or data in RF24 fifo */
		if (pkt_len || (nrf24_rxFifoEmpty() == NRF24_DATA_AVAILABLE)) {

			watchdogReset();
			radio_mode = RADIO_ON;
    7bd6:	81 e0       	ldi	r24, 0x01	; 1
    7bd8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <radio_mode>

			/* If our local buffer is empty, get more data from RF24 */
			if(pkt_len == 0) {
    7bdc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pkt_len.1925>
    7be0:	81 11       	cpse	r24, r1
    7be2:	1c c0       	rjmp	.+56     	; 0x7c1c <getch+0x68>
				ch = UDR0;
				break;
			}
		}
		/* If there is data in the local buffer or data in RF24 fifo */
		if (pkt_len || (nrf24_rxFifoEmpty() == NRF24_DATA_AVAILABLE)) {
    7be4:	04 c0       	rjmp	.+8      	; 0x7bee <getch+0x3a>
    7be6:	9b d1       	rcall	.+822    	; 0x7f1e <nrf24_rxFifoEmpty>
    7be8:	81 30       	cpi	r24, 0x01	; 1
    7bea:	21 f7       	brne	.-56     	; 0x7bb4 <getch>
    7bec:	f3 cf       	rjmp	.-26     	; 0x7bd4 <getch+0x20>
			watchdogReset();
			radio_mode = RADIO_ON;

			/* If our local buffer is empty, get more data from RF24 */
			if(pkt_len == 0) {
				nrf24_getData(pkt_buf, &pkt_len);
    7bee:	6a e2       	ldi	r22, 0x2A	; 42
    7bf0:	71 e0       	ldi	r23, 0x01	; 1
    7bf2:	8a e0       	ldi	r24, 0x0A	; 10
    7bf4:	91 e0       	ldi	r25, 0x01	; 1
    7bf6:	37 d1       	rcall	.+622    	; 0x7e66 <nrf24_getData>

				if(pkt_len>1){ /* Sanity check: pkt_len should always have a minimum of 2 bytes */
    7bf8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pkt_len.1925>
    7bfc:	82 30       	cpi	r24, 0x02	; 2
    7bfe:	30 f0       	brcs	.+12     	; 0x7c0c <getch+0x58>
					if (pkt_buf[0] == pkt_id) { /* We have already received this packet */
    7c00:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
    7c04:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    7c08:	92 13       	cpse	r25, r18
    7c0a:	03 c0       	rjmp	.+6      	; 0x7c12 <getch+0x5e>
						pkt_len = 0; /* Ignore it */
    7c0c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <pkt_len.1925>
    7c10:	05 c0       	rjmp	.+10     	; 0x7c1c <getch+0x68>
					}
					else{
						pkt_id = pkt_buf[0]; /* It's a new packet, update the current ID */
    7c12:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
						pkt_len-=1; /* Ignore the first byte, which is the ID */
    7c16:	81 50       	subi	r24, 0x01	; 1
    7c18:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pkt_len.1925>
				else{
					pkt_len=0;
				}
			}

			ch = pkt_buf[1]; /* Grab next byte in the buffer */
    7c1c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_end+0x1>
    7c20:	eb e0       	ldi	r30, 0x0B	; 11
    7c22:	f1 e0       	ldi	r31, 0x01	; 1

			for(uint8_t i=1; i<NRF24_MAX_PAYLOAD-1;i++){
				pkt_buf[i]=pkt_buf[i+1];
    7c24:	91 81       	ldd	r25, Z+1	; 0x01
    7c26:	91 93       	st	Z+, r25
				}
			}

			ch = pkt_buf[1]; /* Grab next byte in the buffer */

			for(uint8_t i=1; i<NRF24_MAX_PAYLOAD-1;i++){
    7c28:	91 e0       	ldi	r25, 0x01	; 1
    7c2a:	e9 32       	cpi	r30, 0x29	; 41
    7c2c:	f9 07       	cpc	r31, r25
    7c2e:	d1 f7       	brne	.-12     	; 0x7c24 <getch+0x70>
				pkt_buf[i]=pkt_buf[i+1];
			}
			pkt_len--;
    7c30:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pkt_len.1925>
    7c34:	91 50       	subi	r25, 0x01	; 1
    7c36:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pkt_len.1925>
			break;
		}
	}
	return ch;
}
    7c3a:	08 95       	ret

00007c3c <wait_timeout>:
	  "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7c3c:	88 e1       	ldi	r24, 0x18	; 24
    7c3e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	WDTCSR = x;
    7c42:	88 e0       	ldi	r24, 0x08	; 8
    7c44:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7c48:	ff cf       	rjmp	.-2      	; 0x7c48 <wait_timeout+0xc>

00007c4a <verifySpace>:
	while (1)			      // and busy-loop so that WD causes
		;				      //  a reset and app start.
}

void verifySpace(void) {
	if (getch() != CRC_EOP)
    7c4a:	b4 df       	rcall	.-152    	; 0x7bb4 <getch>
    7c4c:	80 32       	cpi	r24, 0x20	; 32
    7c4e:	09 f0       	breq	.+2      	; 0x7c52 <verifySpace+0x8>
		wait_timeout();
    7c50:	f5 df       	rcall	.-22     	; 0x7c3c <wait_timeout>
	putch(STK_INSYNC);
    7c52:	84 e1       	ldi	r24, 0x14	; 20
    7c54:	6b cf       	rjmp	.-298    	; 0x7b2c <putch>

00007c56 <getNch>:

/***************************************************************************/
/*							Other functions								   */
/***************************************************************************/

void getNch(uint8_t count) {
    7c56:	cf 93       	push	r28
    7c58:	c8 2f       	mov	r28, r24
	do getch(); while (--count);
    7c5a:	ac df       	rcall	.-168    	; 0x7bb4 <getch>
    7c5c:	c1 50       	subi	r28, 0x01	; 1
    7c5e:	e9 f7       	brne	.-6      	; 0x7c5a <getNch+0x4>
    7c60:	cf 91       	pop	r28
	verifySpace();
}
    7c62:	f3 cf       	rjmp	.-26     	; 0x7c4a <verifySpace>

00007c64 <watchdogConfig>:
	  "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7c64:	e0 e6       	ldi	r30, 0x60	; 96
    7c66:	f0 e0       	ldi	r31, 0x00	; 0
    7c68:	98 e1       	ldi	r25, 0x18	; 24
    7c6a:	90 83       	st	Z, r25
	WDTCSR = x;
    7c6c:	80 83       	st	Z, r24
    7c6e:	08 95       	ret

00007c70 <appStart>:
	  "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7c70:	e0 e6       	ldi	r30, 0x60	; 96
    7c72:	f0 e0       	ldi	r31, 0x00	; 0
    7c74:	98 e1       	ldi	r25, 0x18	; 24
    7c76:	90 83       	st	Z, r25
	WDTCSR = x;
    7c78:	9e e0       	ldi	r25, 0x0E	; 14
    7c7a:	90 83       	st	Z, r25
	watchdogConfig(WATCHDOG_SELECTION); /* Re-enable watchdog for user app */

	//  save the reset flags in the designated register
	//  This can be saved in a main program by putting code in .init0 (which
	//  executes before normal c init code) to save R2 to a global variable.
	__asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7c7c:	28 2e       	mov	r2, r24
	__asm__ __volatile__ (
    7c7e:	ee 27       	eor	r30, r30
    7c80:	ff 27       	eor	r31, r31
    7c82:	09 94       	ijmp

00007c84 <delay8>:
#define xor_bit(REGISTER, BIT)    REGISTER ^= _BV(BIT)

#endif

static void delay8(uint16_t count) {
	while (count --)
    7c84:	01 97       	sbiw	r24, 0x01	; 1
    7c86:	48 f0       	brcs	.+18     	; 0x7c9a <delay8+0x16>
	...
	__asm__ __volatile__ (
    7c94:	00 00       	nop
    7c96:	a8 95       	wdr
    7c98:	f5 cf       	rjmp	.-22     	; 0x7c84 <delay8>
	"\tnop\n"
	"\tnop\n"
	"\tnop\n"
	"\twdr\n"
	);
    7c9a:	08 95       	ret

00007c9c <nrf24_ce_digitalWrite>:
	return data;
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if (state) {
    7c9c:	88 23       	and	r24, r24
    7c9e:	29 f0       	breq	.+10     	; 0x7caa <nrf24_ce_digitalWrite+0xe>
		my_delay(0.01); /* Minimum CE High period for stuff to work */
    7ca0:	84 e1       	ldi	r24, 0x14	; 20
    7ca2:	90 e0       	ldi	r25, 0x00	; 0
    7ca4:	ef df       	rcall	.-34     	; 0x7c84 <delay8>
		set_bit(NRF24_PORT, NRF24_CE);
    7ca6:	28 9a       	sbi	0x05, 0	; 5
    7ca8:	08 95       	ret
	}
	else {
		my_delay(0.2); /* Minimum CE interval from last edge */
    7caa:	80 e9       	ldi	r24, 0x90	; 144
    7cac:	91 e0       	ldi	r25, 0x01	; 1
    7cae:	ea df       	rcall	.-44     	; 0x7c84 <delay8>
		clr_bit(NRF24_PORT, NRF24_CE);
    7cb0:	28 98       	cbi	0x05, 0	; 5
    7cb2:	08 95       	ret

00007cb4 <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if (state)
    7cb4:	88 23       	and	r24, r24
    7cb6:	11 f0       	breq	.+4      	; 0x7cbc <nrf24_csn_digitalWrite+0x8>
		set_bit(NRF24_PORT, NRF24_CS);
    7cb8:	2a 9a       	sbi	0x05, 2	; 5
    7cba:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
    7cbc:	2a 98       	cbi	0x05, 2	; 5
    7cbe:	08 95       	ret

00007cc0 <nrf24_rx_address>:
	return NRF24_CHIP_NOMINAL;
}

/* Set the RX address */
void nrf24_rx_address(uint8_t adr[])
{
    7cc0:	0f 93       	push	r16
    7cc2:	1f 93       	push	r17
    7cc4:	cf 93       	push	r28
    7cc6:	df 93       	push	r29
	nrf24_csn_digitalWrite(LOW);
    7cc8:	ec 01       	movw	r28, r24
    7cca:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
    7ccc:	f3 df       	rcall	.-26     	; 0x7cb4 <nrf24_csn_digitalWrite>
    7cce:	8b e2       	ldi	r24, 0x2B	; 43
    7cd0:	6b d1       	rcall	.+726    	; 0x7fa8 <spi_exchange>
    7cd2:	8e 01       	movw	r16, r28
    7cd4:	0d 5f       	subi	r16, 0xFD	; 253
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    7cd8:	89 91       	ld	r24, Y+
    7cda:	66 d1       	rcall	.+716    	; 0x7fa8 <spi_exchange>
/* Set the RX address */
void nrf24_rx_address(uint8_t adr[])
{
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
    7cdc:	c0 17       	cp	r28, r16
    7cde:	d1 07       	cpc	r29, r17
    7ce0:	d9 f7       	brne	.-10     	; 0x7cd8 <nrf24_rx_address+0x18>
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7ce2:	81 e0       	ldi	r24, 0x01	; 1
}
    7ce4:	df 91       	pop	r29
    7ce6:	cf 91       	pop	r28
    7ce8:	1f 91       	pop	r17
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7cea:	0f 91       	pop	r16
    7cec:	e3 cf       	rjmp	.-58     	; 0x7cb4 <nrf24_csn_digitalWrite>

00007cee <nrf24_write_ack>:

void nrf24_write_ack()
{
	const void *ack = "A";
	uint8_t ack_len = 1;
	nrf24_csn_digitalWrite(LOW);
    7cee:	80 e0       	ldi	r24, 0x00	; 0
    7cf0:	e1 df       	rcall	.-62     	; 0x7cb4 <nrf24_csn_digitalWrite>
	spi_exchange(W_ACK_PAYLOAD);
    7cf2:	88 ea       	ldi	r24, 0xA8	; 168
    7cf4:	59 d1       	rcall	.+690    	; 0x7fa8 <spi_exchange>
	while (ack_len--) spi_exchange(*(uint8_t *)ack++);
    7cf6:	81 e4       	ldi	r24, 0x41	; 65
    7cf8:	57 d1       	rcall	.+686    	; 0x7fa8 <spi_exchange>
	nrf24_csn_digitalWrite(HIGH);
    7cfa:	81 e0       	ldi	r24, 0x01	; 1
    7cfc:	db cf       	rjmp	.-74     	; 0x7cb4 <nrf24_csn_digitalWrite>

00007cfe <nrf24_getStatus>:
}

/* Get status register data */
uint8_t nrf24_getStatus() {
    7cfe:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
    7d00:	80 e0       	ldi	r24, 0x00	; 0
    7d02:	d8 df       	rcall	.-80     	; 0x7cb4 <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
    7d04:	8f ef       	ldi	r24, 0xFF	; 255
    7d06:	50 d1       	rcall	.+672    	; 0x7fa8 <spi_exchange>
    7d08:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
    7d0a:	81 e0       	ldi	r24, 0x01	; 1
    7d0c:	d3 df       	rcall	.-90     	; 0x7cb4 <nrf24_csn_digitalWrite>
	return rv;
}
    7d0e:	8c 2f       	mov	r24, r28
    7d10:	cf 91       	pop	r28
    7d12:	08 95       	ret

00007d14 <nrf24_flushTX>:
	}
}

void nrf24_flushTX() {
	/* Flush TX FIFO */
	nrf24_csn_digitalWrite(LOW);
    7d14:	80 e0       	ldi	r24, 0x00	; 0
    7d16:	ce df       	rcall	.-100    	; 0x7cb4 <nrf24_csn_digitalWrite>
	spi_exchange(FLUSH_TX);
    7d18:	81 ee       	ldi	r24, 0xE1	; 225
    7d1a:	46 d1       	rcall	.+652    	; 0x7fa8 <spi_exchange>
	nrf24_csn_digitalWrite(HIGH);
    7d1c:	81 e0       	ldi	r24, 0x01	; 1
    7d1e:	ca cf       	rjmp	.-108    	; 0x7cb4 <nrf24_csn_digitalWrite>

00007d20 <nrf24_tx_address>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Set the TX address */
void nrf24_tx_address(uint8_t adr[])
{
    7d20:	ef 92       	push	r14
    7d22:	ff 92       	push	r15
    7d24:	0f 93       	push	r16
    7d26:	1f 93       	push	r17
    7d28:	cf 93       	push	r28
    7d2a:	df 93       	push	r29
	nrf24_ce_digitalWrite(LOW);
    7d2c:	ec 01       	movw	r28, r24
    7d2e:	80 e0       	ldi	r24, 0x00	; 0
    7d30:	b5 df       	rcall	.-150    	; 0x7c9c <nrf24_ce_digitalWrite>

	/* Flush required if we need to change address on the fly */
	/* Flush TX FIFO */
	nrf24_flushTX();
    7d32:	f0 df       	rcall	.-32     	; 0x7d14 <nrf24_flushTX>
    7d34:	80 e0       	ldi	r24, 0x00	; 0

	nrf24_csn_digitalWrite(LOW);
    7d36:	be df       	rcall	.-132    	; 0x7cb4 <nrf24_csn_digitalWrite>
    7d38:	80 e3       	ldi	r24, 0x30	; 48
	spi_exchange(TX_ADDR | W_REGISTER);
    7d3a:	36 d1       	rcall	.+620    	; 0x7fa8 <spi_exchange>
    7d3c:	7e 01       	movw	r14, r28
    7d3e:	83 e0       	ldi	r24, 0x03	; 3
    7d40:	e8 0e       	add	r14, r24
    7d42:	f1 1c       	adc	r15, r1
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7d44:	8e 01       	movw	r16, r28
    7d46:	f8 01       	movw	r30, r16
    7d48:	81 91       	ld	r24, Z+
    7d4a:	8f 01       	movw	r16, r30
	/* Flush TX FIFO */
	nrf24_flushTX();

	nrf24_csn_digitalWrite(LOW);
	spi_exchange(TX_ADDR | W_REGISTER);
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
    7d4c:	2d d1       	rcall	.+602    	; 0x7fa8 <spi_exchange>
    7d4e:	0e 15       	cp	r16, r14
    7d50:	1f 05       	cpc	r17, r15
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7d52:	c9 f7       	brne	.-14     	; 0x7d46 <nrf24_tx_address+0x26>
    7d54:	81 e0       	ldi	r24, 0x01	; 1
    7d56:	ae df       	rcall	.-164    	; 0x7cb4 <nrf24_csn_digitalWrite>
	
	my_delay(0.1);
    7d58:	88 ec       	ldi	r24, 0xC8	; 200
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	93 df       	rcall	.-218    	; 0x7c84 <delay8>

	/* RX_ADDR_P0 must be set to the sending address for auto ack to work. */
	nrf24_csn_digitalWrite(LOW);
    7d5e:	80 e0       	ldi	r24, 0x00	; 0
    7d60:	a9 df       	rcall	.-174    	; 0x7cb4 <nrf24_csn_digitalWrite>
	spi_exchange(RX_ADDR_P0 | W_REGISTER);
    7d62:	8a e2       	ldi	r24, 0x2A	; 42
    7d64:	21 d1       	rcall	.+578    	; 0x7fa8 <spi_exchange>
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7d66:	89 91       	ld	r24, Y+
    7d68:	1f d1       	rcall	.+574    	; 0x7fa8 <spi_exchange>
	my_delay(0.1);

	/* RX_ADDR_P0 must be set to the sending address for auto ack to work. */
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(RX_ADDR_P0 | W_REGISTER);
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
    7d6a:	ec 16       	cp	r14, r28
    7d6c:	fd 06       	cpc	r15, r29
    7d6e:	d9 f7       	brne	.-10     	; 0x7d66 <nrf24_tx_address+0x46>
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
}
    7d70:	81 e0       	ldi	r24, 0x01	; 1
    7d72:	df 91       	pop	r29
    7d74:	cf 91       	pop	r28
    7d76:	1f 91       	pop	r17
	spi_exchange(RX_ADDR_P0 | W_REGISTER);
	for (uint8_t i = 0; i < NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7d78:	0f 91       	pop	r16
    7d7a:	ff 90       	pop	r15
    7d7c:	ef 90       	pop	r14
    7d7e:	9a cf       	rjmp	.-204    	; 0x7cb4 <nrf24_csn_digitalWrite>

00007d80 <nrf24_flushRX>:
	spi_exchange(FLUSH_TX);
	nrf24_csn_digitalWrite(HIGH);
}

void nrf24_flushRX() {
	nrf24_csn_digitalWrite(LOW);
    7d80:	80 e0       	ldi	r24, 0x00	; 0
    7d82:	98 df       	rcall	.-208    	; 0x7cb4 <nrf24_csn_digitalWrite>
    7d84:	82 ee       	ldi	r24, 0xE2	; 226
	spi_exchange(FLUSH_RX);
    7d86:	10 d1       	rcall	.+544    	; 0x7fa8 <spi_exchange>
    7d88:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7d8a:	94 cf       	rjmp	.-216    	; 0x7cb4 <nrf24_csn_digitalWrite>

00007d8c <nrf24_payloadLength>:

/* Returns the length of data waiting in the RX FIFO */
uint8_t nrf24_payloadLength() {
	uint8_t payload_len;

	nrf24_csn_digitalWrite(LOW);
    7d8c:	cf 93       	push	r28
    7d8e:	80 e0       	ldi	r24, 0x00	; 0
    7d90:	91 df       	rcall	.-222    	; 0x7cb4 <nrf24_csn_digitalWrite>
	spi_exchange(R_RX_PL_WID);
    7d92:	80 e6       	ldi	r24, 0x60	; 96
    7d94:	09 d1       	rcall	.+530    	; 0x7fa8 <spi_exchange>
	payload_len = spi_exchange(0);
    7d96:	80 e0       	ldi	r24, 0x00	; 0
    7d98:	07 d1       	rcall	.+526    	; 0x7fa8 <spi_exchange>
    7d9a:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
    7d9c:	81 e0       	ldi	r24, 0x01	; 1
    7d9e:	8a df       	rcall	.-236    	; 0x7cb4 <nrf24_csn_digitalWrite>
    7da0:	8f ef       	ldi	r24, 0xFF	; 255

	/* If payload is larger than 32 or equal to 0, an error has
	* occurred in transmission and payload must be discarded */
	if ( (payload_len == 0) | (payload_len > NRF24_MAX_PAYLOAD)) {
    7da2:	8c 0f       	add	r24, r28
    7da4:	80 32       	cpi	r24, 0x20	; 32
    7da6:	10 f0       	brcs	.+4      	; 0x7dac <nrf24_payloadLength+0x20>
		/* Flush RX FIFO */
		nrf24_flushRX();
    7da8:	eb df       	rcall	.-42     	; 0x7d80 <nrf24_flushRX>
    7daa:	c0 e0       	ldi	r28, 0x00	; 0
		payload_len = 0;
    7dac:	8c 2f       	mov	r24, r28
	}
	return payload_len;
}
    7dae:	cf 91       	pop	r28
    7db0:	08 95       	ret

00007db2 <nrf24_configRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Write a single byte to register */
void nrf24_configRegister(uint8_t reg, uint8_t data)
{
    7db2:	cf 93       	push	r28
    7db4:	df 93       	push	r29
    7db6:	c8 2f       	mov	r28, r24
    7db8:	d6 2f       	mov	r29, r22
	nrf24_csn_digitalWrite(LOW);
    7dba:	80 e0       	ldi	r24, 0x00	; 0
    7dbc:	7b df       	rcall	.-266    	; 0x7cb4 <nrf24_csn_digitalWrite>
	spi_exchange(W_REGISTER | (REGISTER_MASK & reg));
    7dbe:	8c 2f       	mov	r24, r28
    7dc0:	8f 71       	andi	r24, 0x1F	; 31
    7dc2:	80 62       	ori	r24, 0x20	; 32
    7dc4:	f1 d0       	rcall	.+482    	; 0x7fa8 <spi_exchange>
	spi_exchange(data);
    7dc6:	8d 2f       	mov	r24, r29
    7dc8:	ef d0       	rcall	.+478    	; 0x7fa8 <spi_exchange>
    7dca:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7dcc:	df 91       	pop	r29
}
    7dce:	cf 91       	pop	r28
    7dd0:	71 cf       	rjmp	.-286    	; 0x7cb4 <nrf24_csn_digitalWrite>

00007dd2 <nrf24_resetStatus>:
	return rv;
}

/* Resets status register */
void nrf24_resetStatus() {
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
    7dd2:	60 e7       	ldi	r22, 0x70	; 112
    7dd4:	87 e0       	ldi	r24, 0x07	; 7
    7dd6:	ed cf       	rjmp	.-38     	; 0x7db2 <nrf24_configRegister>

00007dd8 <nrf24_setMode_RX>:
	}
}

/* Set chip as receiver */
void nrf24_setMode_RX() {
	if (rf24_mode != MODE_RX) {
    7dd8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rf24_mode>
    7ddc:	88 23       	and	r24, r24
    7dde:	71 f0       	breq	.+28     	; 0x7dfc <nrf24_setMode_RX+0x24>
		/* Config RF24 as receiver */
		nrf24_configRegister(CONFIG, nrf24_CONFIG | ((1 << PWR_UP) | (1 << PRIM_RX)));
    7de0:	6f e7       	ldi	r22, 0x7F	; 127
    7de2:	80 e0       	ldi	r24, 0x00	; 0
    7de4:	e6 df       	rcall	.-52     	; 0x7db2 <nrf24_configRegister>
    7de6:	62 e0       	ldi	r22, 0x02	; 2

		/* Enable receiver address on Pipe 1. Pipe 0 is for transmitting ACKs */
		nrf24_configRegister(EN_RXADDR, (0 << ERX_P0) | (1 << ERX_P1));
    7de8:	82 e0       	ldi	r24, 0x02	; 2
    7dea:	e3 df       	rcall	.-58     	; 0x7db2 <nrf24_configRegister>

		nrf24_resetStatus();
    7dec:	f2 df       	rcall	.-28     	; 0x7dd2 <nrf24_resetStatus>
    7dee:	8c e2       	ldi	r24, 0x2C	; 44

		/* Settling time */
		my_delay(0.15);
    7df0:	91 e0       	ldi	r25, 0x01	; 1
    7df2:	48 df       	rcall	.-368    	; 0x7c84 <delay8>
    7df4:	81 e0       	ldi	r24, 0x01	; 1
    7df6:	52 df       	rcall	.-348    	; 0x7c9c <nrf24_ce_digitalWrite>

		/* Turn on chip */
		nrf24_ce_digitalWrite(HIGH);
    7df8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rf24_mode>
    7dfc:	08 95       	ret

00007dfe <nrf24_wait_tx_result>:
	}
	return payload_len;
}

/* Waits until transmission is complete or timeout is reached */
uint8_t nrf24_wait_tx_result() {
    7dfe:	0f 93       	push	r16
    7e00:	1f 93       	push	r17
	uint16_t timeout = 10000; /* ~100ms timeout with 10us delay each assertion */
	uint8_t status = nrf24_getStatus();
    7e02:	cf 93       	push	r28
    7e04:	7c df       	rcall	.-264    	; 0x7cfe <nrf24_getStatus>

	/* Waits while packet is being sent
	* TS_DS: Data sent. If auto_ack is on, this is only set when ACK is received.
	* TX_FULL: Transmission FIFO is full.
	* MAX_RT: Maximum retries reached. */
	status = nrf24_getStatus();
    7e06:	7b df       	rcall	.-266    	; 0x7cfe <nrf24_getStatus>
    7e08:	c8 2f       	mov	r28, r24
	uint8_t msg_sent = status & (1 << TX_DS);
    7e0a:	c0 72       	andi	r28, 0x20	; 32
    7e0c:	00 e1       	ldi	r16, 0x10	; 16
		status = nrf24_getStatus();
	}
	msg_sent = status & (1 << TX_DS);
	#endif
	
	while ( (!msg_sent || (status & (1 << TX_FULL)) ) && !(status & (1 << MAX_RT)) && --timeout) {
    7e0e:	17 e2       	ldi	r17, 0x27	; 39
    7e10:	cc 23       	and	r28, r28
    7e12:	59 f0       	breq	.+22     	; 0x7e2a <nrf24_wait_tx_result+0x2c>
    7e14:	80 fd       	sbrc	r24, 0
    7e16:	09 c0       	rjmp	.+18     	; 0x7e2a <nrf24_wait_tx_result+0x2c>
    7e18:	60 e6       	ldi	r22, 0x60	; 96
		status = nrf24_getStatus();
		msg_sent = status & (1 << TX_DS);
	} /* Transmission will end here */
	
	/* Reset status register */
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS));
    7e1a:	87 e0       	ldi	r24, 0x07	; 7
    7e1c:	ca df       	rcall	.-108    	; 0x7db2 <nrf24_configRegister>
    7e1e:	dc df       	rcall	.-72     	; 0x7dd8 <nrf24_setMode_RX>

	/* Switch back to RX mode */
	nrf24_setMode_RX();
    7e20:	81 e0       	ldi	r24, 0x01	; 1
    7e22:	cc 23       	and	r28, r28
    7e24:	71 f0       	breq	.+28     	; 0x7e42 <nrf24_wait_tx_result+0x44>
    7e26:	80 e0       	ldi	r24, 0x00	; 0
    7e28:	0c c0       	rjmp	.+24     	; 0x7e42 <nrf24_wait_tx_result+0x44>
		status = nrf24_getStatus();
	}
	msg_sent = status & (1 << TX_DS);
	#endif
	
	while ( (!msg_sent || (status & (1 << TX_FULL)) ) && !(status & (1 << MAX_RT)) && --timeout) {
    7e2a:	84 fd       	sbrc	r24, 4
    7e2c:	f5 cf       	rjmp	.-22     	; 0x7e18 <nrf24_wait_tx_result+0x1a>
    7e2e:	01 50       	subi	r16, 0x01	; 1
    7e30:	11 09       	sbc	r17, r1
		my_delay(0.01);
    7e32:	91 f3       	breq	.-28     	; 0x7e18 <nrf24_wait_tx_result+0x1a>
    7e34:	84 e1       	ldi	r24, 0x14	; 20
    7e36:	90 e0       	ldi	r25, 0x00	; 0
		status = nrf24_getStatus();
    7e38:	25 df       	rcall	.-438    	; 0x7c84 <delay8>
    7e3a:	61 df       	rcall	.-318    	; 0x7cfe <nrf24_getStatus>
		msg_sent = status & (1 << TX_DS);
    7e3c:	c8 2f       	mov	r28, r24
    7e3e:	c0 72       	andi	r28, 0x20	; 32
    7e40:	e7 cf       	rjmp	.-50     	; 0x7e10 <nrf24_wait_tx_result+0x12>
		return NRF24_MESSAGE_SENT;
	}
	else {
		return NRF24_MESSAGE_LOST;
	}
}
    7e42:	cf 91       	pop	r28
    7e44:	1f 91       	pop	r17
    7e46:	0f 91       	pop	r16
    7e48:	08 95       	ret

00007e4a <nrf24_setMode_TX>:
	}
}

/* Set chip as transmitter */
void nrf24_setMode_TX() {
	if (rf24_mode != MODE_TX) {
    7e4a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rf24_mode>
    7e4e:	81 30       	cpi	r24, 0x01	; 1
    7e50:	49 f0       	breq	.+18     	; 0x7e64 <nrf24_setMode_TX+0x1a>
		/* Turn on chip in TX mode*/
		nrf24_configRegister(CONFIG, nrf24_CONFIG | (1 << PWR_UP) | (0 << PRIM_RX) );
    7e52:	6e e7       	ldi	r22, 0x7E	; 126
    7e54:	80 e0       	ldi	r24, 0x00	; 0
    7e56:	ad df       	rcall	.-166    	; 0x7db2 <nrf24_configRegister>

		/* Enable receiver address on pipe 0 for ACKs*/
		nrf24_configRegister(EN_RXADDR, (1 << ERX_P0) | (0 << ERX_P1));
    7e58:	61 e0       	ldi	r22, 0x01	; 1
    7e5a:	82 e0       	ldi	r24, 0x02	; 2
    7e5c:	aa df       	rcall	.-172    	; 0x7db2 <nrf24_configRegister>
    7e5e:	81 e0       	ldi	r24, 0x01	; 1
		
		rf24_mode = MODE_TX;
    7e60:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rf24_mode>
    7e64:	08 95       	ret

00007e66 <nrf24_getData>:
	nrf24_ce_digitalWrite(HIGH);
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t * data, uint8_t * pkt_len)
{
    7e66:	cf 92       	push	r12
    7e68:	df 92       	push	r13
    7e6a:	ef 92       	push	r14
    7e6c:	ff 92       	push	r15
    7e6e:	0f 93       	push	r16
    7e70:	1f 93       	push	r17
	nrf24_write_ack();
    7e72:	cf 93       	push	r28
    7e74:	7c 01       	movw	r14, r24
	
	/* Reset Received Data flag bit */
	nrf24_configRegister(STATUS, (1 << RX_DR));
    7e76:	8b 01       	movw	r16, r22
    7e78:	3a df       	rcall	.-396    	; 0x7cee <nrf24_write_ack>
    7e7a:	60 e4       	ldi	r22, 0x40	; 64
    7e7c:	87 e0       	ldi	r24, 0x07	; 7

	/* Number of bytes in the RX FIFO */
	*pkt_len = nrf24_payloadLength();
    7e7e:	99 df       	rcall	.-206    	; 0x7db2 <nrf24_configRegister>
    7e80:	85 df       	rcall	.-246    	; 0x7d8c <nrf24_payloadLength>
    7e82:	f8 01       	movw	r30, r16

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    7e84:	80 83       	st	Z, r24
    7e86:	80 e0       	ldi	r24, 0x00	; 0

	/* Send cmd to read RX payload */
	spi_exchange(R_RX_PAYLOAD);
    7e88:	15 df       	rcall	.-470    	; 0x7cb4 <nrf24_csn_digitalWrite>
    7e8a:	81 e6       	ldi	r24, 0x61	; 97
    7e8c:	8d d0       	rcall	.+282    	; 0x7fa8 <spi_exchange>

	/* Read payload */
	for (uint8_t i = 0; i < *pkt_len; i++)
    7e8e:	c0 e0       	ldi	r28, 0x00	; 0
    7e90:	f8 01       	movw	r30, r16
    7e92:	80 81       	ld	r24, Z
    7e94:	c8 17       	cp	r28, r24
	{
		data[i] = spi_exchange(0);
    7e96:	48 f4       	brcc	.+18     	; 0x7eaa <nrf24_getData+0x44>
    7e98:	67 01       	movw	r12, r14
    7e9a:	cc 0e       	add	r12, r28
    7e9c:	d1 1c       	adc	r13, r1
    7e9e:	80 e0       	ldi	r24, 0x00	; 0
    7ea0:	83 d0       	rcall	.+262    	; 0x7fa8 <spi_exchange>

	/* Send cmd to read RX payload */
	spi_exchange(R_RX_PAYLOAD);

	/* Read payload */
	for (uint8_t i = 0; i < *pkt_len; i++)
    7ea2:	f6 01       	movw	r30, r12
    7ea4:	80 83       	st	Z, r24
		data[i] = spi_exchange(0);
	}

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
}
    7ea6:	cf 5f       	subi	r28, 0xFF	; 255
    7ea8:	f3 cf       	rjmp	.-26     	; 0x7e90 <nrf24_getData+0x2a>
    7eaa:	81 e0       	ldi	r24, 0x01	; 1
    7eac:	cf 91       	pop	r28
    7eae:	1f 91       	pop	r17
    7eb0:	0f 91       	pop	r16
	{
		data[i] = spi_exchange(0);
	}

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7eb2:	ff 90       	pop	r15
    7eb4:	ef 90       	pop	r14
    7eb6:	df 90       	pop	r13
    7eb8:	cf 90       	pop	r12
    7eba:	fc ce       	rjmp	.-520    	; 0x7cb4 <nrf24_csn_digitalWrite>

00007ebc <nrf24_sendData>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Sends a packet of data with dynamic length */
void nrf24_sendData(uint8_t* data, uint8_t pkt_len)
{
    7ebc:	0f 93       	push	r16
    7ebe:	1f 93       	push	r17
    7ec0:	cf 93       	push	r28
    7ec2:	df 93       	push	r29
    7ec4:	ec 01       	movw	r28, r24
    7ec6:	16 2f       	mov	r17, r22

	/* Set to transmitter mode */
	nrf24_setMode_TX();
    7ec8:	c0 df       	rcall	.-128    	; 0x7e4a <nrf24_setMode_TX>
    7eca:	5a df       	rcall	.-332    	; 0x7d80 <nrf24_flushRX>

	/* Flush TX & RX FIFOs to clear old data */
	nrf24_flushRX();
    7ecc:	23 df       	rcall	.-442    	; 0x7d14 <nrf24_flushTX>
	nrf24_flushTX();
    7ece:	60 e2       	ldi	r22, 0x20	; 32
    7ed0:	87 e0       	ldi	r24, 0x07	; 7
	
	/* Clear interrupt */
	nrf24_configRegister(STATUS, (1 << TX_DS));
    7ed2:	6f df       	rcall	.-290    	; 0x7db2 <nrf24_configRegister>
    7ed4:	80 e0       	ldi	r24, 0x00	; 0
    7ed6:	ee de       	rcall	.-548    	; 0x7cb4 <nrf24_csn_digitalWrite>

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    7ed8:	80 ea       	ldi	r24, 0xA0	; 160

	/* Write cmd to write payload */
	spi_exchange(W_TX_PAYLOAD);
    7eda:	66 d0       	rcall	.+204    	; 0x7fa8 <spi_exchange>
    7edc:	ce 01       	movw	r24, r28
    7ede:	81 0f       	add	r24, r17
    7ee0:	91 1d       	adc	r25, r1
    7ee2:	8c 01       	movw	r16, r24

	/* Write payload */
	for (uint8_t i = 0; i < pkt_len; i++)
    7ee4:	c0 17       	cp	r28, r16
    7ee6:	d1 07       	cpc	r29, r17
	{
		spi_exchange(data[i]);
    7ee8:	19 f0       	breq	.+6      	; 0x7ef0 <nrf24_sendData+0x34>
    7eea:	89 91       	ld	r24, Y+
    7eec:	5d d0       	rcall	.+186    	; 0x7fa8 <spi_exchange>
	}

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7eee:	fa cf       	rjmp	.-12     	; 0x7ee4 <nrf24_sendData+0x28>
    7ef0:	81 e0       	ldi	r24, 0x01	; 1

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
    7ef2:	e0 de       	rcall	.-576    	; 0x7cb4 <nrf24_csn_digitalWrite>
}
    7ef4:	81 e0       	ldi	r24, 0x01	; 1
    7ef6:	df 91       	pop	r29
    7ef8:	cf 91       	pop	r28

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
    7efa:	1f 91       	pop	r17
    7efc:	0f 91       	pop	r16
    7efe:	ce ce       	rjmp	.-612    	; 0x7c9c <nrf24_ce_digitalWrite>

00007f00 <nrf24_readRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Read byte from nrf24 register */
uint8_t nrf24_readRegister(uint8_t reg)
{
    7f00:	cf 93       	push	r28
    7f02:	c8 2f       	mov	r28, r24
	uint8_t data;
	nrf24_csn_digitalWrite(LOW);
    7f04:	80 e0       	ldi	r24, 0x00	; 0
    7f06:	d6 de       	rcall	.-596    	; 0x7cb4 <nrf24_csn_digitalWrite>
	spi_exchange(R_REGISTER | (REGISTER_MASK & reg));
    7f08:	8c 2f       	mov	r24, r28
    7f0a:	8f 71       	andi	r24, 0x1F	; 31
	data = spi_exchange(0);
    7f0c:	4d d0       	rcall	.+154    	; 0x7fa8 <spi_exchange>
    7f0e:	80 e0       	ldi	r24, 0x00	; 0
    7f10:	4b d0       	rcall	.+150    	; 0x7fa8 <spi_exchange>
    7f12:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
    7f14:	81 e0       	ldi	r24, 0x01	; 1
    7f16:	ce de       	rcall	.-612    	; 0x7cb4 <nrf24_csn_digitalWrite>
    7f18:	8c 2f       	mov	r24, r28
	return data;
}
    7f1a:	cf 91       	pop	r28
    7f1c:	08 95       	ret

00007f1e <nrf24_rxFifoEmpty>:
	return nrf24_rxFifoEmpty();
}

/* Checks if RX FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty() {
	uint8_t fifoStatus = nrf24_readRegister(FIFO_STATUS);
    7f1e:	87 e1       	ldi	r24, 0x17	; 23
    7f20:	ef df       	rcall	.-34     	; 0x7f00 <nrf24_readRegister>
    7f22:	80 95       	com	r24
    7f24:	81 70       	andi	r24, 0x01	; 1
		return NRF24_DATA_UNAVAILABLE;
	}
	else {
		return NRF24_DATA_AVAILABLE;
	}
}
    7f26:	08 95       	ret

00007f28 <nrf24_dataReady>:
}

/* Checks if data was received or if there is data in the FIFO */
uint8_t nrf24_dataReady()
{
	uint8_t status = nrf24_getStatus();
    7f28:	ea de       	rcall	.-556    	; 0x7cfe <nrf24_getStatus>
    7f2a:	86 ff       	sbrs	r24, 6
	/* Check if Data Ready flag is set.*/
	/* RX_DR just means data has arrived in the FIFO,
	* but we still need to verify if there is already
	* data in the FIFO in the occasions where RX_DR
	* isn't set. */
	if ( status & (1 << RX_DR) ) {
    7f2c:	f8 cf       	rjmp	.-16     	; 0x7f1e <nrf24_rxFifoEmpty>
		return NRF24_DATA_AVAILABLE;
	}
	return nrf24_rxFifoEmpty();
    7f2e:	81 e0       	ldi	r24, 0x01	; 1
    7f30:	08 95       	ret

00007f32 <nrf24_config>:
/* Current mode of operation of the rf24 chip */
static volatile uint8_t rf24_mode = MODE_IDLE;

/* Setup the module */
uint8_t nrf24_config(uint8_t *TX_addr, uint8_t *RX_addr)
{
    7f32:	0f 93       	push	r16
    7f34:	1f 93       	push	r17
    7f36:	cf 93       	push	r28
    7f38:	df 93       	push	r29
    7f3a:	8c 01       	movw	r16, r24
    7f3c:	eb 01       	movw	r28, r22
	/* Set pins as output  */
	NRF24_DDR |= (_BV(NRF24_CE) | _BV(NRF24_CS));
    7f3e:	84 b1       	in	r24, 0x04	; 4
    7f40:	85 60       	ori	r24, 0x05	; 5
    7f42:	84 b9       	out	0x04, r24	; 4

	/* Initialize pins */
	nrf24_ce_digitalWrite(LOW);
    7f44:	80 e0       	ldi	r24, 0x00	; 0
    7f46:	aa de       	rcall	.-684    	; 0x7c9c <nrf24_ce_digitalWrite>
    7f48:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7f4a:	b4 de       	rcall	.-664    	; 0x7cb4 <nrf24_csn_digitalWrite>
    7f4c:	80 e1       	ldi	r24, 0x10	; 16
    7f4e:	97 e2       	ldi	r25, 0x27	; 39

	my_delay(5); /* Some startup settling time */
    7f50:	99 de       	rcall	.-718    	; 0x7c84 <delay8>
    7f52:	e0 de       	rcall	.-576    	; 0x7d14 <nrf24_flushTX>
    7f54:	15 df       	rcall	.-470    	; 0x7d80 <nrf24_flushRX>
    7f56:	61 e0       	ldi	r22, 0x01	; 1

	nrf24_flushTX();
    7f58:	83 e0       	ldi	r24, 0x03	; 3
    7f5a:	2b df       	rcall	.-426    	; 0x7db2 <nrf24_configRegister>
	nrf24_flushRX();
    7f5c:	83 e0       	ldi	r24, 0x03	; 3
    7f5e:	d0 df       	rcall	.-96     	; 0x7f00 <nrf24_readRegister>

	/* Address width */
	nrf24_configRegister(SETUP_AW, (NRF24_ADDR_WIDTH - 2) << AW);
    7f60:	81 30       	cpi	r24, 0x01	; 1
    7f62:	e1 f4       	brne	.+56     	; 0x7f9c <nrf24_config+0x6a>
    7f64:	c8 01       	movw	r24, r16
    7f66:	dc de       	rcall	.-584    	; 0x7d20 <nrf24_tx_address>

	/* Check the register we just configured */
	uint8_t regval = nrf24_readRegister(SETUP_AW);
    7f68:	ce 01       	movw	r24, r28
    7f6a:	aa de       	rcall	.-684    	; 0x7cc0 <nrf24_rx_address>
    7f6c:	62 e3       	ldi	r22, 0x32	; 50
	if (regval != (NRF24_ADDR_WIDTH - 2) << AW) /* There may be no nRF24 connected */
    7f6e:	85 e0       	ldi	r24, 0x05	; 5
    7f70:	20 df       	rcall	.-448    	; 0x7db2 <nrf24_configRegister>
		return NRF24_CHIP_DISCONNECTED;

	/* Config addresses */
	nrf24_tx_address(TX_addr);
    7f72:	63 e0       	ldi	r22, 0x03	; 3
    7f74:	8c e1       	ldi	r24, 0x1C	; 28
    7f76:	1d df       	rcall	.-454    	; 0x7db2 <nrf24_configRegister>
	nrf24_rx_address(RX_addr);
    7f78:	67 e0       	ldi	r22, 0x07	; 7
    7f7a:	8d e1       	ldi	r24, 0x1D	; 29
    7f7c:	1a df       	rcall	.-460    	; 0x7db2 <nrf24_configRegister>

	// Set RF channel
	nrf24_configRegister(RF_CH, NRF24_CHANNEL);
    7f7e:	66 e0       	ldi	r22, 0x06	; 6
    7f80:	86 e0       	ldi	r24, 0x06	; 6
    7f82:	17 df       	rcall	.-466    	; 0x7db2 <nrf24_configRegister>
    7f84:	63 e0       	ldi	r22, 0x03	; 3

	/* Dynamic payload length for TX & RX (pipes 0 and 1) */
	nrf24_configRegister(DYNPD, (1 << DPL_P0) | (1 << DPL_P1) | (0 << DPL_P2) | (0 << DPL_P3) | (0 << DPL_P4) | (0 << DPL_P5));
    7f86:	81 e0       	ldi	r24, 0x01	; 1
    7f88:	14 df       	rcall	.-472    	; 0x7db2 <nrf24_configRegister>
    7f8a:	6f e7       	ldi	r22, 0x7F	; 127
    7f8c:	84 e0       	ldi	r24, 0x04	; 4

	/* Enable dynamic payload feature */
	nrf24_configRegister(FEATURE, (1 << EN_DPL) | (1<<EN_ACK_PAY) | (1<<EN_DYN_ACK));
    7f8e:	11 df       	rcall	.-478    	; 0x7db2 <nrf24_configRegister>
    7f90:	60 e7       	ldi	r22, 0x70	; 112
    7f92:	87 e0       	ldi	r24, 0x07	; 7
    7f94:	0e df       	rcall	.-484    	; 0x7db2 <nrf24_configRegister>

	/* Speed: 250kbps, TX gain: 0dbm */
	nrf24_configRegister(RF_SETUP, (1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH) | (0 << RF_DR_LOW) | (0 << RF_DR_HIGH));
    7f96:	20 df       	rcall	.-448    	; 0x7dd8 <nrf24_setMode_RX>
    7f98:	80 e0       	ldi	r24, 0x00	; 0
    7f9a:	01 c0       	rjmp	.+2      	; 0x7f9e <nrf24_config+0x6c>
    7f9c:	81 e0       	ldi	r24, 0x01	; 1

	/* Enable ACKing on pipes 0 & 1 */
	nrf24_configRegister(EN_AA, (1 << ENAA_P0) | (1 << ENAA_P1) | (0 << ENAA_P2) | (0 << ENAA_P3) | (0 << ENAA_P4) | (0 << ENAA_P5));
    7f9e:	df 91       	pop	r29
    7fa0:	cf 91       	pop	r28
    7fa2:	1f 91       	pop	r17
    7fa4:	0f 91       	pop	r16

	/* Auto retransmit delay: 2000 us and Up to 15 retransmissions */
	nrf24_configRegister(SETUP_RETR, (0x07 << ARD) | (0x0F << ARC));
    7fa6:	08 95       	ret

00007fa8 <spi_exchange>:

/* File includes */
#include "spi.h"

uint8_t spi_exchange(uint8_t data) {
    SPDR = data;
    7fa8:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    7faa:	0d b4       	in	r0, 0x2d	; 45
    7fac:	07 fe       	sbrs	r0, 7
    7fae:	fd cf       	rjmp	.-6      	; 0x7faa <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
    7fb0:	8e b5       	in	r24, 0x2e	; 46
}
    7fb2:	08 95       	ret

00007fb4 <spi_init>:

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
    7fb4:	84 b1       	in	r24, 0x04	; 4
    7fb6:	8e 62       	ori	r24, 0x2E	; 46
    7fb8:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO); /* Set MISO as input */
    7fba:	24 98       	cbi	0x04, 4	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
    7fbc:	80 e5       	ldi	r24, 0x50	; 80
    7fbe:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* Double speed */
    7fc0:	81 e0       	ldi	r24, 0x01	; 1
    7fc2:	8d bd       	out	0x2d, r24	; 45
    7fc4:	08 95       	ret
