
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00007e26  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00007900  00007900  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  000005bc  2**0
                  CONTENTS, READONLY
  3 .bss          00000044  00800102  00800102  000005bc  2**0
                  ALLOC
  4 .stab         00001830  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000011f3  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00002fe3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007900 <main>:
    7900:	f8 94       	cli
    7902:	11 24       	eor	r1, r1
    7904:	8f ed       	ldi	r24, 0xDF	; 223
    7906:	98 e0       	ldi	r25, 0x08	; 8
    7908:	9e bf       	out	0x3e, r25	; 62
    790a:	8d bf       	out	0x3d, r24	; 61
    790c:	cd b7       	in	r28, 0x3d	; 61
    790e:	de b7       	in	r29, 0x3e	; 62
    7910:	84 b7       	in	r24, 0x34	; 52
    7912:	14 be       	out	0x34, r1	; 52
    7914:	83 ff       	sbrs	r24, 3
    7916:	18 c0       	rjmp	.+48     	; 0x7948 <main+0x48>
    7918:	40 91 ec 08 	lds	r20, 0x08EC	; 0x8008ec <__bss_end+0x7a6>
    791c:	50 91 ed 08 	lds	r21, 0x08ED	; 0x8008ed <__bss_end+0x7a7>
    7920:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <__bss_end+0x7a8>
    7924:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <__bss_end+0x7a9>
    7928:	4f 3e       	cpi	r20, 0xEF	; 239
    792a:	5e 4b       	sbci	r21, 0xBE	; 190
    792c:	6d 4a       	sbci	r22, 0xAD	; 173
    792e:	7e 4d       	sbci	r23, 0xDE	; 222
    7930:	59 f4       	brne	.+22     	; 0x7948 <main+0x48>
    7932:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <__bss_end+0x7a6>
    7936:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <__bss_end+0x7a7>
    793a:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <__bss_end+0x7a8>
    793e:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <__bss_end+0x7a9>
    7942:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__bss_end+0x7a5>
    7946:	65 d2       	rcall	.+1226   	; 0x7e12 <appStart>
    7948:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__bss_end+0x7a5>
    794c:	8f ee       	ldi	r24, 0xEF	; 239
    794e:	9e eb       	ldi	r25, 0xBE	; 190
    7950:	ad ea       	ldi	r26, 0xAD	; 173
    7952:	be ed       	ldi	r27, 0xDE	; 222
    7954:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__bss_end+0x7a6>
    7958:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <__bss_end+0x7a7>
    795c:	a0 93 ee 08 	sts	0x08EE, r26	; 0x8008ee <__bss_end+0x7a8>
    7960:	b0 93 ef 08 	sts	0x08EF, r27	; 0x8008ef <__bss_end+0x7a9>
    7964:	11 e0       	ldi	r17, 0x01	; 1
    7966:	a0 e0       	ldi	r26, 0x00	; 0
    7968:	b1 e0       	ldi	r27, 0x01	; 1
    796a:	e6 e2       	ldi	r30, 0x26	; 38
    796c:	fe e7       	ldi	r31, 0x7E	; 126
    796e:	02 c0       	rjmp	.+4      	; 0x7974 <cpchk>

00007970 <copy>:
    7970:	05 90       	lpm	r0, Z+
    7972:	0d 92       	st	X+, r0

00007974 <cpchk>:
    7974:	a2 30       	cpi	r26, 0x02	; 2
    7976:	b1 07       	cpc	r27, r17
    7978:	d9 f7       	brne	.-10     	; 0x7970 <copy>
    797a:	11 e0       	ldi	r17, 0x01	; 1
    797c:	a2 e0       	ldi	r26, 0x02	; 2
    797e:	b1 e0       	ldi	r27, 0x01	; 1
    7980:	01 c0       	rjmp	.+2      	; 0x7984 <clchk>

00007982 <clear>:
    7982:	1d 92       	st	X+, r1

00007984 <clchk>:
    7984:	a6 34       	cpi	r26, 0x46	; 70
    7986:	b1 07       	cpc	r27, r17
    7988:	e1 f7       	brne	.-8      	; 0x7982 <clear>
    798a:	8a b1       	in	r24, 0x0a	; 10
    798c:	83 60       	ori	r24, 0x03	; 3
    798e:	8a b9       	out	0x0a, r24	; 10
    7990:	8b b1       	in	r24, 0x0b	; 11
    7992:	8c 7f       	andi	r24, 0xFC	; 252
    7994:	8b b9       	out	0x0b, r24	; 11
    7996:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    799a:	87 e0       	ldi	r24, 0x07	; 7
    799c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    79a0:	86 e0       	ldi	r24, 0x06	; 6
    79a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    79a6:	88 e1       	ldi	r24, 0x18	; 24
    79a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    79ac:	09 d0       	rcall	.+18     	; 0x79c0 <spi_init>
    79ae:	d4 d1       	rcall	.+936    	; 0x7d58 <getch>
    79b0:	9d d1       	rcall	.+826    	; 0x7cec <putch>
    79b2:	fd cf       	rjmp	.-6      	; 0x79ae <clchk+0x2a>

000079b4 <spi_exchange>:

/* File includes */
#include "spi.h"

uint8_t spi_exchange(uint8_t data) {
    SPDR = data;
    79b4:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    79b6:	0d b4       	in	r0, 0x2d	; 45
    79b8:	07 fe       	sbrs	r0, 7
    79ba:	fd cf       	rjmp	.-6      	; 0x79b6 <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
    79bc:	8e b5       	in	r24, 0x2e	; 46
}
    79be:	08 95       	ret

000079c0 <spi_init>:

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
    79c0:	84 b1       	in	r24, 0x04	; 4
    79c2:	8e 62       	ori	r24, 0x2E	; 46
    79c4:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO); /* Set MISO as input */
    79c6:	24 98       	cbi	0x04, 4	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
    79c8:	80 e5       	ldi	r24, 0x50	; 80
    79ca:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* Double speed */
    79cc:	81 e0       	ldi	r24, 0x01	; 1
    79ce:	8d bd       	out	0x2d, r24	; 45
    79d0:	08 95       	ret

000079d2 <nrf24_ce_digitalWrite>:
	return data;
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state){
    79d2:	88 23       	and	r24, r24
    79d4:	31 f0       	breq	.+12     	; 0x79e2 <nrf24_ce_digitalWrite+0x10>
		set_bit(NRF24_PORT,NRF24_CE);
    79d6:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    79d8:	85 e3       	ldi	r24, 0x35	; 53
    79da:	8a 95       	dec	r24
    79dc:	f1 f7       	brne	.-4      	; 0x79da <nrf24_ce_digitalWrite+0x8>
    79de:	00 00       	nop
    79e0:	08 95       	ret
    79e2:	8f e1       	ldi	r24, 0x1F	; 31
    79e4:	93 e0       	ldi	r25, 0x03	; 3
    79e6:	01 97       	sbiw	r24, 0x01	; 1
    79e8:	f1 f7       	brne	.-4      	; 0x79e6 <nrf24_ce_digitalWrite+0x14>
    79ea:	00 c0       	rjmp	.+0      	; 0x79ec <nrf24_ce_digitalWrite+0x1a>
    79ec:	00 00       	nop
		_delay_us(10); /* Minimum CE High period for stuff to work */
	}
	else{
		_delay_us(200); /* Minimum CE interval from last edge */
		clr_bit(NRF24_PORT,NRF24_CE);
    79ee:	28 98       	cbi	0x05, 0	; 5
    79f0:	08 95       	ret

000079f2 <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
    79f2:	88 23       	and	r24, r24
    79f4:	11 f0       	breq	.+4      	; 0x79fa <nrf24_csn_digitalWrite+0x8>
		set_bit(NRF24_PORT, NRF24_CS);
    79f6:	2a 9a       	sbi	0x05, 2	; 5
    79f8:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
    79fa:	2a 98       	cbi	0x05, 2	; 5
    79fc:	08 95       	ret

000079fe <nrf24_rx_address>:
	return NRF24_CHIP_NOMINAL;
}

/* Set the RX address */
void nrf24_rx_address(uint8_t adr[])
{
    79fe:	0f 93       	push	r16
    7a00:	1f 93       	push	r17
    7a02:	cf 93       	push	r28
    7a04:	df 93       	push	r29
    7a06:	ec 01       	movw	r28, r24
	nrf24_csn_digitalWrite(LOW);
    7a08:	80 e0       	ldi	r24, 0x00	; 0
    7a0a:	f3 df       	rcall	.-26     	; 0x79f2 <nrf24_csn_digitalWrite>
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
    7a0c:	8b e2       	ldi	r24, 0x2B	; 43
    7a0e:	d2 df       	rcall	.-92     	; 0x79b4 <spi_exchange>
    7a10:	8e 01       	movw	r16, r28
    7a12:	0d 5f       	subi	r16, 0xFD	; 253
    7a14:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7a16:	89 91       	ld	r24, Y+
    7a18:	cd df       	rcall	.-102    	; 0x79b4 <spi_exchange>
/* Set the RX address */
void nrf24_rx_address(uint8_t adr[])
{
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
    7a1a:	c0 17       	cp	r28, r16
    7a1c:	d1 07       	cpc	r29, r17
    7a1e:	d9 f7       	brne	.-10     	; 0x7a16 <nrf24_rx_address+0x18>
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7a20:	81 e0       	ldi	r24, 0x01	; 1
}
    7a22:	df 91       	pop	r29
    7a24:	cf 91       	pop	r28
    7a26:	1f 91       	pop	r17
    7a28:	0f 91       	pop	r16
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7a2a:	e3 cf       	rjmp	.-58     	; 0x79f2 <nrf24_csn_digitalWrite>

00007a2c <nrf24_tx_address>:
}

/* Set the TX address */
void nrf24_tx_address(uint8_t adr[])
{
    7a2c:	ef 92       	push	r14
    7a2e:	ff 92       	push	r15
    7a30:	0f 93       	push	r16
    7a32:	1f 93       	push	r17
    7a34:	cf 93       	push	r28
    7a36:	df 93       	push	r29
	nrf24_ce_digitalWrite(LOW);
    7a38:	ec 01       	movw	r28, r24
    7a3a:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Flush required if we need to change address on the fly */
	/* Flush TX FIFO */
	nrf24_csn_digitalWrite(LOW);
    7a3c:	ca df       	rcall	.-108    	; 0x79d2 <nrf24_ce_digitalWrite>
    7a3e:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(FLUSH_TX);
    7a40:	d8 df       	rcall	.-80     	; 0x79f2 <nrf24_csn_digitalWrite>
    7a42:	81 ee       	ldi	r24, 0xE1	; 225
	nrf24_csn_digitalWrite(HIGH);
    7a44:	b7 df       	rcall	.-146    	; 0x79b4 <spi_exchange>
    7a46:	81 e0       	ldi	r24, 0x01	; 1
	
	nrf24_csn_digitalWrite(LOW);
    7a48:	d4 df       	rcall	.-88     	; 0x79f2 <nrf24_csn_digitalWrite>
    7a4a:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(TX_ADDR | W_REGISTER);
    7a4c:	d2 df       	rcall	.-92     	; 0x79f2 <nrf24_csn_digitalWrite>
    7a4e:	80 e3       	ldi	r24, 0x30	; 48
    7a50:	b1 df       	rcall	.-158    	; 0x79b4 <spi_exchange>
    7a52:	7e 01       	movw	r14, r28
    7a54:	83 e0       	ldi	r24, 0x03	; 3
    7a56:	e8 0e       	add	r14, r24
    7a58:	f1 1c       	adc	r15, r1
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7a5a:	8e 01       	movw	r16, r28
    7a5c:	f8 01       	movw	r30, r16
    7a5e:	81 91       	ld	r24, Z+
    7a60:	8f 01       	movw	r16, r30
    7a62:	a8 df       	rcall	.-176    	; 0x79b4 <spi_exchange>
	spi_exchange(FLUSH_TX);
	nrf24_csn_digitalWrite(HIGH);
	
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(TX_ADDR | W_REGISTER);
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
    7a64:	0e 15       	cp	r16, r14
    7a66:	1f 05       	cpc	r17, r15
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7a68:	c9 f7       	brne	.-14     	; 0x7a5c <nrf24_tx_address+0x30>
    7a6a:	81 e0       	ldi	r24, 0x01	; 1
    7a6c:	c2 df       	rcall	.-124    	; 0x79f2 <nrf24_csn_digitalWrite>
    7a6e:	f5 e3       	ldi	r31, 0x35	; 53
    7a70:	fa 95       	dec	r31
    7a72:	f1 f7       	brne	.-4      	; 0x7a70 <nrf24_tx_address+0x44>
    In terms of the delay functions, the CPU frequency can be given as
    a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
    However, the macros in <util/setbaud.h> require it to be an
    integer value.
 */
# define F_CPU 1000000UL
    7a74:	00 00       	nop
    7a76:	80 e0       	ldi	r24, 0x00	; 0
#endif
    7a78:	bc df       	rcall	.-136    	; 0x79f2 <nrf24_csn_digitalWrite>
    7a7a:	8a e2       	ldi	r24, 0x2A	; 42

#ifndef __OPTIMIZE__
# warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
    7a7c:	9b df       	rcall	.-202    	; 0x79b4 <spi_exchange>
    7a7e:	89 91       	ld	r24, Y+
    7a80:	99 df       	rcall	.-206    	; 0x79b4 <spi_exchange>
    However, the macros in <util/setbaud.h> require it to be an
    integer value.
 */
# define F_CPU 1000000UL
#endif

    7a82:	ec 16       	cp	r14, r28
    7a84:	fd 06       	cpc	r15, r29
    7a86:	d9 f7       	brne	.-10     	; 0x7a7e <nrf24_tx_address+0x52>
#ifndef __OPTIMIZE__
# warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
#endif

    7a88:	81 e0       	ldi	r24, 0x01	; 1
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
    7a8a:	df 91       	pop	r29
    7a8c:	cf 91       	pop	r28
    7a8e:	1f 91       	pop	r17
    7a90:	0f 91       	pop	r16
    7a92:	ff 90       	pop	r15
#endif

#ifndef __OPTIMIZE__
# warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
#endif

    7a94:	ef 90       	pop	r14
    7a96:	ad cf       	rjmp	.-166    	; 0x79f2 <nrf24_csn_digitalWrite>

00007a98 <nrf24_getStatus>:
	}
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
    7a98:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
    7a9a:	80 e0       	ldi	r24, 0x00	; 0
    7a9c:	aa df       	rcall	.-172    	; 0x79f2 <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
    7a9e:	8f ef       	ldi	r24, 0xFF	; 255
    7aa0:	89 df       	rcall	.-238    	; 0x79b4 <spi_exchange>
    7aa2:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
    7aa4:	81 e0       	ldi	r24, 0x01	; 1
    7aa6:	a5 df       	rcall	.-182    	; 0x79f2 <nrf24_csn_digitalWrite>
    7aa8:	8c 2f       	mov	r24, r28
	return rv;
}
    7aaa:	cf 91       	pop	r28
    7aac:	08 95       	ret

00007aae <nrf24_payloadLength>:
/* Returns the length of data waiting in the RX FIFO */
uint8_t nrf24_payloadLength()
{
	uint8_t payload_len;
	
	nrf24_csn_digitalWrite(LOW);
    7aae:	cf 93       	push	r28
    7ab0:	80 e0       	ldi	r24, 0x00	; 0
    7ab2:	9f df       	rcall	.-194    	; 0x79f2 <nrf24_csn_digitalWrite>
	spi_exchange(R_RX_PL_WID);
    7ab4:	80 e6       	ldi	r24, 0x60	; 96
    7ab6:	7e df       	rcall	.-260    	; 0x79b4 <spi_exchange>
    7ab8:	80 e0       	ldi	r24, 0x00	; 0
	payload_len=spi_exchange(0);
    7aba:	7c df       	rcall	.-264    	; 0x79b4 <spi_exchange>
    7abc:	c8 2f       	mov	r28, r24
    7abe:	81 e0       	ldi	r24, 0x01	; 1
    7ac0:	98 df       	rcall	.-208    	; 0x79f2 <nrf24_csn_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
    7ac2:	8f ef       	ldi	r24, 0xFF	; 255
    7ac4:	8c 0f       	add	r24, r28
	
	/* If payload is larger than 32 or equal to 0, an error has 
	 * occurred in transmission and payload must be discarded */
	if( (payload_len == 0) | (payload_len > NRF24_MAX_PAYLOAD)){
    7ac6:	80 32       	cpi	r24, 0x20	; 32
    7ac8:	38 f0       	brcs	.+14     	; 0x7ad8 <nrf24_payloadLength+0x2a>
    7aca:	80 e0       	ldi	r24, 0x00	; 0
		/* Flush RX FIFO */
		nrf24_csn_digitalWrite(LOW);
    7acc:	92 df       	rcall	.-220    	; 0x79f2 <nrf24_csn_digitalWrite>
    7ace:	82 ee       	ldi	r24, 0xE2	; 226
		spi_exchange(FLUSH_RX);
    7ad0:	71 df       	rcall	.-286    	; 0x79b4 <spi_exchange>
    7ad2:	81 e0       	ldi	r24, 0x01	; 1
    7ad4:	8e df       	rcall	.-228    	; 0x79f2 <nrf24_csn_digitalWrite>
		nrf24_csn_digitalWrite(HIGH);
    7ad6:	c0 e0       	ldi	r28, 0x00	; 0
    7ad8:	8c 2f       	mov	r24, r28
		payload_len = 0;
    7ada:	cf 91       	pop	r28
	}
	return payload_len;
}
    7adc:	08 95       	ret

00007ade <nrf24_configRegister>:
	}
}

/* Write a single byte to register */
void nrf24_configRegister(uint8_t reg, uint8_t data)
{
    7ade:	cf 93       	push	r28
    7ae0:	df 93       	push	r29
    7ae2:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(LOW);
    7ae4:	d6 2f       	mov	r29, r22
    7ae6:	80 e0       	ldi	r24, 0x00	; 0
    7ae8:	84 df       	rcall	.-248    	; 0x79f2 <nrf24_csn_digitalWrite>
	spi_exchange(W_REGISTER | (REGISTER_MASK & reg));
    7aea:	8c 2f       	mov	r24, r28
    7aec:	8f 71       	andi	r24, 0x1F	; 31
    7aee:	80 62       	ori	r24, 0x20	; 32
    7af0:	61 df       	rcall	.-318    	; 0x79b4 <spi_exchange>
	spi_exchange(data);
    7af2:	8d 2f       	mov	r24, r29
    7af4:	5f df       	rcall	.-322    	; 0x79b4 <spi_exchange>
    7af6:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7af8:	df 91       	pop	r29
}
    7afa:	cf 91       	pop	r28
    7afc:	7a cf       	rjmp	.-268    	; 0x79f2 <nrf24_csn_digitalWrite>

00007afe <nrf24_resetStatus>:
	return rv;
}

/* Resets status register */
void nrf24_resetStatus(){
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
    7afe:	60 e7       	ldi	r22, 0x70	; 112
    7b00:	87 e0       	ldi	r24, 0x07	; 7
    7b02:	ed cf       	rjmp	.-38     	; 0x7ade <nrf24_configRegister>

00007b04 <nrf24_setMode_RX>:
}

/* Set chip as receiver */
void nrf24_setMode_RX()
{
	if(rf24_mode != MODE_RX){
    7b04:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rf24_mode>
    7b08:	88 23       	and	r24, r24
    7b0a:	81 f0       	breq	.+32     	; 0x7b2c <nrf24_setMode_RX+0x28>
		/* Config RF24 as receiver */
		nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
    7b0c:	6f e7       	ldi	r22, 0x7F	; 127
    7b0e:	80 e0       	ldi	r24, 0x00	; 0
	
		/* Enable receiver address on Pipe 1. Pipe 0 is for transmitting ACKs */
		nrf24_configRegister(EN_RXADDR,(0<<ERX_P0)|(1<<ERX_P1));
    7b10:	e6 df       	rcall	.-52     	; 0x7ade <nrf24_configRegister>
    7b12:	62 e0       	ldi	r22, 0x02	; 2
    7b14:	82 e0       	ldi	r24, 0x02	; 2
    7b16:	e3 df       	rcall	.-58     	; 0x7ade <nrf24_configRegister>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7b18:	8f e8       	ldi	r24, 0x8F	; 143
    7b1a:	91 e0       	ldi	r25, 0x01	; 1
    7b1c:	01 97       	sbiw	r24, 0x01	; 1
    7b1e:	f1 f7       	brne	.-4      	; 0x7b1c <nrf24_setMode_RX+0x18>
    7b20:	00 c0       	rjmp	.+0      	; 0x7b22 <nrf24_setMode_RX+0x1e>
    7b22:	00 00       	nop
	
		/* Settling time */
		_delay_us(100);
	
		/* Turn on chip */
		nrf24_ce_digitalWrite(HIGH);
    7b24:	81 e0       	ldi	r24, 0x01	; 1
    7b26:	55 df       	rcall	.-342    	; 0x79d2 <nrf24_ce_digitalWrite>
	
		rf24_mode=MODE_RX;
    7b28:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rf24_mode>
    7b2c:	08 95       	ret

00007b2e <nrf24_wait_tx_result>:
	return payload_len;
}

/* Waits until transmission is complete or timeout is reached */
uint8_t nrf24_wait_tx_result()
{
    7b2e:	0f 93       	push	r16
    7b30:	1f 93       	push	r17
    7b32:	cf 93       	push	r28
	uint16_t timeout = 10000; /* ~100ms timeout with 10us delay each assertion */
	uint8_t status = nrf24_getStatus();
    7b34:	b1 df       	rcall	.-158    	; 0x7a98 <nrf24_getStatus>
    7b36:	b0 df       	rcall	.-160    	; 0x7a98 <nrf24_getStatus>
	
	/* Waits while packet is being sent 
	 * TS_DS: Data sent. If auto_ack is on, this is only set when ACK is received.
	 * TX_FULL: Transmission FIFO is full.
	 * MAX_RT: Maximum retries reached. */
	status = nrf24_getStatus();
    7b38:	c8 2f       	mov	r28, r24
    7b3a:	c0 72       	andi	r28, 0x20	; 32
	uint8_t msg_sent = status & (1 << TX_DS);
    7b3c:	00 e1       	ldi	r16, 0x10	; 16
    7b3e:	17 e2       	ldi	r17, 0x27	; 39
	
	while ((!msg_sent || (status & (1 << TX_FULL))) && !(status & (1 << MAX_RT)) && --timeout) {
    7b40:	cc 23       	and	r28, r28
    7b42:	59 f0       	breq	.+22     	; 0x7b5a <nrf24_wait_tx_result+0x2c>
    7b44:	80 fd       	sbrc	r24, 0
    7b46:	09 c0       	rjmp	.+18     	; 0x7b5a <nrf24_wait_tx_result+0x2c>
    7b48:	60 e6       	ldi	r22, 0x60	; 96
    7b4a:	87 e0       	ldi	r24, 0x07	; 7
		msg_sent = status & (1 << TX_DS);
		_delay_us(10);
	} /* Transmission will end here */
	
	/* Reset status register */
	nrf24_configRegister(STATUS,(1<<RX_DR) | (1<<TX_DS));
    7b4c:	c8 df       	rcall	.-112    	; 0x7ade <nrf24_configRegister>
    7b4e:	da df       	rcall	.-76     	; 0x7b04 <nrf24_setMode_RX>
	
	/* Switch back to RX mode */
	nrf24_setMode_RX();
    7b50:	81 e0       	ldi	r24, 0x01	; 1
    7b52:	cc 23       	and	r28, r28
    7b54:	79 f0       	breq	.+30     	; 0x7b74 <nrf24_wait_tx_result+0x46>
    7b56:	80 e0       	ldi	r24, 0x00	; 0
    7b58:	0d c0       	rjmp	.+26     	; 0x7b74 <nrf24_wait_tx_result+0x46>
    7b5a:	84 fd       	sbrc	r24, 4
	 * TX_FULL: Transmission FIFO is full.
	 * MAX_RT: Maximum retries reached. */
	status = nrf24_getStatus();
	uint8_t msg_sent = status & (1 << TX_DS);
	
	while ((!msg_sent || (status & (1 << TX_FULL))) && !(status & (1 << MAX_RT)) && --timeout) {
    7b5c:	f5 cf       	rjmp	.-22     	; 0x7b48 <nrf24_wait_tx_result+0x1a>
    7b5e:	01 50       	subi	r16, 0x01	; 1
    7b60:	11 09       	sbc	r17, r1
    7b62:	91 f3       	breq	.-28     	; 0x7b48 <nrf24_wait_tx_result+0x1a>
		status = nrf24_getStatus();
    7b64:	99 df       	rcall	.-206    	; 0x7a98 <nrf24_getStatus>
    7b66:	c8 2f       	mov	r28, r24
		msg_sent = status & (1 << TX_DS);
    7b68:	c0 72       	andi	r28, 0x20	; 32
    7b6a:	95 e3       	ldi	r25, 0x35	; 53
    7b6c:	9a 95       	dec	r25
    7b6e:	f1 f7       	brne	.-4      	; 0x7b6c <nrf24_wait_tx_result+0x3e>
    7b70:	00 00       	nop
    7b72:	e6 cf       	rjmp	.-52     	; 0x7b40 <nrf24_wait_tx_result+0x12>
	/* Finally check if data was sent or if conditions weren't met */
	if(msg_sent)
		return NRF24_MESSAGE_SENT;
	else
		return NRF24_MESSAGE_LOST;
}
    7b74:	cf 91       	pop	r28
    7b76:	1f 91       	pop	r17
    7b78:	0f 91       	pop	r16
    7b7a:	08 95       	ret

00007b7c <nrf24_getData>:
	nrf24_ce_digitalWrite(HIGH);
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t * data, uint8_t * pkt_len)
{
    7b7c:	cf 92       	push	r12
    7b7e:	df 92       	push	r13
    7b80:	ef 92       	push	r14
    7b82:	ff 92       	push	r15
    7b84:	0f 93       	push	r16
    7b86:	1f 93       	push	r17
    7b88:	cf 93       	push	r28
    7b8a:	7c 01       	movw	r14, r24
	/* Reset Received Data flag bit */
	nrf24_configRegister(STATUS,(1<<RX_DR));
    7b8c:	8b 01       	movw	r16, r22
    7b8e:	60 e4       	ldi	r22, 0x40	; 64
    7b90:	87 e0       	ldi	r24, 0x07	; 7

	/* Number of bytes in the RX FIFO */
	*pkt_len = nrf24_payloadLength();
    7b92:	a5 df       	rcall	.-182    	; 0x7ade <nrf24_configRegister>
    7b94:	8c df       	rcall	.-232    	; 0x7aae <nrf24_payloadLength>
    7b96:	f8 01       	movw	r30, r16
	
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    7b98:	80 83       	st	Z, r24
    7b9a:	80 e0       	ldi	r24, 0x00	; 0

	/* Send cmd to read RX payload */
	spi_exchange(R_RX_PAYLOAD);
    7b9c:	2a df       	rcall	.-428    	; 0x79f2 <nrf24_csn_digitalWrite>
    7b9e:	81 e6       	ldi	r24, 0x61	; 97
	
	/* Read payload */
	for (uint8_t i=0; i<*pkt_len; i++)
    7ba0:	09 df       	rcall	.-494    	; 0x79b4 <spi_exchange>
    7ba2:	c0 e0       	ldi	r28, 0x00	; 0
    7ba4:	f8 01       	movw	r30, r16
    7ba6:	80 81       	ld	r24, Z
	{
		data[i]=spi_exchange(0);
    7ba8:	c8 17       	cp	r28, r24
    7baa:	48 f4       	brcc	.+18     	; 0x7bbe <nrf24_getData+0x42>
    7bac:	67 01       	movw	r12, r14
    7bae:	cc 0e       	add	r12, r28
    7bb0:	d1 1c       	adc	r13, r1
    7bb2:	80 e0       	ldi	r24, 0x00	; 0
    7bb4:	ff de       	rcall	.-514    	; 0x79b4 <spi_exchange>
    7bb6:	f6 01       	movw	r30, r12

	/* Send cmd to read RX payload */
	spi_exchange(R_RX_PAYLOAD);
	
	/* Read payload */
	for (uint8_t i=0; i<*pkt_len; i++)
    7bb8:	80 83       	st	Z, r24
    7bba:	cf 5f       	subi	r28, 0xFF	; 255
	{
		data[i]=spi_exchange(0);
	}
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7bbc:	f3 cf       	rjmp	.-26     	; 0x7ba4 <nrf24_getData+0x28>
}
    7bbe:	81 e0       	ldi	r24, 0x01	; 1
    7bc0:	cf 91       	pop	r28
    7bc2:	1f 91       	pop	r17
    7bc4:	0f 91       	pop	r16
    7bc6:	ff 90       	pop	r15
	{
		data[i]=spi_exchange(0);
	}
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7bc8:	ef 90       	pop	r14
    7bca:	df 90       	pop	r13
    7bcc:	cf 90       	pop	r12
    7bce:	11 cf       	rjmp	.-478    	; 0x79f2 <nrf24_csn_digitalWrite>

00007bd0 <nrf24_setMode_TX>:
}

/* Set chip as transmitter */
void nrf24_setMode_TX()
{
	if(rf24_mode != MODE_TX){
    7bd0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rf24_mode>
    7bd4:	81 30       	cpi	r24, 0x01	; 1
		/* Turn on chip in TX mode*/
		nrf24_configRegister(CONFIG, nrf24_CONFIG | (1<<PWR_UP) | (0<<PRIM_RX) );
    7bd6:	a9 f0       	breq	.+42     	; 0x7c02 <nrf24_setMode_TX+0x32>
    7bd8:	6e e7       	ldi	r22, 0x7E	; 126
    7bda:	80 e0       	ldi	r24, 0x00	; 0
	
		/* Enable receiver address on pipe 0 for ACKs*/
		nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(0<<ERX_P1));
    7bdc:	80 df       	rcall	.-256    	; 0x7ade <nrf24_configRegister>
    7bde:	61 e0       	ldi	r22, 0x01	; 1
    7be0:	82 e0       	ldi	r24, 0x02	; 2
    7be2:	7d df       	rcall	.-262    	; 0x7ade <nrf24_configRegister>
	
		/* Flush TX FIFO */
		nrf24_csn_digitalWrite(LOW);
    7be4:	80 e0       	ldi	r24, 0x00	; 0
    7be6:	05 df       	rcall	.-502    	; 0x79f2 <nrf24_csn_digitalWrite>
		spi_exchange(FLUSH_TX);
    7be8:	81 ee       	ldi	r24, 0xE1	; 225
    7bea:	e4 de       	rcall	.-568    	; 0x79b4 <spi_exchange>
    7bec:	81 e0       	ldi	r24, 0x01	; 1
		nrf24_csn_digitalWrite(HIGH);
    7bee:	01 df       	rcall	.-510    	; 0x79f2 <nrf24_csn_digitalWrite>
    7bf0:	8f e8       	ldi	r24, 0x8F	; 143
    7bf2:	91 e0       	ldi	r25, 0x01	; 1
    7bf4:	01 97       	sbiw	r24, 0x01	; 1
    7bf6:	f1 f7       	brne	.-4      	; 0x7bf4 <nrf24_setMode_TX+0x24>
    7bf8:	00 c0       	rjmp	.+0      	; 0x7bfa <nrf24_setMode_TX+0x2a>

#endif /* _UTIL_DELAY_H_ */
    7bfa:	00 00       	nop
    7bfc:	81 e0       	ldi	r24, 0x01	; 1
    7bfe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rf24_mode>
    7c02:	08 95       	ret

00007c04 <nrf24_sendData>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Sends a packet of data with dynamic length */
void nrf24_sendData(uint8_t* data, uint8_t pkt_len)
{
    7c04:	0f 93       	push	r16
    7c06:	1f 93       	push	r17
    7c08:	cf 93       	push	r28
    7c0a:	df 93       	push	r29
	/* Go to Standby first */
	nrf24_ce_digitalWrite(LOW);
    7c0c:	ec 01       	movw	r28, r24
    7c0e:	16 2f       	mov	r17, r22
    7c10:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Set to transmitter mode */
	nrf24_setMode_TX();
    7c12:	df de       	rcall	.-578    	; 0x79d2 <nrf24_ce_digitalWrite>
    7c14:	dd df       	rcall	.-70     	; 0x7bd0 <nrf24_setMode_TX>

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    7c16:	80 e0       	ldi	r24, 0x00	; 0
    7c18:	ec de       	rcall	.-552    	; 0x79f2 <nrf24_csn_digitalWrite>
    7c1a:	80 ea       	ldi	r24, 0xA0	; 160

	/* Write cmd to write payload */
	spi_exchange(W_TX_PAYLOAD);
    7c1c:	cb de       	rcall	.-618    	; 0x79b4 <spi_exchange>
    7c1e:	ce 01       	movw	r24, r28
    7c20:	81 0f       	add	r24, r17
    7c22:	91 1d       	adc	r25, r1
    7c24:	8c 01       	movw	r16, r24
    7c26:	c0 17       	cp	r28, r16
	
	/* Write payload */
	for (uint8_t i=0; i<pkt_len; i++)
    7c28:	d1 07       	cpc	r29, r17
    7c2a:	19 f0       	breq	.+6      	; 0x7c32 <nrf24_sendData+0x2e>
	{
		spi_exchange(data[i]);
    7c2c:	89 91       	ld	r24, Y+
    7c2e:	c2 de       	rcall	.-636    	; 0x79b4 <spi_exchange>
    7c30:	fa cf       	rjmp	.-12     	; 0x7c26 <nrf24_sendData+0x22>
    7c32:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7c34:	de de       	rcall	.-580    	; 0x79f2 <nrf24_csn_digitalWrite>
    7c36:	81 e0       	ldi	r24, 0x01	; 1
    7c38:	df 91       	pop	r29

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
    7c3a:	cf 91       	pop	r28
    7c3c:	1f 91       	pop	r17
    7c3e:	0f 91       	pop	r16
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
    7c40:	c8 ce       	rjmp	.-624    	; 0x79d2 <nrf24_ce_digitalWrite>

00007c42 <nrf24_readRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Read byte from nrf24 register */
uint8_t nrf24_readRegister(uint8_t reg)
{
    7c42:	cf 93       	push	r28
	uint8_t data;
	nrf24_csn_digitalWrite(LOW);
    7c44:	c8 2f       	mov	r28, r24
    7c46:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(R_REGISTER | (REGISTER_MASK & reg));
    7c48:	d4 de       	rcall	.-600    	; 0x79f2 <nrf24_csn_digitalWrite>
    7c4a:	8c 2f       	mov	r24, r28
    7c4c:	8f 71       	andi	r24, 0x1F	; 31
	data=spi_exchange(0);
    7c4e:	b2 de       	rcall	.-668    	; 0x79b4 <spi_exchange>
    7c50:	80 e0       	ldi	r24, 0x00	; 0
    7c52:	b0 de       	rcall	.-672    	; 0x79b4 <spi_exchange>
	nrf24_csn_digitalWrite(HIGH);
    7c54:	c8 2f       	mov	r28, r24
    7c56:	81 e0       	ldi	r24, 0x01	; 1
    7c58:	cc de       	rcall	.-616    	; 0x79f2 <nrf24_csn_digitalWrite>
	return data;
}
    7c5a:	8c 2f       	mov	r24, r28
    7c5c:	cf 91       	pop	r28
    7c5e:	08 95       	ret

00007c60 <nrf24_rxFifoEmpty>:
}

/* Checks if RX FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
	uint8_t fifoStatus=nrf24_readRegister(FIFO_STATUS);
    7c60:	87 e1       	ldi	r24, 0x17	; 23
    7c62:	ef df       	rcall	.-34     	; 0x7c42 <nrf24_readRegister>
    7c64:	80 95       	com	r24
		return NRF24_DATA_UNAVAILABLE;
	}
	else{
		return NRF24_DATA_AVAILABLE;
	}
}
    7c66:	81 70       	andi	r24, 0x01	; 1
    7c68:	08 95       	ret

00007c6a <nrf24_dataReady>:
}

/* Checks if data was received or if there is data in the FIFO */
uint8_t nrf24_dataReady()
{
	uint8_t status = nrf24_getStatus();
    7c6a:	16 df       	rcall	.-468    	; 0x7a98 <nrf24_getStatus>
    7c6c:	86 ff       	sbrs	r24, 6
	/* Check if Data Ready flag is set.*/
	/* RX_DR just means data has arrived in the FIFO,
	 * but we still need to verify if there is already
	 * data in the FIFO in the occasions where RX_DR
	 * isn't set. */
	if ( status & (1 << RX_DR) ) {
    7c6e:	f8 cf       	rjmp	.-16     	; 0x7c60 <nrf24_rxFifoEmpty>
		return NRF24_DATA_AVAILABLE;
	}
	return nrf24_rxFifoEmpty();
    7c70:	81 e0       	ldi	r24, 0x01	; 1
    7c72:	08 95       	ret

00007c74 <nrf24_config>:
/* Current mode of operation of the rf24 chip */
static volatile uint8_t rf24_mode = MODE_IDLE;

/* Setup the module */
uint8_t nrf24_config(uint8_t *TX_addr, uint8_t *RX_addr)
{
    7c74:	0f 93       	push	r16
    7c76:	1f 93       	push	r17
    7c78:	cf 93       	push	r28
    7c7a:	df 93       	push	r29
    7c7c:	8c 01       	movw	r16, r24
    7c7e:	eb 01       	movw	r28, r22
	/* Set pins as output  */
	NRF24_DDR |= (_BV(NRF24_CE) | _BV(NRF24_CS));
    7c80:	84 b1       	in	r24, 0x04	; 4
    7c82:	85 60       	ori	r24, 0x05	; 5
    7c84:	84 b9       	out	0x04, r24	; 4
	
	/* Initialize pins */
	nrf24_ce_digitalWrite(LOW);
    7c86:	80 e0       	ldi	r24, 0x00	; 0
    7c88:	a4 de       	rcall	.-696    	; 0x79d2 <nrf24_ce_digitalWrite>
    7c8a:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7c8c:	b2 de       	rcall	.-668    	; 0x79f2 <nrf24_csn_digitalWrite>
    7c8e:	8f e1       	ldi	r24, 0x1F	; 31
    7c90:	9e e4       	ldi	r25, 0x4E	; 78
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7c92:	01 97       	sbiw	r24, 0x01	; 1
    7c94:	f1 f7       	brne	.-4      	; 0x7c92 <nrf24_config+0x1e>
    7c96:	00 c0       	rjmp	.+0      	; 0x7c98 <nrf24_config+0x24>
    7c98:	00 00       	nop
	
	_delay_ms(5); /* Some startup settling time */
	
	/* Address width */
	nrf24_configRegister(SETUP_AW, (NRF24_ADDR_WIDTH-2) << AW); 
    7c9a:	61 e0       	ldi	r22, 0x01	; 1
    7c9c:	83 e0       	ldi	r24, 0x03	; 3
    7c9e:	1f df       	rcall	.-450    	; 0x7ade <nrf24_configRegister>
    7ca0:	83 e0       	ldi	r24, 0x03	; 3
	
	/* Check the register we just configured */
	uint8_t regval = nrf24_readRegister(SETUP_AW);
    7ca2:	cf df       	rcall	.-98     	; 0x7c42 <nrf24_readRegister>
    7ca4:	81 30       	cpi	r24, 0x01	; 1
    7ca6:	e1 f4       	brne	.+56     	; 0x7ce0 <nrf24_config+0x6c>
	if (regval != (NRF24_ADDR_WIDTH-2) << AW)  /* There may be no nRF24 connected */
    7ca8:	c8 01       	movw	r24, r16
    7caa:	c0 de       	rcall	.-640    	; 0x7a2c <nrf24_tx_address>
		return NRF24_CHIP_DISCONNECTED;

	/* Config addresses */
	nrf24_tx_address(TX_addr);
    7cac:	ce 01       	movw	r24, r28
    7cae:	a7 de       	rcall	.-690    	; 0x79fe <nrf24_rx_address>
    7cb0:	62 e0       	ldi	r22, 0x02	; 2
	nrf24_rx_address(RX_addr);
    7cb2:	85 e0       	ldi	r24, 0x05	; 5
    7cb4:	14 df       	rcall	.-472    	; 0x7ade <nrf24_configRegister>
    7cb6:	63 e0       	ldi	r22, 0x03	; 3
	
	// Set RF channel
	nrf24_configRegister(RF_CH, NRF24_CHANNEL);
    7cb8:	8c e1       	ldi	r24, 0x1C	; 28
    7cba:	11 df       	rcall	.-478    	; 0x7ade <nrf24_configRegister>
    7cbc:	64 e0       	ldi	r22, 0x04	; 4
    7cbe:	8d e1       	ldi	r24, 0x1D	; 29

	/* Dynamic payload length for TX & RX (pipes 0 and 1) */
	nrf24_configRegister(DYNPD,(1<<DPL_P0)|(1<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    7cc0:	0e df       	rcall	.-484    	; 0x7ade <nrf24_configRegister>
    7cc2:	66 e0       	ldi	r22, 0x06	; 6
    7cc4:	86 e0       	ldi	r24, 0x06	; 6
    7cc6:	0b df       	rcall	.-490    	; 0x7ade <nrf24_configRegister>
	
	/* Enable dynamic payload feature */
	nrf24_configRegister(FEATURE, 1 << EN_DPL);
    7cc8:	63 e0       	ldi	r22, 0x03	; 3
    7cca:	81 e0       	ldi	r24, 0x01	; 1
    7ccc:	08 df       	rcall	.-496    	; 0x7ade <nrf24_configRegister>
    7cce:	6f e7       	ldi	r22, 0x7F	; 127
	
	/* Speed: 250kbps, TX gain: 0dbm */
	nrf24_configRegister(RF_SETUP, (1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH) | (0 << RF_DR_LOW) | (0 << RF_DR_HIGH));
    7cd0:	84 e0       	ldi	r24, 0x04	; 4
    7cd2:	05 df       	rcall	.-502    	; 0x7ade <nrf24_configRegister>
    7cd4:	60 e7       	ldi	r22, 0x70	; 112
    7cd6:	87 e0       	ldi	r24, 0x07	; 7

	/* Enable ACKing on pipes 0 & 1 */
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    7cd8:	02 df       	rcall	.-508    	; 0x7ade <nrf24_configRegister>
    7cda:	14 df       	rcall	.-472    	; 0x7b04 <nrf24_setMode_RX>
    7cdc:	80 e0       	ldi	r24, 0x00	; 0
    7cde:	01 c0       	rjmp	.+2      	; 0x7ce2 <nrf24_config+0x6e>

	/* Auto retransmit delay: 2000 us and Up to 15 retransmissions */
	nrf24_configRegister(SETUP_RETR,(0x07<<ARD)|(0x0F<<ARC));
    7ce0:	81 e0       	ldi	r24, 0x01	; 1
    7ce2:	df 91       	pop	r29
    7ce4:	cf 91       	pop	r28
    7ce6:	1f 91       	pop	r17
	
	/* Reset status bits */
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
    7ce8:	0f 91       	pop	r16
    7cea:	08 95       	ret

00007cec <putch>:
void putch(char ch) {

	static uint8_t tx_pkt_len = 0; /* Number of bytes in the local buffer */
	static uint8_t tx_pkt_buf[32]; /* Local buffer to store bytes before sending */

	if (radio_mode == RADIO_ON) {
    7cec:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <radio_mode>
    7cf0:	91 30       	cpi	r25, 0x01	; 1
    7cf2:	59 f5       	brne	.+86     	; 0x7d4a <putch+0x5e>

		tx_pkt_buf[tx_pkt_len++] = ch; /* Fills the local buffer */
    7cf4:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <tx_pkt_len.2124>
    7cf8:	9e 0f       	add	r25, r30
    7cfa:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <tx_pkt_len.2124>
    7cfe:	f0 e0       	ldi	r31, 0x00	; 0
    7d00:	ec 5d       	subi	r30, 0xDC	; 220
    7d02:	fe 4f       	sbci	r31, 0xFE	; 254

		if (ch == STK_OK || tx_pkt_len == NRF24_MAX_PAYLOAD - 1) { /* When last message or buffer full */
    7d04:	80 83       	st	Z, r24
    7d06:	80 31       	cpi	r24, 0x10	; 16
    7d08:	11 f0       	breq	.+4      	; 0x7d0e <putch+0x22>
			while (1) { /* Send buffer until received */

				nrf24_sendData(tx_pkt_buf, tx_pkt_len);
    7d0a:	9f 31       	cpi	r25, 0x1F	; 31
    7d0c:	21 f5       	brne	.+72     	; 0x7d56 <putch+0x6a>
    7d0e:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <tx_pkt_len.2124>
    7d12:	84 e2       	ldi	r24, 0x24	; 36
    7d14:	91 e0       	ldi	r25, 0x01	; 1
				if (nrf24_wait_tx_result() == NRF24_MESSAGE_SENT)
    7d16:	76 df       	rcall	.-276    	; 0x7c04 <nrf24_sendData>
    7d18:	0a df       	rcall	.-492    	; 0x7b2e <nrf24_wait_tx_result>
    7d1a:	88 23       	and	r24, r24
    7d1c:	69 f0       	breq	.+26     	; 0x7d38 <putch+0x4c>
    7d1e:	81 e4       	ldi	r24, 0x41	; 65
    7d20:	9f e1       	ldi	r25, 0x1F	; 31
    7d22:	01 97       	sbiw	r24, 0x01	; 1
	   "ijmp\n"
	);
}

static void delay8(uint16_t count) {
	while (count --)
    7d24:	a1 f3       	breq	.-24     	; 0x7d0e <putch+0x22>
	...
		__asm__ __volatile__ (
    7d32:	00 00       	nop
    7d34:	a8 95       	wdr
    7d36:	f5 cf       	rjmp	.-22     	; 0x7d22 <putch+0x36>
				/* Wait 4ms to allow the remote end to switch to Rx mode */
				my_delay(4);
			}

			/* Reset the local buffer */
			tx_pkt_len = 1; /* Only the identifier is stored */
    7d38:	81 e0       	ldi	r24, 0x01	; 1
    7d3a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <tx_pkt_len.2124>
			tx_pkt_buf[0] ++; /* Packet Identifier */
    7d3e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <tx_pkt_buf.2125>
    7d42:	8f 5f       	subi	r24, 0xFF	; 255
    7d44:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <tx_pkt_buf.2125>
    7d48:	08 95       	ret
		}
	}
	else {
		while (!(UCSR0A & _BV(UDRE0)));
    7d4a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7d4e:	95 ff       	sbrs	r25, 5
    7d50:	fc cf       	rjmp	.-8      	; 0x7d4a <putch+0x5e>
		UDR0 = ch;
    7d52:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7d56:	08 95       	ret

00007d58 <getch>:
	}
}

uint8_t getch(void) {
    7d58:	cf 93       	push	r28
	static uint8_t rx_pkt_len = 0; /* Number of bytes in the local buffer */
	static uint8_t rx_pkt_ptr = 1; /* Start of data in the buffer */
	static uint8_t rx_pkt_buf[32]; /* Local buffer to store bytes before sending */

	while (1) {
		if ((UCSR0A & _BV(RXC0)) && !(UCSR0A & FE0) && !(UCSR0A & UPE0)) {
    7d5a:	c1 e0       	ldi	r28, 0x01	; 1
    7d5c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7d60:	87 ff       	sbrs	r24, 7
    7d62:	0c c0       	rjmp	.+24     	; 0x7d7c <getch+0x24>
    7d64:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7d68:	82 fd       	sbrc	r24, 2
    7d6a:	08 c0       	rjmp	.+16     	; 0x7d7c <getch+0x24>
    7d6c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
			watchdogReset();
			ch = UDR0;
    7d70:	81 fd       	sbrc	r24, 1
    7d72:	04 c0       	rjmp	.+8      	; 0x7d7c <getch+0x24>
			break;
    7d74:	a8 95       	wdr
		}

		/* If there is data in the local buffer or new data in RF24 fifo */
		if (rx_pkt_len || nrf24_dataReady() == NRF24_DATA_AVAILABLE) {
    7d76:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7d7a:	36 c0       	rjmp	.+108    	; 0x7de8 <getch+0x90>
    7d7c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rx_pkt_len.2136>
			watchdogReset();
			radio_mode = RADIO_ON; /* From now on, we're in radio mode */
    7d80:	88 23       	and	r24, r24
    7d82:	41 f0       	breq	.+16     	; 0x7d94 <getch+0x3c>

			/* If our local buffer is empty, get more data */
			if (rx_pkt_len == 0) {
    7d84:	a8 95       	wdr
    7d86:	c0 93 45 01 	sts	0x0145, r28	; 0x800145 <radio_mode>
    7d8a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rx_pkt_len.2136>
			ch = UDR0;
			break;
		}

		/* If there is data in the local buffer or new data in RF24 fifo */
		if (rx_pkt_len || nrf24_dataReady() == NRF24_DATA_AVAILABLE) {
    7d8e:	81 11       	cpse	r24, r1
    7d90:	15 c0       	rjmp	.+42     	; 0x7dbc <getch+0x64>
    7d92:	04 c0       	rjmp	.+8      	; 0x7d9c <getch+0x44>
    7d94:	6a df       	rcall	.-300    	; 0x7c6a <nrf24_dataReady>
    7d96:	81 30       	cpi	r24, 0x01	; 1
			radio_mode = RADIO_ON; /* From now on, we're in radio mode */

			/* If our local buffer is empty, get more data */
			if (rx_pkt_len == 0) {

				nrf24_getData(rx_pkt_buf, &rx_pkt_len);
    7d98:	09 f7       	brne	.-62     	; 0x7d5c <getch+0x4>
    7d9a:	f4 cf       	rjmp	.-24     	; 0x7d84 <getch+0x2c>
    7d9c:	63 e2       	ldi	r22, 0x23	; 35
    7d9e:	71 e0       	ldi	r23, 0x01	; 1
    7da0:	83 e0       	ldi	r24, 0x03	; 3
    7da2:	91 e0       	ldi	r25, 0x01	; 1

				if (rx_pkt_buf[0] == pkt_id) { /* We have already received this packet before */
    7da4:	eb de       	rcall	.-554    	; 0x7b7c <nrf24_getData>
    7da6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rx_pkt_buf.2138>
    7daa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
    7dae:	89 13       	cpse	r24, r25
					rx_pkt_len = 0;
    7db0:	03 c0       	rjmp	.+6      	; 0x7db8 <getch+0x60>
    7db2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <rx_pkt_len.2136>
				}
				else
				{
					pkt_id = rx_pkt_buf[0]; /* It's a new packet, update the current ID */
    7db6:	02 c0       	rjmp	.+4      	; 0x7dbc <getch+0x64>
    7db8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				}
			}

			/* If there is data in the local buffer */
			if (rx_pkt_len)
    7dbc:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <rx_pkt_len.2136>
    7dc0:	99 23       	and	r25, r25
			{
				ch = rx_pkt_buf[rx_pkt_ptr]; /* Grab next byte in the buffer */
    7dc2:	61 f2       	breq	.-104    	; 0x7d5c <getch+0x4>
    7dc4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    7dc8:	e2 2f       	mov	r30, r18
    7dca:	f0 e0       	ldi	r31, 0x00	; 0
    7dcc:	ed 5f       	subi	r30, 0xFD	; 253
    7dce:	fe 4f       	sbci	r31, 0xFE	; 254
				rx_pkt_ptr++;
    7dd0:	80 81       	ld	r24, Z
    7dd2:	2f 5f       	subi	r18, 0xFF	; 255
    7dd4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
				rx_pkt_len--;
    7dd8:	91 50       	subi	r25, 0x01	; 1
    7dda:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <rx_pkt_len.2136>
				if (rx_pkt_len == 0) /* We have read all the bytes in the buffer */
    7dde:	91 11       	cpse	r25, r1
				{
					rx_pkt_ptr = 1; /* Reset the data pointer */
    7de0:	03 c0       	rjmp	.+6      	; 0x7de8 <getch+0x90>
    7de2:	91 e0       	ldi	r25, 0x01	; 1
    7de4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
				break;
			}
		}
	}
	return ch;
}
    7de8:	cf 91       	pop	r28
    7dea:	08 95       	ret

00007dec <wait_timeout>:
	   "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7dec:	88 e1       	ldi	r24, 0x18	; 24
    7dee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	WDTCSR = x;
    7df2:	88 e0       	ldi	r24, 0x08	; 8
    7df4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7df8:	ff cf       	rjmp	.-2      	; 0x7df8 <wait_timeout+0xc>

00007dfa <verifySpace>:
	while (1)			      // and busy-loop so that WD causes
		;				      //  a reset and app start.
}

void verifySpace(void) {
	if (getch() != CRC_EOP)
    7dfa:	ae df       	rcall	.-164    	; 0x7d58 <getch>
    7dfc:	80 32       	cpi	r24, 0x20	; 32
    7dfe:	09 f0       	breq	.+2      	; 0x7e02 <verifySpace+0x8>
    7e00:	f5 df       	rcall	.-22     	; 0x7dec <wait_timeout>
		wait_timeout();
    7e02:	84 e1       	ldi	r24, 0x14	; 20
    7e04:	73 cf       	rjmp	.-282    	; 0x7cec <putch>

00007e06 <watchdogConfig>:
	   "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7e06:	e0 e6       	ldi	r30, 0x60	; 96
    7e08:	f0 e0       	ldi	r31, 0x00	; 0
    7e0a:	98 e1       	ldi	r25, 0x18	; 24
    7e0c:	90 83       	st	Z, r25
	WDTCSR = x;
    7e0e:	80 83       	st	Z, r24
    7e10:	08 95       	ret

00007e12 <appStart>:
	   "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7e12:	e0 e6       	ldi	r30, 0x60	; 96
    7e14:	f0 e0       	ldi	r31, 0x00	; 0
    7e16:	98 e1       	ldi	r25, 0x18	; 24
    7e18:	90 83       	st	Z, r25
	WDTCSR = x;
    7e1a:	9e e0       	ldi	r25, 0x0E	; 14
    7e1c:	90 83       	st	Z, r25
	watchdogConfig(WATCHDOG_SELECTION); /* Re-enable watchdog for user app */

	//  save the reset flags in the designated register
	//  This can be saved in a main program by putting code in .init0 (which
	//  executes before normal c init code) to save R2 to a global variable.
	__asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7e1e:	28 2e       	mov	r2, r24
	__asm__ __volatile__ (
    7e20:	ee 27       	eor	r30, r30
    7e22:	ff 27       	eor	r31, r31
    7e24:	09 94       	ijmp
