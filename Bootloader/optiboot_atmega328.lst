
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00007fec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00007900  00007900  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000078a  2**0
                  CONTENTS, READONLY
  3 .bss          00000022  0080010a  0080010a  0000078a  2**0
                  ALLOC
  4 .stab         000021c0  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000125b  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007900 <main>:
    7900:	cd b7       	in	r28, 0x3d	; 61
    7902:	de b7       	in	r29, 0x3e	; 62
    7904:	26 97       	sbiw	r28, 0x06	; 6
    7906:	de bf       	out	0x3e, r29	; 62
    7908:	cd bf       	out	0x3d, r28	; 61
    790a:	f8 94       	cli
    790c:	11 24       	eor	r1, r1
    790e:	8f ed       	ldi	r24, 0xDF	; 223
    7910:	98 e0       	ldi	r25, 0x08	; 8
    7912:	9e bf       	out	0x3e, r25	; 62
    7914:	8d bf       	out	0x3d, r24	; 61
    7916:	cd b7       	in	r28, 0x3d	; 61
    7918:	de b7       	in	r29, 0x3e	; 62
    791a:	84 b7       	in	r24, 0x34	; 52
    791c:	14 be       	out	0x34, r1	; 52
    791e:	83 ff       	sbrs	r24, 3
    7920:	18 c0       	rjmp	.+48     	; 0x7952 <main+0x52>
    7922:	40 91 ec 08 	lds	r20, 0x08EC	; 0x8008ec <__bss_end+0x7c0>
    7926:	50 91 ed 08 	lds	r21, 0x08ED	; 0x8008ed <__bss_end+0x7c1>
    792a:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <__bss_end+0x7c2>
    792e:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <__bss_end+0x7c3>
    7932:	4f 3e       	cpi	r20, 0xEF	; 239
    7934:	5e 4b       	sbci	r21, 0xBE	; 190
    7936:	6d 4a       	sbci	r22, 0xAD	; 173
    7938:	7e 4d       	sbci	r23, 0xDE	; 222
    793a:	59 f4       	brne	.+22     	; 0x7952 <main+0x52>
    793c:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <__bss_end+0x7c0>
    7940:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <__bss_end+0x7c1>
    7944:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <__bss_end+0x7c2>
    7948:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <__bss_end+0x7c3>
    794c:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__bss_end+0x7bf>
    7950:	a7 d1       	rcall	.+846    	; 0x7ca0 <appStart>
    7952:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__bss_end+0x7bf>
    7956:	8f ee       	ldi	r24, 0xEF	; 239
    7958:	9e eb       	ldi	r25, 0xBE	; 190
    795a:	ad ea       	ldi	r26, 0xAD	; 173
    795c:	be ed       	ldi	r27, 0xDE	; 222
    795e:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__bss_end+0x7c0>
    7962:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <__bss_end+0x7c1>
    7966:	a0 93 ee 08 	sts	0x08EE, r26	; 0x8008ee <__bss_end+0x7c2>
    796a:	b0 93 ef 08 	sts	0x08EF, r27	; 0x8008ef <__bss_end+0x7c3>
    796e:	11 e0       	ldi	r17, 0x01	; 1
    7970:	a0 e0       	ldi	r26, 0x00	; 0
    7972:	b1 e0       	ldi	r27, 0x01	; 1
    7974:	ec ee       	ldi	r30, 0xEC	; 236
    7976:	ff e7       	ldi	r31, 0x7F	; 127
    7978:	02 c0       	rjmp	.+4      	; 0x797e <cpchk>

0000797a <copy>:
    797a:	05 90       	lpm	r0, Z+
    797c:	0d 92       	st	X+, r0

0000797e <cpchk>:
    797e:	aa 30       	cpi	r26, 0x0A	; 10
    7980:	b1 07       	cpc	r27, r17
    7982:	d9 f7       	brne	.-10     	; 0x797a <copy>
    7984:	11 e0       	ldi	r17, 0x01	; 1
    7986:	aa e0       	ldi	r26, 0x0A	; 10
    7988:	b1 e0       	ldi	r27, 0x01	; 1
    798a:	01 c0       	rjmp	.+2      	; 0x798e <clchk>

0000798c <clear>:
    798c:	1d 92       	st	X+, r1

0000798e <clchk>:
    798e:	ac 32       	cpi	r26, 0x2C	; 44
    7990:	b1 07       	cpc	r27, r17
    7992:	e1 f7       	brne	.-8      	; 0x798c <clear>
    7994:	8a b1       	in	r24, 0x0a	; 10
    7996:	83 60       	ori	r24, 0x03	; 3
    7998:	8a b9       	out	0x0a, r24	; 10
    799a:	8b b1       	in	r24, 0x0b	; 11
    799c:	8c 7f       	andi	r24, 0xFC	; 252
    799e:	8b b9       	out	0x0b, r24	; 11
    79a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    79a4:	80 e1       	ldi	r24, 0x10	; 16
    79a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    79aa:	86 e0       	ldi	r24, 0x06	; 6
    79ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    79b0:	18 e1       	ldi	r17, 0x18	; 24
    79b2:	10 93 c1 00 	sts	0x00C1, r17	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    79b6:	82 e0       	ldi	r24, 0x02	; 2
    79b8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    79bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rf24_mode+0x1>
    79c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rf24_mode+0x2>
    79c4:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <rf24_mode+0x3>
    79c8:	8c 83       	std	Y+4, r24	; 0x04
    79ca:	9d 83       	std	Y+5, r25	; 0x05
    79cc:	ae 83       	std	Y+6, r26	; 0x06
    79ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rf24_mode+0x4>
    79d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rf24_mode+0x5>
    79d6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <rf24_mode+0x6>
    79da:	89 83       	std	Y+1, r24	; 0x01
    79dc:	9a 83       	std	Y+2, r25	; 0x02
    79de:	ab 83       	std	Y+3, r26	; 0x03
    79e0:	fc d2       	rcall	.+1528   	; 0x7fda <spi_init>
    79e2:	21 9a       	sbi	0x04, 1	; 4
    79e4:	be 01       	movw	r22, r28
    79e6:	6c 5f       	subi	r22, 0xFC	; 252
    79e8:	7f 4f       	sbci	r23, 0xFF	; 255
    79ea:	ce 01       	movw	r24, r28
    79ec:	01 96       	adiw	r24, 0x01	; 1
    79ee:	b3 d2       	rcall	.+1382   	; 0x7f56 <nrf24_config>
    79f0:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
    79f4:	8e e0       	ldi	r24, 0x0E	; 14
    79f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    79fa:	00 e0       	ldi	r16, 0x00	; 0
    79fc:	10 e0       	ldi	r17, 0x00	; 0
    79fe:	28 e1       	ldi	r18, 0x18	; 24
    7a00:	c2 2e       	mov	r12, r18
    7a02:	38 e0       	ldi	r19, 0x08	; 8
    7a04:	b3 2e       	mov	r11, r19
    7a06:	aa 24       	eor	r10, r10
    7a08:	a3 94       	inc	r10
    7a0a:	45 e0       	ldi	r20, 0x05	; 5
    7a0c:	94 2e       	mov	r9, r20
    7a0e:	51 e1       	ldi	r21, 0x11	; 17
    7a10:	85 2e       	mov	r8, r21
    7a12:	63 e0       	ldi	r22, 0x03	; 3
    7a14:	d6 2e       	mov	r13, r22
    7a16:	da d0       	rcall	.+436    	; 0x7bcc <getch>
    7a18:	81 34       	cpi	r24, 0x41	; 65
    7a1a:	71 f4       	brne	.+28     	; 0x7a38 <clchk+0xaa>
    7a1c:	d7 d0       	rcall	.+430    	; 0x7bcc <getch>
    7a1e:	f8 2e       	mov	r15, r24
    7a20:	2c d1       	rcall	.+600    	; 0x7c7a <verifySpace>
    7a22:	e2 e8       	ldi	r30, 0x82	; 130
    7a24:	fe 16       	cp	r15, r30
    7a26:	f9 f0       	breq	.+62     	; 0x7a66 <clchk+0xd8>
    7a28:	f1 e8       	ldi	r31, 0x81	; 129
    7a2a:	ff 12       	cpse	r15, r31
    7a2c:	02 c0       	rjmp	.+4      	; 0x7a32 <clchk+0xa4>
    7a2e:	85 e0       	ldi	r24, 0x05	; 5
    7a30:	01 c0       	rjmp	.+2      	; 0x7a34 <clchk+0xa6>
    7a32:	83 e0       	ldi	r24, 0x03	; 3
    7a34:	7c d0       	rcall	.+248    	; 0x7b2e <putch>
    7a36:	78 c0       	rjmp	.+240    	; 0x7b28 <clchk+0x19a>
    7a38:	82 34       	cpi	r24, 0x42	; 66
    7a3a:	11 f4       	brne	.+4      	; 0x7a40 <clchk+0xb2>
    7a3c:	84 e1       	ldi	r24, 0x14	; 20
    7a3e:	03 c0       	rjmp	.+6      	; 0x7a46 <clchk+0xb8>
    7a40:	85 34       	cpi	r24, 0x45	; 69
    7a42:	19 f4       	brne	.+6      	; 0x7a4a <clchk+0xbc>
    7a44:	85 e0       	ldi	r24, 0x05	; 5
    7a46:	1f d1       	rcall	.+574    	; 0x7c86 <getNch>
    7a48:	6f c0       	rjmp	.+222    	; 0x7b28 <clchk+0x19a>
    7a4a:	85 35       	cpi	r24, 0x55	; 85
    7a4c:	41 f4       	brne	.+16     	; 0x7a5e <clchk+0xd0>
    7a4e:	be d0       	rcall	.+380    	; 0x7bcc <getch>
    7a50:	08 2f       	mov	r16, r24
    7a52:	10 e0       	ldi	r17, 0x00	; 0
    7a54:	bb d0       	rcall	.+374    	; 0x7bcc <getch>
    7a56:	18 2b       	or	r17, r24
    7a58:	00 0f       	add	r16, r16
    7a5a:	11 1f       	adc	r17, r17
    7a5c:	64 c0       	rjmp	.+200    	; 0x7b26 <clchk+0x198>
    7a5e:	86 35       	cpi	r24, 0x56	; 86
    7a60:	21 f4       	brne	.+8      	; 0x7a6a <clchk+0xdc>
    7a62:	84 e0       	ldi	r24, 0x04	; 4
    7a64:	10 d1       	rcall	.+544    	; 0x7c86 <getNch>
    7a66:	80 e0       	ldi	r24, 0x00	; 0
    7a68:	e5 cf       	rjmp	.-54     	; 0x7a34 <clchk+0xa6>
    7a6a:	84 36       	cpi	r24, 0x64	; 100
    7a6c:	09 f0       	breq	.+2      	; 0x7a70 <clchk+0xe2>
    7a6e:	3d c0       	rjmp	.+122    	; 0x7aea <clchk+0x15c>
    7a70:	ad d0       	rcall	.+346    	; 0x7bcc <getch>
    7a72:	ac d0       	rcall	.+344    	; 0x7bcc <getch>
    7a74:	78 2e       	mov	r7, r24
    7a76:	aa d0       	rcall	.+340    	; 0x7bcc <getch>
    7a78:	01 15       	cp	r16, r1
    7a7a:	80 e7       	ldi	r24, 0x70	; 112
    7a7c:	18 07       	cpc	r17, r24
    7a7e:	18 f4       	brcc	.+6      	; 0x7a86 <clchk+0xf8>
    7a80:	f8 01       	movw	r30, r16
    7a82:	d7 be       	out	0x37, r13	; 55
    7a84:	e8 95       	spm
    7a86:	80 e8       	ldi	r24, 0x80	; 128
    7a88:	e8 2e       	mov	r14, r24
    7a8a:	ff 24       	eor	r15, r15
    7a8c:	f3 94       	inc	r15
    7a8e:	9e d0       	rcall	.+316    	; 0x7bcc <getch>
    7a90:	f7 01       	movw	r30, r14
    7a92:	81 93       	st	Z+, r24
    7a94:	7f 01       	movw	r14, r30
    7a96:	7a 94       	dec	r7
    7a98:	71 10       	cpse	r7, r1
    7a9a:	f9 cf       	rjmp	.-14     	; 0x7a8e <clchk+0x100>
    7a9c:	01 15       	cp	r16, r1
    7a9e:	f0 e7       	ldi	r31, 0x70	; 112
    7aa0:	1f 07       	cpc	r17, r31
    7aa2:	18 f0       	brcs	.+6      	; 0x7aaa <clchk+0x11c>
    7aa4:	f8 01       	movw	r30, r16
    7aa6:	d7 be       	out	0x37, r13	; 55
    7aa8:	e8 95       	spm
    7aaa:	e7 d0       	rcall	.+462    	; 0x7c7a <verifySpace>
    7aac:	07 b6       	in	r0, 0x37	; 55
    7aae:	00 fc       	sbrc	r0, 0
    7ab0:	fd cf       	rjmp	.-6      	; 0x7aac <clchk+0x11e>
    7ab2:	f8 01       	movw	r30, r16
    7ab4:	a0 e8       	ldi	r26, 0x80	; 128
    7ab6:	b1 e0       	ldi	r27, 0x01	; 1
    7ab8:	8c 91       	ld	r24, X
    7aba:	11 96       	adiw	r26, 0x01	; 1
    7abc:	2c 91       	ld	r18, X
    7abe:	11 97       	sbiw	r26, 0x01	; 1
    7ac0:	90 e0       	ldi	r25, 0x00	; 0
    7ac2:	92 2b       	or	r25, r18
    7ac4:	0c 01       	movw	r0, r24
    7ac6:	a7 be       	out	0x37, r10	; 55
    7ac8:	e8 95       	spm
    7aca:	11 24       	eor	r1, r1
    7acc:	32 96       	adiw	r30, 0x02	; 2
    7ace:	12 96       	adiw	r26, 0x02	; 2
    7ad0:	a1 15       	cp	r26, r1
    7ad2:	82 e0       	ldi	r24, 0x02	; 2
    7ad4:	b8 07       	cpc	r27, r24
    7ad6:	81 f7       	brne	.-32     	; 0x7ab8 <clchk+0x12a>
    7ad8:	f8 01       	movw	r30, r16
    7ada:	97 be       	out	0x37, r9	; 55
    7adc:	e8 95       	spm
    7ade:	07 b6       	in	r0, 0x37	; 55
    7ae0:	00 fc       	sbrc	r0, 0
    7ae2:	fd cf       	rjmp	.-6      	; 0x7ade <clchk+0x150>
    7ae4:	87 be       	out	0x37, r8	; 55
    7ae6:	e8 95       	spm
    7ae8:	1f c0       	rjmp	.+62     	; 0x7b28 <clchk+0x19a>
    7aea:	84 37       	cpi	r24, 0x74	; 116
    7aec:	69 f4       	brne	.+26     	; 0x7b08 <clchk+0x17a>
    7aee:	6e d0       	rcall	.+220    	; 0x7bcc <getch>
    7af0:	6d d0       	rcall	.+218    	; 0x7bcc <getch>
    7af2:	f8 2e       	mov	r15, r24
    7af4:	6b d0       	rcall	.+214    	; 0x7bcc <getch>
    7af6:	c1 d0       	rcall	.+386    	; 0x7c7a <verifySpace>
    7af8:	f8 01       	movw	r30, r16
    7afa:	85 91       	lpm	r24, Z+
    7afc:	8f 01       	movw	r16, r30
    7afe:	17 d0       	rcall	.+46     	; 0x7b2e <putch>
    7b00:	fa 94       	dec	r15
    7b02:	f1 10       	cpse	r15, r1
    7b04:	f9 cf       	rjmp	.-14     	; 0x7af8 <clchk+0x16a>
    7b06:	10 c0       	rjmp	.+32     	; 0x7b28 <clchk+0x19a>
    7b08:	85 37       	cpi	r24, 0x75	; 117
    7b0a:	39 f4       	brne	.+14     	; 0x7b1a <clchk+0x18c>
    7b0c:	b6 d0       	rcall	.+364    	; 0x7c7a <verifySpace>
    7b0e:	8e e1       	ldi	r24, 0x1E	; 30
    7b10:	0e d0       	rcall	.+28     	; 0x7b2e <putch>
    7b12:	85 e9       	ldi	r24, 0x95	; 149
    7b14:	0c d0       	rcall	.+24     	; 0x7b2e <putch>
    7b16:	8f e0       	ldi	r24, 0x0F	; 15
    7b18:	8d cf       	rjmp	.-230    	; 0x7a34 <clchk+0xa6>
    7b1a:	81 35       	cpi	r24, 0x51	; 81
    7b1c:	21 f4       	brne	.+8      	; 0x7b26 <clchk+0x198>
    7b1e:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
    7b22:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__DATA_REGION_ORIGIN__>
    7b26:	a9 d0       	rcall	.+338    	; 0x7c7a <verifySpace>
    7b28:	80 e1       	ldi	r24, 0x10	; 16
    7b2a:	01 d0       	rcall	.+2      	; 0x7b2e <putch>
    7b2c:	74 cf       	rjmp	.-280    	; 0x7a16 <clchk+0x88>

00007b2e <putch>:

		ch = getch();
	}*/
}

void putch(char ch) {
    7b2e:	ef 92       	push	r14
    7b30:	ff 92       	push	r15
    7b32:	0f 93       	push	r16
    7b34:	1f 93       	push	r17
    7b36:	cf 93       	push	r28
    7b38:	df 93       	push	r29
    7b3a:	cd b7       	in	r28, 0x3d	; 61
    7b3c:	de b7       	in	r29, 0x3e	; 62
    7b3e:	a0 97       	sbiw	r28, 0x20	; 32
    7b40:	0f b6       	in	r0, 0x3f	; 63
    7b42:	f8 94       	cli
    7b44:	de bf       	out	0x3e, r29	; 62
    7b46:	0f be       	out	0x3f, r0	; 63
    7b48:	cd bf       	out	0x3d, r28	; 61

    uint8_t pkt_len = 1; /* There's always at least the ID byte */
    uint8_t pkt_buf[NRF24_MAX_PAYLOAD]={};
    7b4a:	9e 01       	movw	r18, r28
    7b4c:	2f 5f       	subi	r18, 0xFF	; 255
    7b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    7b50:	79 01       	movw	r14, r18
    7b52:	90 e2       	ldi	r25, 0x20	; 32
    7b54:	f9 01       	movw	r30, r18
    7b56:	11 92       	st	Z+, r1
    7b58:	9a 95       	dec	r25
    7b5a:	e9 f7       	brne	.-6      	; 0x7b56 <putch+0x28>
    uint32_t tx_retries = 500;

	if (radio_mode == RADIO_OFF) {
    7b5c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <radio_mode>
    7b60:	91 11       	cpse	r25, r1
    7b62:	07 c0       	rjmp	.+14     	; 0x7b72 <putch+0x44>
		while (1) {
			while (( UCSR0A & _BV(UDRE0)) == 0);
    7b64:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7b68:	95 ff       	sbrs	r25, 5
    7b6a:	fc cf       	rjmp	.-8      	; 0x7b64 <putch+0x36>
			UDR0 = ch;
    7b6c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7b70:	20 c0       	rjmp	.+64     	; 0x7bb2 <putch+0x84>
			break;
		}
	}
	else { /* Radio ON */
		pkt_buf[0]++;
    7b72:	91 e0       	ldi	r25, 0x01	; 1
    7b74:	99 83       	std	Y+1, r25	; 0x01
		pkt_buf[pkt_len++] = ch; /* Fill the local buffer */
    7b76:	8a 83       	std	Y+2, r24	; 0x02

		if ((ch == STK_OK) || (pkt_len == MAX_PLD_SIZE)) { /* When last byte or buffer full */
    7b78:	80 31       	cpi	r24, 0x10	; 16
    7b7a:	d9 f4       	brne	.+54     	; 0x7bb2 <putch+0x84>
    7b7c:	00 e0       	ldi	r16, 0x00	; 0
    7b7e:	10 e0       	ldi	r17, 0x00	; 0
			while (tx_retries--) { /* Send buffer until received */

				nrf24_sendData(pkt_buf, pkt_len);
    7b80:	62 e0       	ldi	r22, 0x02	; 2
    7b82:	c7 01       	movw	r24, r14
    7b84:	b0 d1       	rcall	.+864    	; 0x7ee6 <nrf24_sendData>
				if (nrf24_wait_tx_result() == NRF24_MESSAGE_SENT)
    7b86:	44 d1       	rcall	.+648    	; 0x7e10 <nrf24_wait_tx_result>
    7b88:	88 23       	and	r24, r24
    7b8a:	99 f0       	breq	.+38     	; 0x7bb2 <putch+0x84>
    7b8c:	81 e4       	ldi	r24, 0x41	; 65
    7b8e:	9f e1       	ldi	r25, 0x1F	; 31
    7b90:	01 97       	sbiw	r24, 0x01	; 1
	  "ijmp\n"
	);
}

static void delay8(uint16_t count) {
	while (count --)
    7b92:	49 f0       	breq	.+18     	; 0x7ba6 <putch+0x78>
	...
		__asm__ __volatile__ (
    7ba0:	00 00       	nop
    7ba2:	a8 95       	wdr
    7ba4:	f5 cf       	rjmp	.-22     	; 0x7b90 <putch+0x62>
    7ba6:	0f 5f       	subi	r16, 0xFF	; 255
    7ba8:	1f 4f       	sbci	r17, 0xFF	; 255
	else { /* Radio ON */
		pkt_buf[0]++;
		pkt_buf[pkt_len++] = ch; /* Fill the local buffer */

		if ((ch == STK_OK) || (pkt_len == MAX_PLD_SIZE)) { /* When last byte or buffer full */
			while (tx_retries--) { /* Send buffer until received */
    7baa:	04 3f       	cpi	r16, 0xF4	; 244
    7bac:	f1 e0       	ldi	r31, 0x01	; 1
    7bae:	1f 07       	cpc	r17, r31
    7bb0:	39 f7       	brne	.-50     	; 0x7b80 <putch+0x52>

			/* Reset the local buffer */
			pkt_len = 0;
		}
	}
}
    7bb2:	a0 96       	adiw	r28, 0x20	; 32
    7bb4:	0f b6       	in	r0, 0x3f	; 63
    7bb6:	f8 94       	cli
    7bb8:	de bf       	out	0x3e, r29	; 62
    7bba:	0f be       	out	0x3f, r0	; 63
    7bbc:	cd bf       	out	0x3d, r28	; 61
    7bbe:	df 91       	pop	r29
    7bc0:	cf 91       	pop	r28
    7bc2:	1f 91       	pop	r17
    7bc4:	0f 91       	pop	r16
    7bc6:	ff 90       	pop	r15
    7bc8:	ef 90       	pop	r14
    7bca:	08 95       	ret

00007bcc <getch>:

uint8_t getch(void) {
    7bcc:	cf 93       	push	r28
			}
		}
		/* If there is data in the local buffer or new data in RF24 fifo */
		if (pkt_len || (nrf24_dataReady() == NRF24_DATA_AVAILABLE)) {
			watchdogReset();
			radio_mode = RADIO_ON; /* From now on, we're in radio mode */
    7bce:	c1 e0       	ldi	r28, 0x01	; 1
    static uint8_t pkt_len = 0;  /* Number of bytes in the local buffer */
    static uint8_t pkt_ptr = 1;  /* Start of data in the buffer */
    static uint8_t pkt_buf[32];  /* Local buffer to store bytes */

	while (1) {
		if(radio_mode == RADIO_OFF){
    7bd0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <radio_mode>
    7bd4:	81 11       	cpse	r24, r1
    7bd6:	08 c0       	rjmp	.+16     	; 0x7be8 <getch+0x1c>
			if (( UCSR0A & (1 << RXC0)) != 0) /* If we have data in the UART */
    7bd8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7bdc:	87 ff       	sbrs	r24, 7
    7bde:	04 c0       	rjmp	.+8      	; 0x7be8 <getch+0x1c>
}


// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
	__asm__ __volatile__ (
    7be0:	a8 95       	wdr
	while (1) {
		if(radio_mode == RADIO_OFF){
			if (( UCSR0A & (1 << RXC0)) != 0) /* If we have data in the UART */
			{
				watchdogReset();
				ch = UDR0;
    7be2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
				return ch;
    7be6:	40 c0       	rjmp	.+128    	; 0x7c68 <getch+0x9c>
			}
		}
		/* If there is data in the local buffer or new data in RF24 fifo */
		if (pkt_len || (nrf24_dataReady() == NRF24_DATA_AVAILABLE)) {
    7be8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pkt_len.1924>
    7bec:	88 23       	and	r24, r24
    7bee:	21 f0       	breq	.+8      	; 0x7bf8 <getch+0x2c>
}


// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
	__asm__ __volatile__ (
    7bf0:	a8 95       	wdr
			}
		}
		/* If there is data in the local buffer or new data in RF24 fifo */
		if (pkt_len || (nrf24_dataReady() == NRF24_DATA_AVAILABLE)) {
			watchdogReset();
			radio_mode = RADIO_ON; /* From now on, we're in radio mode */
    7bf2:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <radio_mode>
				ch = UDR0;
				return ch;
			}
		}
		/* If there is data in the local buffer or new data in RF24 fifo */
		if (pkt_len || (nrf24_dataReady() == NRF24_DATA_AVAILABLE)) {
    7bf6:	0f c0       	rjmp	.+30     	; 0x7c16 <getch+0x4a>
    7bf8:	a9 d1       	rcall	.+850    	; 0x7f4c <nrf24_dataReady>
    7bfa:	81 30       	cpi	r24, 0x01	; 1
    7bfc:	49 f7       	brne	.-46     	; 0x7bd0 <getch+0x4>
    7bfe:	f8 cf       	rjmp	.-16     	; 0x7bf0 <getch+0x24>
			watchdogReset();
			radio_mode = RADIO_ON; /* From now on, we're in radio mode */

			/* If our local buffer is empty, get more data from RF24 */
			while(pkt_len == 0) {
				nrf24_getData(pkt_buf, &pkt_len);
    7c00:	6a e2       	ldi	r22, 0x2A	; 42
    7c02:	71 e0       	ldi	r23, 0x01	; 1
    7c04:	8a e0       	ldi	r24, 0x0A	; 10
    7c06:	91 e0       	ldi	r25, 0x01	; 1
    7c08:	2a d1       	rcall	.+596    	; 0x7e5e <nrf24_getData>

				if(pkt_len>1){ /* Sanity check: pkt_len should always have a minimum of 2 bytes */
    7c0a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pkt_len.1924>
    7c0e:	82 30       	cpi	r24, 0x02	; 2
    7c10:	38 f4       	brcc	.+14     	; 0x7c20 <getch+0x54>
					if (pkt_buf[0] == pkt_id) { /* We have already received this packet */
	            		pkt_len = 0; /* Ignore it */
    7c12:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <pkt_len.1924>
		if (pkt_len || (nrf24_dataReady() == NRF24_DATA_AVAILABLE)) {
			watchdogReset();
			radio_mode = RADIO_ON; /* From now on, we're in radio mode */

			/* If our local buffer is empty, get more data from RF24 */
			while(pkt_len == 0) {
    7c16:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pkt_len.1924>
    7c1a:	88 23       	and	r24, r24
    7c1c:	89 f3       	breq	.-30     	; 0x7c00 <getch+0x34>
    7c1e:	0d c0       	rjmp	.+26     	; 0x7c3a <getch+0x6e>
				nrf24_getData(pkt_buf, &pkt_len);

				if(pkt_len>1){ /* Sanity check: pkt_len should always have a minimum of 2 bytes */
					if (pkt_buf[0] == pkt_id) { /* We have already received this packet */
    7c20:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
    7c24:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <pkt_id.1923>
    7c28:	92 17       	cp	r25, r18
    7c2a:	99 f3       	breq	.-26     	; 0x7c12 <getch+0x46>
	            		pkt_len = 0; /* Ignore it */
			        }
			        else{
			            pkt_id = pkt_buf[0]; /* It's a new packet, update the current ID */
    7c2c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <pkt_id.1923>
			            pkt_len-=1; /* Ignore the first byte, which is the ID */
    7c30:	81 50       	subi	r24, 0x01	; 1
    7c32:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pkt_len.1924>
			            pkt_ptr=1;
    7c36:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			    	pkt_len=0;
			    }
			}

			/* If there is data in the local buffer */
		    if (pkt_len) {
    7c3a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pkt_len.1924>
    7c3e:	99 23       	and	r25, r25
    7c40:	09 f4       	brne	.+2      	; 0x7c44 <getch+0x78>
    7c42:	c6 cf       	rjmp	.-116    	; 0x7bd0 <getch+0x4>
		        ch = pkt_buf[pkt_ptr]; /* Grab next byte in the buffer */
    7c44:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    7c48:	e2 2f       	mov	r30, r18
    7c4a:	f0 e0       	ldi	r31, 0x00	; 0
    7c4c:	e6 5f       	subi	r30, 0xF6	; 246
    7c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    7c50:	80 81       	ld	r24, Z
		        pkt_ptr++;
    7c52:	2f 5f       	subi	r18, 0xFF	; 255
    7c54:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
		        pkt_len--;
    7c58:	91 50       	subi	r25, 0x01	; 1
    7c5a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pkt_len.1924>

		        if (pkt_len == 0) { /* We have read all the bytes in the buffer */
    7c5e:	91 11       	cpse	r25, r1
    7c60:	03 c0       	rjmp	.+6      	; 0x7c68 <getch+0x9c>
		            /* Reset the buffer data pointer */
		            pkt_ptr = 1; 
    7c62:	91 e0       	ldi	r25, 0x01	; 1
    7c64:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		        }
		        return ch;
		    }
		}
	}
}
    7c68:	cf 91       	pop	r28
    7c6a:	08 95       	ret

00007c6c <wait_timeout>:
	  "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7c6c:	88 e1       	ldi	r24, 0x18	; 24
    7c6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	WDTCSR = x;
    7c72:	88 e0       	ldi	r24, 0x08	; 8
    7c74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7c78:	ff cf       	rjmp	.-2      	; 0x7c78 <wait_timeout+0xc>

00007c7a <verifySpace>:
	while (1)			      // and busy-loop so that WD causes
		;				      //  a reset and app start.
}

void verifySpace(void) {
	if (getch() != CRC_EOP)
    7c7a:	a8 df       	rcall	.-176    	; 0x7bcc <getch>
    7c7c:	80 32       	cpi	r24, 0x20	; 32
    7c7e:	09 f0       	breq	.+2      	; 0x7c82 <verifySpace+0x8>
		wait_timeout();
    7c80:	f5 df       	rcall	.-22     	; 0x7c6c <wait_timeout>
	putch(STK_INSYNC);
    7c82:	84 e1       	ldi	r24, 0x14	; 20
    7c84:	54 cf       	rjmp	.-344    	; 0x7b2e <putch>

00007c86 <getNch>:

/***************************************************************************/
/*							Other functions								   */
/***************************************************************************/

void getNch(uint8_t count) {
    7c86:	cf 93       	push	r28
    7c88:	c8 2f       	mov	r28, r24
	do getch(); while (--count);
    7c8a:	a0 df       	rcall	.-192    	; 0x7bcc <getch>
    7c8c:	c1 50       	subi	r28, 0x01	; 1
    7c8e:	e9 f7       	brne	.-6      	; 0x7c8a <getNch+0x4>
    7c90:	cf 91       	pop	r28
	verifySpace();
}
    7c92:	f3 cf       	rjmp	.-26     	; 0x7c7a <verifySpace>

00007c94 <watchdogConfig>:
	  "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7c94:	e0 e6       	ldi	r30, 0x60	; 96
    7c96:	f0 e0       	ldi	r31, 0x00	; 0
    7c98:	98 e1       	ldi	r25, 0x18	; 24
    7c9a:	90 83       	st	Z, r25
	WDTCSR = x;
    7c9c:	80 83       	st	Z, r24
    7c9e:	08 95       	ret

00007ca0 <appStart>:
	  "wdr\n"
	);
}

void watchdogConfig(uint8_t x) {
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7ca0:	e0 e6       	ldi	r30, 0x60	; 96
    7ca2:	f0 e0       	ldi	r31, 0x00	; 0
    7ca4:	98 e1       	ldi	r25, 0x18	; 24
    7ca6:	90 83       	st	Z, r25
	WDTCSR = x;
    7ca8:	9e e0       	ldi	r25, 0x0E	; 14
    7caa:	90 83       	st	Z, r25
	watchdogConfig(WATCHDOG_SELECTION); /* Re-enable watchdog for user app */

	//  save the reset flags in the designated register
	//  This can be saved in a main program by putting code in .init0 (which
	//  executes before normal c init code) to save R2 to a global variable.
	__asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7cac:	28 2e       	mov	r2, r24
	__asm__ __volatile__ (
    7cae:	ee 27       	eor	r30, r30
    7cb0:	ff 27       	eor	r31, r31
    7cb2:	09 94       	ijmp

00007cb4 <nrf24_ce_digitalWrite>:
	return data;
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state){
    7cb4:	88 23       	and	r24, r24
    7cb6:	31 f0       	breq	.+12     	; 0x7cc4 <nrf24_ce_digitalWrite+0x10>
		set_bit(NRF24_PORT,NRF24_CE);
    7cb8:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7cba:	85 e3       	ldi	r24, 0x35	; 53
    7cbc:	8a 95       	dec	r24
    7cbe:	f1 f7       	brne	.-4      	; 0x7cbc <nrf24_ce_digitalWrite+0x8>
    7cc0:	00 00       	nop
    7cc2:	08 95       	ret
    7cc4:	8f e1       	ldi	r24, 0x1F	; 31
    7cc6:	93 e0       	ldi	r25, 0x03	; 3
    7cc8:	01 97       	sbiw	r24, 0x01	; 1
    7cca:	f1 f7       	brne	.-4      	; 0x7cc8 <nrf24_ce_digitalWrite+0x14>
    7ccc:	00 c0       	rjmp	.+0      	; 0x7cce <nrf24_ce_digitalWrite+0x1a>
    7cce:	00 00       	nop
		_delay_us(10); /* Minimum CE High period for stuff to work */
	}
	else{
		_delay_us(200); /* Minimum CE interval from last edge */
		clr_bit(NRF24_PORT,NRF24_CE);
    7cd0:	28 98       	cbi	0x05, 0	; 5
    7cd2:	08 95       	ret

00007cd4 <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
    7cd4:	88 23       	and	r24, r24
    7cd6:	11 f0       	breq	.+4      	; 0x7cdc <nrf24_csn_digitalWrite+0x8>
		set_bit(NRF24_PORT, NRF24_CS);
    7cd8:	2a 9a       	sbi	0x05, 2	; 5
    7cda:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
    7cdc:	2a 98       	cbi	0x05, 2	; 5
    7cde:	08 95       	ret

00007ce0 <nrf24_rx_address>:
	return NRF24_CHIP_NOMINAL;
}

/* Set the RX address */
void nrf24_rx_address(uint8_t adr[])
{
    7ce0:	0f 93       	push	r16
    7ce2:	1f 93       	push	r17
    7ce4:	cf 93       	push	r28
    7ce6:	df 93       	push	r29
    7ce8:	ec 01       	movw	r28, r24
	nrf24_csn_digitalWrite(LOW);
    7cea:	80 e0       	ldi	r24, 0x00	; 0
    7cec:	f3 df       	rcall	.-26     	; 0x7cd4 <nrf24_csn_digitalWrite>
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
    7cee:	8b e2       	ldi	r24, 0x2B	; 43
    7cf0:	6e d1       	rcall	.+732    	; 0x7fce <spi_exchange>
    7cf2:	8e 01       	movw	r16, r28
    7cf4:	0d 5f       	subi	r16, 0xFD	; 253
    7cf6:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7cf8:	89 91       	ld	r24, Y+
    7cfa:	69 d1       	rcall	.+722    	; 0x7fce <spi_exchange>
/* Set the RX address */
void nrf24_rx_address(uint8_t adr[])
{
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
    7cfc:	c0 17       	cp	r28, r16
    7cfe:	d1 07       	cpc	r29, r17
    7d00:	d9 f7       	brne	.-10     	; 0x7cf8 <nrf24_rx_address+0x18>
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7d02:	81 e0       	ldi	r24, 0x01	; 1
}
    7d04:	df 91       	pop	r29
    7d06:	cf 91       	pop	r28
    7d08:	1f 91       	pop	r17
    7d0a:	0f 91       	pop	r16
	spi_exchange(RX_ADDR_P1 | W_REGISTER);
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7d0c:	e3 cf       	rjmp	.-58     	; 0x7cd4 <nrf24_csn_digitalWrite>

00007d0e <nrf24_tx_address>:
}

/* Set the TX address */
void nrf24_tx_address(uint8_t adr[])
{
    7d0e:	ef 92       	push	r14
    7d10:	ff 92       	push	r15
    7d12:	0f 93       	push	r16
    7d14:	1f 93       	push	r17
    7d16:	cf 93       	push	r28
    7d18:	df 93       	push	r29
	nrf24_ce_digitalWrite(LOW);
    7d1a:	ec 01       	movw	r28, r24
    7d1c:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Flush required if we need to change address on the fly */
	/* Flush TX FIFO */
	nrf24_csn_digitalWrite(LOW);
    7d1e:	ca df       	rcall	.-108    	; 0x7cb4 <nrf24_ce_digitalWrite>
    7d20:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(FLUSH_TX);
    7d22:	d8 df       	rcall	.-80     	; 0x7cd4 <nrf24_csn_digitalWrite>
    7d24:	81 ee       	ldi	r24, 0xE1	; 225
	nrf24_csn_digitalWrite(HIGH);
    7d26:	53 d1       	rcall	.+678    	; 0x7fce <spi_exchange>
    7d28:	81 e0       	ldi	r24, 0x01	; 1
	
	nrf24_csn_digitalWrite(LOW);
    7d2a:	d4 df       	rcall	.-88     	; 0x7cd4 <nrf24_csn_digitalWrite>
    7d2c:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(TX_ADDR | W_REGISTER);
    7d2e:	d2 df       	rcall	.-92     	; 0x7cd4 <nrf24_csn_digitalWrite>
    7d30:	80 e3       	ldi	r24, 0x30	; 48
    7d32:	4d d1       	rcall	.+666    	; 0x7fce <spi_exchange>
    7d34:	7e 01       	movw	r14, r28
    7d36:	83 e0       	ldi	r24, 0x03	; 3
    7d38:	e8 0e       	add	r14, r24
    7d3a:	f1 1c       	adc	r15, r1
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
	{
		spi_exchange(adr[i]);
    7d3c:	8e 01       	movw	r16, r28
    7d3e:	f8 01       	movw	r30, r16
    7d40:	81 91       	ld	r24, Z+
    7d42:	8f 01       	movw	r16, r30
    7d44:	44 d1       	rcall	.+648    	; 0x7fce <spi_exchange>
	spi_exchange(FLUSH_TX);
	nrf24_csn_digitalWrite(HIGH);
	
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(TX_ADDR | W_REGISTER);
	for(uint8_t i=0; i<NRF24_ADDR_WIDTH; i++)
    7d46:	0e 15       	cp	r16, r14
    7d48:	1f 05       	cpc	r17, r15
	{
		spi_exchange(adr[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
    7d4a:	c9 f7       	brne	.-14     	; 0x7d3e <nrf24_tx_address+0x30>
    7d4c:	81 e0       	ldi	r24, 0x01	; 1
    7d4e:	c2 df       	rcall	.-124    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7d50:	f5 e3       	ldi	r31, 0x35	; 53
    7d52:	fa 95       	dec	r31
    7d54:	f1 f7       	brne	.-4      	; 0x7d52 <nrf24_tx_address+0x44>
    In terms of the delay functions, the CPU frequency can be given as
    a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
    However, the macros in <util/setbaud.h> require it to be an
    integer value.
 */
# define F_CPU 1000000UL
    7d56:	00 00       	nop
    7d58:	80 e0       	ldi	r24, 0x00	; 0
#endif
    7d5a:	bc df       	rcall	.-136    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7d5c:	8a e2       	ldi	r24, 0x2A	; 42

#ifndef __OPTIMIZE__
# warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
    7d5e:	37 d1       	rcall	.+622    	; 0x7fce <spi_exchange>
    7d60:	89 91       	ld	r24, Y+
    7d62:	35 d1       	rcall	.+618    	; 0x7fce <spi_exchange>
    However, the macros in <util/setbaud.h> require it to be an
    integer value.
 */
# define F_CPU 1000000UL
#endif

    7d64:	ec 16       	cp	r14, r28
    7d66:	fd 06       	cpc	r15, r29
    7d68:	d9 f7       	brne	.-10     	; 0x7d60 <nrf24_tx_address+0x52>
#ifndef __OPTIMIZE__
# warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
#endif

    7d6a:	81 e0       	ldi	r24, 0x01	; 1
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
    7d6c:	df 91       	pop	r29
    7d6e:	cf 91       	pop	r28
    7d70:	1f 91       	pop	r17
    7d72:	0f 91       	pop	r16
    7d74:	ff 90       	pop	r15
#endif

#ifndef __OPTIMIZE__
# warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
#endif

    7d76:	ef 90       	pop	r14
    7d78:	ad cf       	rjmp	.-166    	; 0x7cd4 <nrf24_csn_digitalWrite>

00007d7a <nrf24_getStatus>:
	}
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
    7d7a:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
    7d7c:	80 e0       	ldi	r24, 0x00	; 0
    7d7e:	aa df       	rcall	.-172    	; 0x7cd4 <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
    7d80:	8f ef       	ldi	r24, 0xFF	; 255
    7d82:	25 d1       	rcall	.+586    	; 0x7fce <spi_exchange>
    7d84:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
    7d86:	81 e0       	ldi	r24, 0x01	; 1
    7d88:	a5 df       	rcall	.-182    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7d8a:	8c 2f       	mov	r24, r28
	return rv;
}
    7d8c:	cf 91       	pop	r28
    7d8e:	08 95       	ret

00007d90 <nrf24_payloadLength>:
/* Returns the length of data waiting in the RX FIFO */
uint8_t nrf24_payloadLength()
{
	uint8_t payload_len;
	
	nrf24_csn_digitalWrite(LOW);
    7d90:	cf 93       	push	r28
    7d92:	80 e0       	ldi	r24, 0x00	; 0
    7d94:	9f df       	rcall	.-194    	; 0x7cd4 <nrf24_csn_digitalWrite>
	spi_exchange(R_RX_PL_WID);
    7d96:	80 e6       	ldi	r24, 0x60	; 96
    7d98:	1a d1       	rcall	.+564    	; 0x7fce <spi_exchange>
    7d9a:	80 e0       	ldi	r24, 0x00	; 0
	payload_len=spi_exchange(0);
    7d9c:	18 d1       	rcall	.+560    	; 0x7fce <spi_exchange>
    7d9e:	c8 2f       	mov	r28, r24
    7da0:	81 e0       	ldi	r24, 0x01	; 1
    7da2:	98 df       	rcall	.-208    	; 0x7cd4 <nrf24_csn_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
    7da4:	8f ef       	ldi	r24, 0xFF	; 255
    7da6:	8c 0f       	add	r24, r28
	
	/* If payload is larger than 32 or equal to 0, an error has 
	 * occurred in transmission and payload must be discarded */
	if( (payload_len == 0) | (payload_len > NRF24_MAX_PAYLOAD)){
    7da8:	80 32       	cpi	r24, 0x20	; 32
    7daa:	38 f0       	brcs	.+14     	; 0x7dba <nrf24_payloadLength+0x2a>
    7dac:	80 e0       	ldi	r24, 0x00	; 0
		/* Flush RX FIFO */
		nrf24_csn_digitalWrite(LOW);
    7dae:	92 df       	rcall	.-220    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7db0:	82 ee       	ldi	r24, 0xE2	; 226
		spi_exchange(FLUSH_RX);
    7db2:	0d d1       	rcall	.+538    	; 0x7fce <spi_exchange>
    7db4:	81 e0       	ldi	r24, 0x01	; 1
    7db6:	8e df       	rcall	.-228    	; 0x7cd4 <nrf24_csn_digitalWrite>
		nrf24_csn_digitalWrite(HIGH);
    7db8:	c0 e0       	ldi	r28, 0x00	; 0
    7dba:	8c 2f       	mov	r24, r28
		payload_len = 0;
    7dbc:	cf 91       	pop	r28
	}
	return payload_len;
}
    7dbe:	08 95       	ret

00007dc0 <nrf24_configRegister>:
	}
}

/* Write a single byte to register */
void nrf24_configRegister(uint8_t reg, uint8_t data)
{
    7dc0:	cf 93       	push	r28
    7dc2:	df 93       	push	r29
    7dc4:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(LOW);
    7dc6:	d6 2f       	mov	r29, r22
    7dc8:	80 e0       	ldi	r24, 0x00	; 0
    7dca:	84 df       	rcall	.-248    	; 0x7cd4 <nrf24_csn_digitalWrite>
	spi_exchange(W_REGISTER | (REGISTER_MASK & reg));
    7dcc:	8c 2f       	mov	r24, r28
    7dce:	8f 71       	andi	r24, 0x1F	; 31
    7dd0:	80 62       	ori	r24, 0x20	; 32
    7dd2:	fd d0       	rcall	.+506    	; 0x7fce <spi_exchange>
	spi_exchange(data);
    7dd4:	8d 2f       	mov	r24, r29
    7dd6:	fb d0       	rcall	.+502    	; 0x7fce <spi_exchange>
    7dd8:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7dda:	df 91       	pop	r29
}
    7ddc:	cf 91       	pop	r28
    7dde:	7a cf       	rjmp	.-268    	; 0x7cd4 <nrf24_csn_digitalWrite>

00007de0 <nrf24_resetStatus>:
	return rv;
}

/* Resets status register */
void nrf24_resetStatus(){
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
    7de0:	60 e7       	ldi	r22, 0x70	; 112
    7de2:	87 e0       	ldi	r24, 0x07	; 7
    7de4:	ed cf       	rjmp	.-38     	; 0x7dc0 <nrf24_configRegister>

00007de6 <nrf24_setMode_RX>:
}

/* Set chip as receiver */
void nrf24_setMode_RX()
{
	if(rf24_mode != MODE_RX){
    7de6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rf24_mode>
    7dea:	88 23       	and	r24, r24
    7dec:	81 f0       	breq	.+32     	; 0x7e0e <nrf24_setMode_RX+0x28>
		/* Config RF24 as receiver */
		nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
    7dee:	6f e7       	ldi	r22, 0x7F	; 127
    7df0:	80 e0       	ldi	r24, 0x00	; 0
	
		/* Enable receiver address on Pipe 1. Pipe 0 is for transmitting ACKs */
		nrf24_configRegister(EN_RXADDR,(0<<ERX_P0)|(1<<ERX_P1));
    7df2:	e6 df       	rcall	.-52     	; 0x7dc0 <nrf24_configRegister>
    7df4:	62 e0       	ldi	r22, 0x02	; 2
    7df6:	82 e0       	ldi	r24, 0x02	; 2
    7df8:	e3 df       	rcall	.-58     	; 0x7dc0 <nrf24_configRegister>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7dfa:	8f e8       	ldi	r24, 0x8F	; 143
    7dfc:	91 e0       	ldi	r25, 0x01	; 1
    7dfe:	01 97       	sbiw	r24, 0x01	; 1
    7e00:	f1 f7       	brne	.-4      	; 0x7dfe <nrf24_setMode_RX+0x18>
    7e02:	00 c0       	rjmp	.+0      	; 0x7e04 <nrf24_setMode_RX+0x1e>
    7e04:	00 00       	nop
	
		/* Settling time */
		_delay_us(100);
	
		/* Turn on chip */
		nrf24_ce_digitalWrite(HIGH);
    7e06:	81 e0       	ldi	r24, 0x01	; 1
    7e08:	55 df       	rcall	.-342    	; 0x7cb4 <nrf24_ce_digitalWrite>
	
		rf24_mode=MODE_RX;
    7e0a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rf24_mode>
    7e0e:	08 95       	ret

00007e10 <nrf24_wait_tx_result>:
	return payload_len;
}

/* Waits until transmission is complete or timeout is reached */
uint8_t nrf24_wait_tx_result()
{
    7e10:	0f 93       	push	r16
    7e12:	1f 93       	push	r17
    7e14:	cf 93       	push	r28
	uint16_t timeout = 10000; /* ~100ms timeout with 10us delay each assertion */
	uint8_t status = nrf24_getStatus();
    7e16:	b1 df       	rcall	.-158    	; 0x7d7a <nrf24_getStatus>
    7e18:	b0 df       	rcall	.-160    	; 0x7d7a <nrf24_getStatus>
	
	/* Waits while packet is being sent 
	 * TS_DS: Data sent. If auto_ack is on, this is only set when ACK is received.
	 * TX_FULL: Transmission FIFO is full.
	 * MAX_RT: Maximum retries reached. */
	status = nrf24_getStatus();
    7e1a:	c8 2f       	mov	r28, r24
    7e1c:	c0 72       	andi	r28, 0x20	; 32
	uint8_t msg_sent = status & (1 << TX_DS);
    7e1e:	00 e1       	ldi	r16, 0x10	; 16
    7e20:	17 e2       	ldi	r17, 0x27	; 39
	
	while ((!msg_sent || (status & (1 << TX_FULL))) && !(status & (1 << MAX_RT)) && --timeout) {
    7e22:	cc 23       	and	r28, r28
    7e24:	59 f0       	breq	.+22     	; 0x7e3c <nrf24_wait_tx_result+0x2c>
    7e26:	80 fd       	sbrc	r24, 0
    7e28:	09 c0       	rjmp	.+18     	; 0x7e3c <nrf24_wait_tx_result+0x2c>
    7e2a:	60 e6       	ldi	r22, 0x60	; 96
    7e2c:	87 e0       	ldi	r24, 0x07	; 7
		msg_sent = status & (1 << TX_DS);
		_delay_us(10);
	} /* Transmission will end here */
	
	/* Reset status register */
	nrf24_configRegister(STATUS,(1<<RX_DR) | (1<<TX_DS));
    7e2e:	c8 df       	rcall	.-112    	; 0x7dc0 <nrf24_configRegister>
    7e30:	da df       	rcall	.-76     	; 0x7de6 <nrf24_setMode_RX>
	
	/* Switch back to RX mode */
	nrf24_setMode_RX();
    7e32:	81 e0       	ldi	r24, 0x01	; 1
    7e34:	cc 23       	and	r28, r28
    7e36:	79 f0       	breq	.+30     	; 0x7e56 <nrf24_wait_tx_result+0x46>
    7e38:	80 e0       	ldi	r24, 0x00	; 0
    7e3a:	0d c0       	rjmp	.+26     	; 0x7e56 <nrf24_wait_tx_result+0x46>
    7e3c:	84 fd       	sbrc	r24, 4
	 * TX_FULL: Transmission FIFO is full.
	 * MAX_RT: Maximum retries reached. */
	status = nrf24_getStatus();
	uint8_t msg_sent = status & (1 << TX_DS);
	
	while ((!msg_sent || (status & (1 << TX_FULL))) && !(status & (1 << MAX_RT)) && --timeout) {
    7e3e:	f5 cf       	rjmp	.-22     	; 0x7e2a <nrf24_wait_tx_result+0x1a>
    7e40:	01 50       	subi	r16, 0x01	; 1
    7e42:	11 09       	sbc	r17, r1
    7e44:	91 f3       	breq	.-28     	; 0x7e2a <nrf24_wait_tx_result+0x1a>
		status = nrf24_getStatus();
    7e46:	99 df       	rcall	.-206    	; 0x7d7a <nrf24_getStatus>
    7e48:	c8 2f       	mov	r28, r24
		msg_sent = status & (1 << TX_DS);
    7e4a:	c0 72       	andi	r28, 0x20	; 32
    7e4c:	95 e3       	ldi	r25, 0x35	; 53
    7e4e:	9a 95       	dec	r25
    7e50:	f1 f7       	brne	.-4      	; 0x7e4e <nrf24_wait_tx_result+0x3e>
    7e52:	00 00       	nop
    7e54:	e6 cf       	rjmp	.-52     	; 0x7e22 <nrf24_wait_tx_result+0x12>
	/* Finally check if data was sent or if conditions weren't met */
	if(msg_sent)
		return NRF24_MESSAGE_SENT;
	else
		return NRF24_MESSAGE_LOST;
}
    7e56:	cf 91       	pop	r28
    7e58:	1f 91       	pop	r17
    7e5a:	0f 91       	pop	r16
    7e5c:	08 95       	ret

00007e5e <nrf24_getData>:
	nrf24_ce_digitalWrite(HIGH);
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t * data, uint8_t * pkt_len)
{
    7e5e:	cf 92       	push	r12
    7e60:	df 92       	push	r13
    7e62:	ef 92       	push	r14
    7e64:	ff 92       	push	r15
    7e66:	0f 93       	push	r16
    7e68:	1f 93       	push	r17
    7e6a:	cf 93       	push	r28
    7e6c:	7c 01       	movw	r14, r24
	/* Reset Received Data flag bit */
	nrf24_configRegister(STATUS,(1<<RX_DR));
    7e6e:	8b 01       	movw	r16, r22
    7e70:	60 e4       	ldi	r22, 0x40	; 64
    7e72:	87 e0       	ldi	r24, 0x07	; 7

	/* Number of bytes in the RX FIFO */
	*pkt_len = nrf24_payloadLength();
    7e74:	a5 df       	rcall	.-182    	; 0x7dc0 <nrf24_configRegister>
    7e76:	8c df       	rcall	.-232    	; 0x7d90 <nrf24_payloadLength>
    7e78:	f8 01       	movw	r30, r16
	
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    7e7a:	80 83       	st	Z, r24
    7e7c:	80 e0       	ldi	r24, 0x00	; 0

	/* Send cmd to read RX payload */
	spi_exchange(R_RX_PAYLOAD);
    7e7e:	2a df       	rcall	.-428    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7e80:	81 e6       	ldi	r24, 0x61	; 97
	
	/* Read payload */
	for (uint8_t i=0; i<*pkt_len; i++)
    7e82:	a5 d0       	rcall	.+330    	; 0x7fce <spi_exchange>
    7e84:	c0 e0       	ldi	r28, 0x00	; 0
    7e86:	f8 01       	movw	r30, r16
    7e88:	80 81       	ld	r24, Z
	{
		data[i]=spi_exchange(0);
    7e8a:	c8 17       	cp	r28, r24
    7e8c:	48 f4       	brcc	.+18     	; 0x7ea0 <nrf24_getData+0x42>
    7e8e:	67 01       	movw	r12, r14
    7e90:	cc 0e       	add	r12, r28
    7e92:	d1 1c       	adc	r13, r1
    7e94:	80 e0       	ldi	r24, 0x00	; 0
    7e96:	9b d0       	rcall	.+310    	; 0x7fce <spi_exchange>
    7e98:	f6 01       	movw	r30, r12

	/* Send cmd to read RX payload */
	spi_exchange(R_RX_PAYLOAD);
	
	/* Read payload */
	for (uint8_t i=0; i<*pkt_len; i++)
    7e9a:	80 83       	st	Z, r24
    7e9c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		data[i]=spi_exchange(0);
	}
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7e9e:	f3 cf       	rjmp	.-26     	; 0x7e86 <nrf24_getData+0x28>
}
    7ea0:	81 e0       	ldi	r24, 0x01	; 1
    7ea2:	cf 91       	pop	r28
    7ea4:	1f 91       	pop	r17
    7ea6:	0f 91       	pop	r16
    7ea8:	ff 90       	pop	r15
	{
		data[i]=spi_exchange(0);
	}
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7eaa:	ef 90       	pop	r14
    7eac:	df 90       	pop	r13
    7eae:	cf 90       	pop	r12
    7eb0:	11 cf       	rjmp	.-478    	; 0x7cd4 <nrf24_csn_digitalWrite>

00007eb2 <nrf24_setMode_TX>:
}

/* Set chip as transmitter */
void nrf24_setMode_TX()
{
	if(rf24_mode != MODE_TX){
    7eb2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rf24_mode>
    7eb6:	81 30       	cpi	r24, 0x01	; 1
		/* Turn on chip in TX mode*/
		nrf24_configRegister(CONFIG, nrf24_CONFIG | (1<<PWR_UP) | (0<<PRIM_RX) );
    7eb8:	a9 f0       	breq	.+42     	; 0x7ee4 <nrf24_setMode_TX+0x32>
    7eba:	6e e7       	ldi	r22, 0x7E	; 126
    7ebc:	80 e0       	ldi	r24, 0x00	; 0
	
		/* Enable receiver address on pipe 0 for ACKs*/
		nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(0<<ERX_P1));
    7ebe:	80 df       	rcall	.-256    	; 0x7dc0 <nrf24_configRegister>
    7ec0:	61 e0       	ldi	r22, 0x01	; 1
    7ec2:	82 e0       	ldi	r24, 0x02	; 2
    7ec4:	7d df       	rcall	.-262    	; 0x7dc0 <nrf24_configRegister>
	
		/* Flush TX FIFO */
		nrf24_csn_digitalWrite(LOW);
    7ec6:	80 e0       	ldi	r24, 0x00	; 0
    7ec8:	05 df       	rcall	.-502    	; 0x7cd4 <nrf24_csn_digitalWrite>
		spi_exchange(FLUSH_TX);
    7eca:	81 ee       	ldi	r24, 0xE1	; 225
    7ecc:	80 d0       	rcall	.+256    	; 0x7fce <spi_exchange>
    7ece:	81 e0       	ldi	r24, 0x01	; 1
		nrf24_csn_digitalWrite(HIGH);
    7ed0:	01 df       	rcall	.-510    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7ed2:	8f e8       	ldi	r24, 0x8F	; 143
    7ed4:	91 e0       	ldi	r25, 0x01	; 1
    7ed6:	01 97       	sbiw	r24, 0x01	; 1
    7ed8:	f1 f7       	brne	.-4      	; 0x7ed6 <nrf24_setMode_TX+0x24>
    7eda:	00 c0       	rjmp	.+0      	; 0x7edc <nrf24_setMode_TX+0x2a>

#endif /* _UTIL_DELAY_H_ */
    7edc:	00 00       	nop
    7ede:	81 e0       	ldi	r24, 0x01	; 1
    7ee0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rf24_mode>
    7ee4:	08 95       	ret

00007ee6 <nrf24_sendData>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Sends a packet of data with dynamic length */
void nrf24_sendData(uint8_t* data, uint8_t pkt_len)
{
    7ee6:	0f 93       	push	r16
    7ee8:	1f 93       	push	r17
    7eea:	cf 93       	push	r28
    7eec:	df 93       	push	r29
	/* Go to Standby first */
	nrf24_ce_digitalWrite(LOW);
    7eee:	ec 01       	movw	r28, r24
    7ef0:	16 2f       	mov	r17, r22
    7ef2:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Set to transmitter mode */
	nrf24_setMode_TX();
    7ef4:	df de       	rcall	.-578    	; 0x7cb4 <nrf24_ce_digitalWrite>
    7ef6:	dd df       	rcall	.-70     	; 0x7eb2 <nrf24_setMode_TX>

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    7ef8:	80 e0       	ldi	r24, 0x00	; 0
    7efa:	ec de       	rcall	.-552    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7efc:	80 ea       	ldi	r24, 0xA0	; 160

	/* Write cmd to write payload */
	spi_exchange(W_TX_PAYLOAD);
    7efe:	67 d0       	rcall	.+206    	; 0x7fce <spi_exchange>
    7f00:	ce 01       	movw	r24, r28
    7f02:	81 0f       	add	r24, r17
    7f04:	91 1d       	adc	r25, r1
    7f06:	8c 01       	movw	r16, r24
    7f08:	c0 17       	cp	r28, r16
	
	/* Write payload */
	for (uint8_t i=0; i<pkt_len; i++)
    7f0a:	d1 07       	cpc	r29, r17
    7f0c:	19 f0       	breq	.+6      	; 0x7f14 <nrf24_sendData+0x2e>
	{
		spi_exchange(data[i]);
    7f0e:	89 91       	ld	r24, Y+
    7f10:	5e d0       	rcall	.+188    	; 0x7fce <spi_exchange>
    7f12:	fa cf       	rjmp	.-12     	; 0x7f08 <nrf24_sendData+0x22>
    7f14:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    7f16:	de de       	rcall	.-580    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7f18:	81 e0       	ldi	r24, 0x01	; 1
    7f1a:	df 91       	pop	r29

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
    7f1c:	cf 91       	pop	r28
    7f1e:	1f 91       	pop	r17
    7f20:	0f 91       	pop	r16
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
    7f22:	c8 ce       	rjmp	.-624    	; 0x7cb4 <nrf24_ce_digitalWrite>

00007f24 <nrf24_readRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Read byte from nrf24 register */
uint8_t nrf24_readRegister(uint8_t reg)
{
    7f24:	cf 93       	push	r28
	uint8_t data;
	nrf24_csn_digitalWrite(LOW);
    7f26:	c8 2f       	mov	r28, r24
    7f28:	80 e0       	ldi	r24, 0x00	; 0
	spi_exchange(R_REGISTER | (REGISTER_MASK & reg));
    7f2a:	d4 de       	rcall	.-600    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7f2c:	8c 2f       	mov	r24, r28
    7f2e:	8f 71       	andi	r24, 0x1F	; 31
	data=spi_exchange(0);
    7f30:	4e d0       	rcall	.+156    	; 0x7fce <spi_exchange>
    7f32:	80 e0       	ldi	r24, 0x00	; 0
    7f34:	4c d0       	rcall	.+152    	; 0x7fce <spi_exchange>
	nrf24_csn_digitalWrite(HIGH);
    7f36:	c8 2f       	mov	r28, r24
    7f38:	81 e0       	ldi	r24, 0x01	; 1
    7f3a:	cc de       	rcall	.-616    	; 0x7cd4 <nrf24_csn_digitalWrite>
	return data;
}
    7f3c:	8c 2f       	mov	r24, r28
    7f3e:	cf 91       	pop	r28
    7f40:	08 95       	ret

00007f42 <nrf24_rxFifoEmpty>:
}

/* Checks if RX FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
	uint8_t fifoStatus=nrf24_readRegister(FIFO_STATUS);
    7f42:	87 e1       	ldi	r24, 0x17	; 23
    7f44:	ef df       	rcall	.-34     	; 0x7f24 <nrf24_readRegister>
    7f46:	80 95       	com	r24
		return NRF24_DATA_UNAVAILABLE;
	}
	else{
		return NRF24_DATA_AVAILABLE;
	}
}
    7f48:	81 70       	andi	r24, 0x01	; 1
    7f4a:	08 95       	ret

00007f4c <nrf24_dataReady>:
}

/* Checks if data was received or if there is data in the FIFO */
uint8_t nrf24_dataReady()
{
	uint8_t status = nrf24_getStatus();
    7f4c:	16 df       	rcall	.-468    	; 0x7d7a <nrf24_getStatus>
    7f4e:	86 ff       	sbrs	r24, 6
	/* Check if Data Ready flag is set.*/
	/* RX_DR just means data has arrived in the FIFO,
	 * but we still need to verify if there is already
	 * data in the FIFO in the occasions where RX_DR
	 * isn't set. */
	if ( status & (1 << RX_DR) ) {
    7f50:	f8 cf       	rjmp	.-16     	; 0x7f42 <nrf24_rxFifoEmpty>
		return NRF24_DATA_AVAILABLE;
	}
	return nrf24_rxFifoEmpty();
    7f52:	81 e0       	ldi	r24, 0x01	; 1
    7f54:	08 95       	ret

00007f56 <nrf24_config>:
/* Current mode of operation of the rf24 chip */
static volatile uint8_t rf24_mode = MODE_IDLE;

/* Setup the module */
uint8_t nrf24_config(uint8_t *TX_addr, uint8_t *RX_addr)
{
    7f56:	0f 93       	push	r16
    7f58:	1f 93       	push	r17
    7f5a:	cf 93       	push	r28
    7f5c:	df 93       	push	r29
    7f5e:	8c 01       	movw	r16, r24
    7f60:	eb 01       	movw	r28, r22
	/* Set pins as output  */
	NRF24_DDR |= (_BV(NRF24_CE) | _BV(NRF24_CS));
    7f62:	84 b1       	in	r24, 0x04	; 4
    7f64:	85 60       	ori	r24, 0x05	; 5
    7f66:	84 b9       	out	0x04, r24	; 4
	
	/* Initialize pins */
	nrf24_ce_digitalWrite(LOW);
    7f68:	80 e0       	ldi	r24, 0x00	; 0
    7f6a:	a4 de       	rcall	.-696    	; 0x7cb4 <nrf24_ce_digitalWrite>
    7f6c:	81 e0       	ldi	r24, 0x01	; 1
	nrf24_csn_digitalWrite(HIGH);
    7f6e:	b2 de       	rcall	.-668    	; 0x7cd4 <nrf24_csn_digitalWrite>
    7f70:	8f e1       	ldi	r24, 0x1F	; 31
    7f72:	9e e4       	ldi	r25, 0x4E	; 78
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7f74:	01 97       	sbiw	r24, 0x01	; 1
    7f76:	f1 f7       	brne	.-4      	; 0x7f74 <nrf24_config+0x1e>
    7f78:	00 c0       	rjmp	.+0      	; 0x7f7a <nrf24_config+0x24>
    7f7a:	00 00       	nop
    7f7c:	61 e0       	ldi	r22, 0x01	; 1
    7f7e:	83 e0       	ldi	r24, 0x03	; 3
	
	_delay_ms(5); /* Some startup settling time */
	
	/* Address width */
	nrf24_configRegister(SETUP_AW, (NRF24_ADDR_WIDTH-2) << AW); 
    7f80:	1f df       	rcall	.-450    	; 0x7dc0 <nrf24_configRegister>
    7f82:	83 e0       	ldi	r24, 0x03	; 3
    7f84:	cf df       	rcall	.-98     	; 0x7f24 <nrf24_readRegister>
    7f86:	81 30       	cpi	r24, 0x01	; 1
	
	/* Check the register we just configured */
	uint8_t regval = nrf24_readRegister(SETUP_AW);
    7f88:	e1 f4       	brne	.+56     	; 0x7fc2 <nrf24_config+0x6c>
    7f8a:	c8 01       	movw	r24, r16
    7f8c:	c0 de       	rcall	.-640    	; 0x7d0e <nrf24_tx_address>
	if (regval != (NRF24_ADDR_WIDTH-2) << AW)  /* There may be no nRF24 connected */
    7f8e:	ce 01       	movw	r24, r28
    7f90:	a7 de       	rcall	.-690    	; 0x7ce0 <nrf24_rx_address>
		return NRF24_CHIP_DISCONNECTED;

	/* Config addresses */
	nrf24_tx_address(TX_addr);
    7f92:	62 e0       	ldi	r22, 0x02	; 2
    7f94:	85 e0       	ldi	r24, 0x05	; 5
    7f96:	14 df       	rcall	.-472    	; 0x7dc0 <nrf24_configRegister>
	nrf24_rx_address(RX_addr);
    7f98:	63 e0       	ldi	r22, 0x03	; 3
    7f9a:	8c e1       	ldi	r24, 0x1C	; 28
    7f9c:	11 df       	rcall	.-478    	; 0x7dc0 <nrf24_configRegister>
	
	// Set RF channel
	nrf24_configRegister(RF_CH, NRF24_CHANNEL);
    7f9e:	64 e0       	ldi	r22, 0x04	; 4
    7fa0:	8d e1       	ldi	r24, 0x1D	; 29
    7fa2:	0e df       	rcall	.-484    	; 0x7dc0 <nrf24_configRegister>
    7fa4:	66 e0       	ldi	r22, 0x06	; 6

	/* Dynamic payload length for TX & RX (pipes 0 and 1) */
	nrf24_configRegister(DYNPD,(1<<DPL_P0)|(1<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    7fa6:	86 e0       	ldi	r24, 0x06	; 6
    7fa8:	0b df       	rcall	.-490    	; 0x7dc0 <nrf24_configRegister>
    7faa:	63 e0       	ldi	r22, 0x03	; 3
    7fac:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Enable dynamic payload feature */
	nrf24_configRegister(FEATURE, 1 << EN_DPL);
    7fae:	08 df       	rcall	.-496    	; 0x7dc0 <nrf24_configRegister>
    7fb0:	6f e7       	ldi	r22, 0x7F	; 127
    7fb2:	84 e0       	ldi	r24, 0x04	; 4
    7fb4:	05 df       	rcall	.-502    	; 0x7dc0 <nrf24_configRegister>
	
	/* Speed: 250kbps, TX gain: 0dbm */
	nrf24_configRegister(RF_SETUP, (1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH) | (0 << RF_DR_LOW) | (0 << RF_DR_HIGH));
    7fb6:	60 e7       	ldi	r22, 0x70	; 112
    7fb8:	87 e0       	ldi	r24, 0x07	; 7
    7fba:	02 df       	rcall	.-508    	; 0x7dc0 <nrf24_configRegister>
    7fbc:	14 df       	rcall	.-472    	; 0x7de6 <nrf24_setMode_RX>

	/* Enable ACKing on pipes 0 & 1 */
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    7fbe:	80 e0       	ldi	r24, 0x00	; 0
    7fc0:	01 c0       	rjmp	.+2      	; 0x7fc4 <nrf24_config+0x6e>
    7fc2:	81 e0       	ldi	r24, 0x01	; 1
    7fc4:	df 91       	pop	r29

	/* Auto retransmit delay: 2000 us and Up to 15 retransmissions */
	nrf24_configRegister(SETUP_RETR,(0x07<<ARD)|(0x0F<<ARC));
    7fc6:	cf 91       	pop	r28
    7fc8:	1f 91       	pop	r17
    7fca:	0f 91       	pop	r16
    7fcc:	08 95       	ret

00007fce <spi_exchange>:

/* File includes */
#include "spi.h"

uint8_t spi_exchange(uint8_t data) {
    SPDR = data;
    7fce:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    7fd0:	0d b4       	in	r0, 0x2d	; 45
    7fd2:	07 fe       	sbrs	r0, 7
    7fd4:	fd cf       	rjmp	.-6      	; 0x7fd0 <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
    7fd6:	8e b5       	in	r24, 0x2e	; 46
}
    7fd8:	08 95       	ret

00007fda <spi_init>:

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
    7fda:	84 b1       	in	r24, 0x04	; 4
    7fdc:	8e 62       	ori	r24, 0x2E	; 46
    7fde:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO); /* Set MISO as input */
    7fe0:	24 98       	cbi	0x04, 4	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
    7fe2:	80 e5       	ldi	r24, 0x50	; 80
    7fe4:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* Double speed */
    7fe6:	81 e0       	ldi	r24, 0x01	; 1
    7fe8:	8d bd       	out	0x2d, r24	; 45
    7fea:	08 95       	ret
