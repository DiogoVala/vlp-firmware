
RF24_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000cf0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000cf0  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002015  00000000  00000000  00000e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab3  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a12  00000000  00000000  00003933  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028c  00000000  00000000  000045e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ef  00000000  00000000  00004874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00005263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000bf2  00000bf2  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005344  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 0000004b  000000d4  000000d4  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    00000128  00000568  00000568  0000065c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.data_len 00000001  00800126  00800126  00000cf0  2**0
                  ALLOC
 17 .data.tx_addr 00000003  00800120  00000bf6  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .data.rx_addr 00000003  00800123  00000bf9  00000ced  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.nrf24_ce_digitalWrite 00000028  00000b08  00000b08  00000bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.nrf24_csn_digitalWrite 00000014  00000ba0  00000ba0  00000c94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_rx_address 00000038  000009a6  000009a6  00000a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_tx_address 00000068  00000858  00000858  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_getStatus 0000001c  00000b56  00000b56  00000c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_payloadLength 0000003e  00000968  00000968  00000a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_configRegister 0000002a  00000ade  00000ade  00000bd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_setMode_RX 00000030  00000a82  00000a82  00000b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_getData 00000062  000008c0  000008c0  000009b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.nrf24_readRegister 00000026  00000b30  00000b30  00000c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.nrf24_rxFifoEmpty 00000012  00000bb4  00000bb4  00000ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.nrf24_dataReady 00000012  00000bc6  00000bc6  00000cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.nrf24_config 00000094  0000074c  0000074c  00000840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .data.rf24_mode 00000001  00800127  0000011f  00000213  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .text.spi_exchange 0000000c  00000be6  00000be6  00000cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.spi_init 00000016  00000b8a  00000b8a  00000c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.uart_init 00000018  00000b72  00000b72  00000c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.uart_putc 0000000e  00000bd8  00000bd8  00000ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.uart_puts 0000002c  00000ab2  00000ab2  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000046  00000922  00000922  00000a16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000448  00000120  00000120  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000036  00000a16  00000a16  00000b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000078  000007e0  000007e0  000008d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 000000bc  00000690  00000690  00000784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc.prologue 00000038  000009de  000009de  00000ad2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc.prologue 00000036  00000a4c  00000a4c  00000b40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
   8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
   c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  2c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
  64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 20       	and	r0, r1
  6c:	80 01       	movw	r16, r0
  6e:	20 01       	movw	r4, r0
  70:	26 00       	.word	0x0026	; ????
  72:	0b f6       	brvc	.-126    	; 0xfffffff6 <__eeprom_end+0xff7efff6>
  74:	01 26       	eor	r0, r17
  76:	01 27       	eor	r16, r17
  78:	80 01       	movw	r16, r0
  7a:	27 01       	movw	r4, r14
  7c:	28 00       	.word	0x0028	; ????
  7e:	01 1f       	adc	r16, r17

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e8 e6       	ldi	r30, 0x68	; 104
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 b4 02 	call	0x568	; 0x568 <main>
  cc:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

00000bf2 <__bad_interrupt>:
 bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000568 <main>:

uint8_t data[32];
uint8_t data_len=0;

int main(void)
{
 568:	ff 92       	push	r15
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	64 97       	sbiw	r28, 0x14	; 20
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
	uint8_t status;
	uint8_t uart_buffer[20]={};
 582:	fe 01       	movw	r30, r28
 584:	31 96       	adiw	r30, 0x01	; 1
 586:	84 e1       	ldi	r24, 0x14	; 20
 588:	df 01       	movw	r26, r30
 58a:	1d 92       	st	X+, r1
 58c:	8a 95       	dec	r24
 58e:	e9 f7       	brne	.-6      	; 0x58a <main+0x22>
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	a8 95       	wdr
 596:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 59a:	88 61       	ori	r24, 0x18	; 24
 59c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 5a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 5a4:	0f be       	out	0x3f, r0	; 63
	
	wdt_disable();
	uart_init();
 5a6:	0e 94 b9 05 	call	0xb72	; 0xb72 <uart_init>
	
	uart_puts("\x1b[2J\r\n");
 5aa:	64 ed       	ldi	r22, 0xD4	; 212
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts>
	
	spi_init();
 5b4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <spi_init>
	
	status=nrf24_config(tx_addr,rx_addr);
 5b8:	63 e2       	ldi	r22, 0x23	; 35
 5ba:	71 e0       	ldi	r23, 0x01	; 1
 5bc:	80 e2       	ldi	r24, 0x20	; 32
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 a6 03 	call	0x74c	; 0x74c <nrf24_config>
	if(status!=0){
 5c4:	81 11       	cpse	r24, r1
 5c6:	51 c0       	rjmp	.+162    	; 0x66a <main+0x102>
		uart_puts("\r\nNRF24 Not connected!");
		return -1;
	}
		
	uart_puts("\r\nReady to receive.");
 5c8:	62 ef       	ldi	r22, 0xF2	; 242
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts>
	
    while(1)
    {
		while(nrf24_dataReady()==NRF24_DATA_UNAVAILABLE);
 5d2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <nrf24_dataReady>
 5d6:	88 23       	and	r24, r24
 5d8:	e1 f3       	breq	.-8      	; 0x5d2 <main+0x6a>
		nrf24_getData(data, &data_len);
 5da:	66 e2       	ldi	r22, 0x26	; 38
 5dc:	71 e0       	ldi	r23, 0x01	; 1
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <nrf24_getData>
		
		uart_puts("\r\nData ready: ");
 5e6:	66 e0       	ldi	r22, 0x06	; 6
 5e8:	71 e0       	ldi	r23, 0x01	; 1
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts>
		for(uint8_t i=0; i<data_len; i++)
 5f0:	f1 2c       	mov	r15, r1
 5f2:	1e c0       	rjmp	.+60     	; 0x630 <main+0xc8>
		{
			sprintf(uart_buffer, "%c ", data[i]);
 5f4:	ef 2d       	mov	r30, r15
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	e0 50       	subi	r30, 0x00	; 0
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	80 81       	ld	r24, Z
 5fe:	1f 92       	push	r1
 600:	8f 93       	push	r24
 602:	85 e1       	ldi	r24, 0x15	; 21
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	a0 e0       	ldi	r26, 0x00	; 0
 608:	af 93       	push	r26
 60a:	9f 93       	push	r25
 60c:	8f 93       	push	r24
 60e:	8e 01       	movw	r16, r28
 610:	0f 5f       	subi	r16, 0xFF	; 255
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	1f 93       	push	r17
 616:	0f 93       	push	r16
 618:	0e 94 91 04 	call	0x922	; 0x922 <sprintf>
			uart_puts(uart_buffer);
 61c:	b8 01       	movw	r22, r16
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts>
    {
		while(nrf24_dataReady()==NRF24_DATA_UNAVAILABLE);
		nrf24_getData(data, &data_len);
		
		uart_puts("\r\nData ready: ");
		for(uint8_t i=0; i<data_len; i++)
 624:	f3 94       	inc	r15
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <data_len>
 634:	f8 16       	cp	r15, r24
 636:	f0 f2       	brcs	.-68     	; 0x5f4 <main+0x8c>
		{
			sprintf(uart_buffer, "%c ", data[i]);
			uart_puts(uart_buffer);
		}
		sprintf(uart_buffer, " - %d",data_len);
 638:	1f 92       	push	r1
 63a:	8f 93       	push	r24
 63c:	89 e1       	ldi	r24, 0x19	; 25
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	a0 e0       	ldi	r26, 0x00	; 0
 642:	af 93       	push	r26
 644:	9f 93       	push	r25
 646:	8f 93       	push	r24
 648:	8e 01       	movw	r16, r28
 64a:	0f 5f       	subi	r16, 0xFF	; 255
 64c:	1f 4f       	sbci	r17, 0xFF	; 255
 64e:	1f 93       	push	r17
 650:	0f 93       	push	r16
 652:	0e 94 91 04 	call	0x922	; 0x922 <sprintf>
		uart_puts(uart_buffer);
 656:	b8 01       	movw	r22, r16
 658:	80 e8       	ldi	r24, 0x80	; 128
 65a:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts>
		
    }
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	b4 cf       	rjmp	.-152    	; 0x5d2 <main+0x6a>
	
	spi_init();
	
	status=nrf24_config(tx_addr,rx_addr);
	if(status!=0){
		uart_puts("\r\nNRF24 Not connected!");
 66a:	6b ed       	ldi	r22, 0xDB	; 219
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts>
		}
		sprintf(uart_buffer, " - %d",data_len);
		uart_puts(uart_buffer);
		
    }
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	9f ef       	ldi	r25, 0xFF	; 255
 678:	64 96       	adiw	r28, 0x14	; 20
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	ff 90       	pop	r15
 68e:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

00000b08 <nrf24_ce_digitalWrite>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 b08:	88 23       	and	r24, r24
 b0a:	41 f0       	breq	.+16     	; 0xb1c <nrf24_ce_digitalWrite+0x14>
 b0c:	85 b1       	in	r24, 0x05	; 5
 b0e:	81 60       	ori	r24, 0x01	; 1
 b10:	85 b9       	out	0x05, r24	; 5
 b12:	85 e3       	ldi	r24, 0x35	; 53
 b14:	8a 95       	dec	r24
 b16:	f1 f7       	brne	.-4      	; 0xb14 <nrf24_ce_digitalWrite+0xc>
 b18:	00 00       	nop
 b1a:	08 95       	ret
 b1c:	8f e1       	ldi	r24, 0x1F	; 31
 b1e:	93 e0       	ldi	r25, 0x03	; 3
 b20:	01 97       	sbiw	r24, 0x01	; 1
 b22:	f1 f7       	brne	.-4      	; 0xb20 <nrf24_ce_digitalWrite+0x18>
 b24:	00 c0       	rjmp	.+0      	; 0xb26 <nrf24_ce_digitalWrite+0x1e>
 b26:	00 00       	nop
 b28:	85 b1       	in	r24, 0x05	; 5
 b2a:	8e 7f       	andi	r24, 0xFE	; 254
 b2c:	85 b9       	out	0x05, r24	; 5
 b2e:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000ba0 <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 ba0:	88 23       	and	r24, r24
 ba2:	21 f0       	breq	.+8      	; 0xbac <nrf24_csn_digitalWrite+0xc>
		set_bit(NRF24_PORT, NRF24_CS);
 ba4:	85 b1       	in	r24, 0x05	; 5
 ba6:	84 60       	ori	r24, 0x04	; 4
 ba8:	85 b9       	out	0x05, r24	; 5
 baa:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
 bac:	85 b1       	in	r24, 0x05	; 5
 bae:	8b 7f       	andi	r24, 0xFB	; 251
 bb0:	85 b9       	out	0x05, r24	; 5
 bb2:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

000009a6 <nrf24_rx_address>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 9a6:	0f 93       	push	r16
 9a8:	1f 93       	push	r17
 9aa:	cf 93       	push	r28
 9ac:	8c 01       	movw	r16, r24
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 9b4:	8b e2       	ldi	r24, 0x2B	; 43
 9b6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 9ba:	c0 e0       	ldi	r28, 0x00	; 0
 9bc:	07 c0       	rjmp	.+14     	; 0x9cc <nrf24_rx_address+0x26>
 9be:	f8 01       	movw	r30, r16
 9c0:	ec 0f       	add	r30, r28
 9c2:	f1 1d       	adc	r31, r1
 9c4:	80 81       	ld	r24, Z
 9c6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 9ca:	cf 5f       	subi	r28, 0xFF	; 255
 9cc:	c3 30       	cpi	r28, 0x03	; 3
 9ce:	b8 f3       	brcs	.-18     	; 0x9be <nrf24_rx_address+0x18>
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 9d6:	cf 91       	pop	r28
 9d8:	1f 91       	pop	r17
 9da:	0f 91       	pop	r16
 9dc:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

00000858 <nrf24_tx_address>:
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	8c 01       	movw	r16, r24
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 866:	80 e3       	ldi	r24, 0x30	; 48
 868:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 86c:	c0 e0       	ldi	r28, 0x00	; 0
 86e:	07 c0       	rjmp	.+14     	; 0x87e <nrf24_tx_address+0x26>
 870:	f8 01       	movw	r30, r16
 872:	ec 0f       	add	r30, r28
 874:	f1 1d       	adc	r31, r1
 876:	80 81       	ld	r24, Z
 878:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 87c:	cf 5f       	subi	r28, 0xFF	; 255
 87e:	c3 30       	cpi	r28, 0x03	; 3
 880:	b8 f3       	brcs	.-18     	; 0x870 <nrf24_tx_address+0x18>
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 888:	85 e3       	ldi	r24, 0x35	; 53
 88a:	8a 95       	dec	r24
 88c:	f1 f7       	brne	.-4      	; 0x88a <nrf24_tx_address+0x32>
 88e:	00 00       	nop
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 896:	8a e2       	ldi	r24, 0x2A	; 42
 898:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 89c:	c0 e0       	ldi	r28, 0x00	; 0
 89e:	07 c0       	rjmp	.+14     	; 0x8ae <nrf24_tx_address+0x56>
 8a0:	f8 01       	movw	r30, r16
 8a2:	ec 0f       	add	r30, r28
 8a4:	f1 1d       	adc	r31, r1
 8a6:	80 81       	ld	r24, Z
 8a8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 8ac:	cf 5f       	subi	r28, 0xFF	; 255
 8ae:	c3 30       	cpi	r28, 0x03	; 3
 8b0:	b8 f3       	brcs	.-18     	; 0x8a0 <nrf24_tx_address+0x48>
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	0f 91       	pop	r16
 8be:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00000b56 <nrf24_getStatus>:
	}
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
 b56:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 b64:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
	return rv;
}
 b6c:	8c 2f       	mov	r24, r28
 b6e:	cf 91       	pop	r28
 b70:	08 95       	ret

Disassembly of section .text.nrf24_payloadLength:

00000968 <nrf24_payloadLength>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 968:	cf 93       	push	r28
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 970:	80 e6       	ldi	r24, 0x60	; 96
 972:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 97c:	c8 2f       	mov	r28, r24
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	8c 0f       	add	r24, r28
 988:	80 32       	cpi	r24, 0x20	; 32
 98a:	50 f0       	brcs	.+20     	; 0x9a0 <nrf24_payloadLength+0x38>
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 992:	82 ee       	ldi	r24, 0xE2	; 226
 994:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 99e:	c0 e0       	ldi	r28, 0x00	; 0
 9a0:	8c 2f       	mov	r24, r28
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

00000ade <nrf24_configRegister>:
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	c8 2f       	mov	r28, r24
 ae4:	d6 2f       	mov	r29, r22
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 aec:	8c 2f       	mov	r24, r28
 aee:	8f 71       	andi	r24, 0x1F	; 31
 af0:	80 62       	ori	r24, 0x20	; 32
 af2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 af6:	8d 2f       	mov	r24, r29
 af8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	08 95       	ret

Disassembly of section .text.nrf24_setMode_RX:

00000a82 <nrf24_setMode_RX>:
 a82:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rf24_mode>
 a86:	88 23       	and	r24, r24
 a88:	99 f0       	breq	.+38     	; 0xab0 <nrf24_setMode_RX+0x2e>
 a8a:	6f e7       	ldi	r22, 0x7F	; 127
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 a92:	62 e0       	ldi	r22, 0x02	; 2
 a94:	82 e0       	ldi	r24, 0x02	; 2
 a96:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 a9a:	8f e8       	ldi	r24, 0x8F	; 143
 a9c:	91 e0       	ldi	r25, 0x01	; 1
 a9e:	01 97       	sbiw	r24, 0x01	; 1
 aa0:	f1 f7       	brne	.-4      	; 0xa9e <nrf24_setMode_RX+0x1c>
 aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <nrf24_setMode_RX+0x22>
 aa4:	00 00       	nop
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	0e 94 84 05 	call	0xb08	; 0xb08 <nrf24_ce_digitalWrite>
 aac:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <rf24_mode>
 ab0:	08 95       	ret

Disassembly of section .text.nrf24_getData:

000008c0 <nrf24_getData>:
 8c0:	cf 92       	push	r12
 8c2:	df 92       	push	r13
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	0f 93       	push	r16
 8ca:	1f 93       	push	r17
 8cc:	cf 93       	push	r28
 8ce:	6c 01       	movw	r12, r24
 8d0:	7b 01       	movw	r14, r22
 8d2:	60 e4       	ldi	r22, 0x40	; 64
 8d4:	87 e0       	ldi	r24, 0x07	; 7
 8d6:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 8da:	0e 94 b4 04 	call	0x968	; 0x968 <nrf24_payloadLength>
 8de:	f7 01       	movw	r30, r14
 8e0:	80 83       	st	Z, r24
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 8e8:	81 e6       	ldi	r24, 0x61	; 97
 8ea:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 8ee:	c0 e0       	ldi	r28, 0x00	; 0
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
 8f2:	86 01       	movw	r16, r12
 8f4:	0c 0f       	add	r16, r28
 8f6:	11 1d       	adc	r17, r1
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 8fe:	f8 01       	movw	r30, r16
 900:	80 83       	st	Z, r24
 902:	cf 5f       	subi	r28, 0xFF	; 255
 904:	f7 01       	movw	r30, r14
 906:	80 81       	ld	r24, Z
 908:	c8 17       	cp	r28, r24
 90a:	98 f3       	brcs	.-26     	; 0x8f2 <nrf24_getData+0x32>
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	ff 90       	pop	r15
 91a:	ef 90       	pop	r14
 91c:	df 90       	pop	r13
 91e:	cf 90       	pop	r12
 920:	08 95       	ret

Disassembly of section .text.nrf24_readRegister:

00000b30 <nrf24_readRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Read byte from nrf24 register */
uint8_t nrf24_readRegister(uint8_t reg)
{
 b30:	cf 93       	push	r28
 b32:	c8 2f       	mov	r28, r24
	uint8_t data;
	nrf24_csn_digitalWrite(LOW);
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
	spi_exchange(R_REGISTER | (REGISTER_MASK & reg));
 b3a:	8c 2f       	mov	r24, r28
 b3c:	8f 71       	andi	r24, 0x1F	; 31
 b3e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
	data=spi_exchange(0);
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_exchange>
 b48:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
	return data;
}
 b50:	8c 2f       	mov	r24, r28
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

Disassembly of section .text.nrf24_rxFifoEmpty:

00000bb4 <nrf24_rxFifoEmpty>:
}

/* Checks if RX FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
	uint8_t fifoStatus=nrf24_readRegister(FIFO_STATUS);
 bb4:	87 e1       	ldi	r24, 0x17	; 23
 bb6:	0e 94 98 05 	call	0xb30	; 0xb30 <nrf24_readRegister>

	if(fifoStatus & (1 << RX_EMPTY)){
 bba:	80 ff       	sbrs	r24, 0
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <nrf24_rxFifoEmpty+0xe>
		//uart_puts("\r\nFifo empty");
		return NRF24_DATA_UNAVAILABLE;
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	08 95       	ret
	}
	else{
		//uart_puts("\r\nFifo has data");
		return NRF24_DATA_AVAILABLE;
 bc2:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 bc4:	08 95       	ret

Disassembly of section .text.nrf24_dataReady:

00000bc6 <nrf24_dataReady>:
}

/* Checks if data was received or if there is data in the FIFO */
uint8_t nrf24_dataReady()
{
	uint8_t status = nrf24_getStatus();
 bc6:	0e 94 ab 05 	call	0xb56	; 0xb56 <nrf24_getStatus>
	/* Check if Data Ready flag is set.*/
	/* RX_DR just means data has arrived in the FIFO,
	 * but we still need to verify if there is already
	 * data in the FIFO in the occasions where RX_DR
	 * isn't set. */
	if ( status & (1 << RX_DR) ) {
 bca:	86 fd       	sbrc	r24, 6
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <nrf24_dataReady+0xe>
		//uart_puts("\r\nData received");
		return NRF24_DATA_AVAILABLE;
	}
	return nrf24_rxFifoEmpty();
 bce:	0e 94 da 05 	call	0xbb4	; 0xbb4 <nrf24_rxFifoEmpty>
 bd2:	08 95       	ret
	 * but we still need to verify if there is already
	 * data in the FIFO in the occasions where RX_DR
	 * isn't set. */
	if ( status & (1 << RX_DR) ) {
		//uart_puts("\r\nData received");
		return NRF24_DATA_AVAILABLE;
 bd4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return nrf24_rxFifoEmpty();
}
 bd6:	08 95       	ret

Disassembly of section .text.nrf24_config:

0000074c <nrf24_config>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	8c 01       	movw	r16, r24
 756:	eb 01       	movw	r28, r22
 758:	84 b1       	in	r24, 0x04	; 4
 75a:	85 60       	ori	r24, 0x05	; 5
 75c:	84 b9       	out	0x04, r24	; 4
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 84 05 	call	0xb08	; 0xb08 <nrf24_ce_digitalWrite>
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	0e 94 d0 05 	call	0xba0	; 0xba0 <nrf24_csn_digitalWrite>
 76a:	8f e1       	ldi	r24, 0x1F	; 31
 76c:	9e e4       	ldi	r25, 0x4E	; 78
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <nrf24_config+0x22>
 772:	00 c0       	rjmp	.+0      	; 0x774 <nrf24_config+0x28>
 774:	00 00       	nop
 776:	61 e0       	ldi	r22, 0x01	; 1
 778:	83 e0       	ldi	r24, 0x03	; 3
 77a:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0e 94 98 05 	call	0xb30	; 0xb30 <nrf24_readRegister>
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	31 f5       	brne	.+76     	; 0x7d4 <nrf24_config+0x88>
 788:	c8 01       	movw	r24, r16
 78a:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24_tx_address>
 78e:	ce 01       	movw	r24, r28
 790:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <nrf24_rx_address>
 794:	62 e0       	ldi	r22, 0x02	; 2
 796:	85 e0       	ldi	r24, 0x05	; 5
 798:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 79c:	63 e0       	ldi	r22, 0x03	; 3
 79e:	8c e1       	ldi	r24, 0x1C	; 28
 7a0:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 7a4:	64 e0       	ldi	r22, 0x04	; 4
 7a6:	8d e1       	ldi	r24, 0x1D	; 29
 7a8:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 7ac:	6e e0       	ldi	r22, 0x0E	; 14
 7ae:	86 e0       	ldi	r24, 0x06	; 6
 7b0:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 7b4:	63 e0       	ldi	r22, 0x03	; 3
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 7bc:	6f e7       	ldi	r22, 0x7F	; 127
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 7c4:	60 e7       	ldi	r22, 0x70	; 112
 7c6:	87 e0       	ldi	r24, 0x07	; 7
 7c8:	0e 94 6f 05 	call	0xade	; 0xade <nrf24_configRegister>
 7cc:	0e 94 41 05 	call	0xa82	; 0xa82 <nrf24_setMode_RX>
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <nrf24_config+0x8a>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	1f 91       	pop	r17
 7dc:	0f 91       	pop	r16
 7de:	08 95       	ret

Disassembly of section .text.spi_exchange:

00000be6 <spi_exchange>:
#include "uart.h"
#include "spi.h"

/* Send one byte over SPI */
uint8_t spi_exchange(uint8_t data) {
    SPDR = data;
 be6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 be8:	0d b4       	in	r0, 0x2d	; 45
 bea:	07 fe       	sbrs	r0, 7
 bec:	fd cf       	rjmp	.-6      	; 0xbe8 <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 bee:	8e b5       	in	r24, 0x2e	; 46
}
 bf0:	08 95       	ret

Disassembly of section .text.spi_init:

00000b8a <spi_init>:

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 b8a:	84 b1       	in	r24, 0x04	; 4
 b8c:	8e 62       	ori	r24, 0x2E	; 46
 b8e:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO); /* Set MISO as input */
 b90:	84 b1       	in	r24, 0x04	; 4
 b92:	8f 7e       	andi	r24, 0xEF	; 239
 b94:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 b96:	80 e5       	ldi	r24, 0x50	; 80
 b98:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* Double speed */
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	8d bd       	out	0x2d, r24	; 45
 b9e:	08 95       	ret

Disassembly of section .text.uart_init:

00000b72 <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 b72:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 b76:	87 e6       	ldi	r24, 0x67	; 103
 b78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 b7c:	86 e0       	ldi	r24, 0x06	; 6
 b7e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 b82:	88 e1       	ldi	r24, 0x18	; 24
 b84:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 b88:	08 95       	ret

Disassembly of section .text.uart_putc:

00000bd8 <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 bd8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 bdc:	95 ff       	sbrs	r25, 5
 bde:	fc cf       	rjmp	.-8      	; 0xbd8 <uart_putc>
	UDR0 = DataByte;
 be0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 be4:	08 95       	ret

Disassembly of section .text.uart_puts:

00000ab2 <uart_puts>:
}

void uart_puts(const char *s )
{
 ab2:	cf 92       	push	r12
 ab4:	df 92       	push	r13
 ab6:	ef 92       	push	r14
 ab8:	6b 01       	movw	r12, r22
 aba:	e8 2e       	mov	r14, r24
	while (*s)
 abc:	06 c0       	rjmp	.+12     	; 0xaca <uart_puts+0x18>
	uart_putc(*s++);
 abe:	9f ef       	ldi	r25, 0xFF	; 255
 ac0:	c9 1a       	sub	r12, r25
 ac2:	d9 0a       	sbc	r13, r25
 ac4:	e9 0a       	sbc	r14, r25
 ac6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 aca:	f6 01       	movw	r30, r12
 acc:	84 91       	lpm	r24, Z
 ace:	e7 fc       	sbrc	r14, 7
 ad0:	80 81       	ld	r24, Z
 ad2:	81 11       	cpse	r24, r1
 ad4:	f4 cf       	rjmp	.-24     	; 0xabe <uart_puts+0xc>
	uart_putc(*s++);

}
 ad6:	ef 90       	pop	r14
 ad8:	df 90       	pop	r13
 ada:	cf 90       	pop	r12
 adc:	08 95       	ret

Disassembly of section .text.avrlibc:

00000922 <sprintf>:
 922:	af e0       	ldi	r26, 0x0F	; 15
 924:	b0 e0       	ldi	r27, 0x00	; 0
 926:	e7 e9       	ldi	r30, 0x97	; 151
 928:	f4 e0       	ldi	r31, 0x04	; 4
 92a:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__prologue_saves__+0x1c>
 92e:	0e 89       	ldd	r16, Y+22	; 0x16
 930:	1f 89       	ldd	r17, Y+23	; 0x17
 932:	86 e0       	ldi	r24, 0x06	; 6
 934:	8d 83       	std	Y+5, r24	; 0x05
 936:	1a 83       	std	Y+2, r17	; 0x02
 938:	09 83       	std	Y+1, r16	; 0x01
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	9f e7       	ldi	r25, 0x7F	; 127
 93e:	9f 83       	std	Y+7, r25	; 0x07
 940:	8e 83       	std	Y+6, r24	; 0x06
 942:	9e 01       	movw	r18, r28
 944:	25 5e       	subi	r18, 0xE5	; 229
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	48 8d       	ldd	r20, Y+24	; 0x18
 94a:	59 8d       	ldd	r21, Y+25	; 0x19
 94c:	6a 8d       	ldd	r22, Y+26	; 0x1a
 94e:	ce 01       	movw	r24, r28
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	0e 94 90 00 	call	0x120	; 0x120 <vfprintf>
 956:	e8 85       	ldd	r30, Y+8	; 0x08
 958:	f9 85       	ldd	r31, Y+9	; 0x09
 95a:	e0 0f       	add	r30, r16
 95c:	f1 1f       	adc	r31, r17
 95e:	10 82       	st	Z, r1
 960:	2f 96       	adiw	r28, 0x0f	; 15
 962:	e4 e0       	ldi	r30, 0x04	; 4
 964:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000120 <vfprintf>:
 120:	2f 92       	push	r2
 122:	3f 92       	push	r3
 124:	4f 92       	push	r4
 126:	6f 92       	push	r6
 128:	7f 92       	push	r7
 12a:	8f 92       	push	r8
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	62 97       	sbiw	r28, 0x12	; 18
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	6c 01       	movw	r12, r24
 154:	3a 01       	movw	r6, r20
 156:	86 2e       	mov	r8, r22
 158:	79 01       	movw	r14, r18
 15a:	fc 01       	movw	r30, r24
 15c:	10 86       	std	Z+8, r1	; 0x08
 15e:	17 82       	std	Z+7, r1	; 0x07
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	81 ff       	sbrs	r24, 1
 164:	e7 c1       	rjmp	.+974    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 166:	9e 01       	movw	r18, r28
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	3d 87       	std	Y+13, r19	; 0x0d
 16e:	2c 87       	std	Y+12, r18	; 0x0c
 170:	c9 01       	movw	r24, r18
 172:	a0 e8       	ldi	r26, 0x80	; 128
 174:	88 8b       	std	Y+16, r24	; 0x10
 176:	99 8b       	std	Y+17, r25	; 0x11
 178:	aa 8b       	std	Y+18, r26	; 0x12
 17a:	9f e3       	ldi	r25, 0x3F	; 63
 17c:	99 2e       	mov	r9, r25
 17e:	f3 01       	movw	r30, r6
 180:	84 91       	lpm	r24, Z
 182:	87 fc       	sbrc	r8, 7
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	09 f4       	brne	.+2      	; 0x18c <vfprintf+0x6c>
 18a:	d0 c1       	rjmp	.+928    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 18c:	48 2d       	mov	r20, r8
 18e:	93 01       	movw	r18, r6
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	4f 4f       	sbci	r20, 0xFF	; 255
 196:	85 32       	cpi	r24, 0x25	; 37
 198:	19 f0       	breq	.+6      	; 0x1a0 <vfprintf+0x80>
 19a:	39 01       	movw	r6, r18
 19c:	84 2e       	mov	r8, r20
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <vfprintf+0x94>
 1a0:	f9 01       	movw	r30, r18
 1a2:	84 91       	lpm	r24, Z
 1a4:	47 fd       	sbrc	r20, 7
 1a6:	80 81       	ld	r24, Z
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	69 0e       	add	r6, r25
 1ac:	71 1c       	adc	r7, r1
 1ae:	81 1c       	adc	r8, r1
 1b0:	85 32       	cpi	r24, 0x25	; 37
 1b2:	29 f4       	brne	.+10     	; 0x1be <vfprintf+0x9e>
 1b4:	b6 01       	movw	r22, r12
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 1bc:	e0 cf       	rjmp	.-64     	; 0x17e <vfprintf+0x5e>
 1be:	b1 2c       	mov	r11, r1
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	10 32       	cpi	r17, 0x20	; 32
 1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <vfprintf+0xd0>
 1c8:	8b 32       	cpi	r24, 0x2B	; 43
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <vfprintf+0xc6>
 1cc:	30 f4       	brcc	.+12     	; 0x1da <vfprintf+0xba>
 1ce:	80 32       	cpi	r24, 0x20	; 32
 1d0:	59 f0       	breq	.+22     	; 0x1e8 <vfprintf+0xc8>
 1d2:	83 32       	cpi	r24, 0x23	; 35
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <vfprintf+0xd0>
 1d6:	10 61       	ori	r17, 0x10	; 16
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <vfprintf+0x112>
 1da:	8d 32       	cpi	r24, 0x2D	; 45
 1dc:	39 f0       	breq	.+14     	; 0x1ec <vfprintf+0xcc>
 1de:	80 33       	cpi	r24, 0x30	; 48
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <vfprintf+0xd0>
 1e2:	11 60       	ori	r17, 0x01	; 1
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <vfprintf+0x112>
 1e6:	12 60       	ori	r17, 0x02	; 2
 1e8:	14 60       	ori	r17, 0x04	; 4
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <vfprintf+0x112>
 1ec:	18 60       	ori	r17, 0x08	; 8
 1ee:	21 c0       	rjmp	.+66     	; 0x232 <vfprintf+0x112>
 1f0:	17 fd       	sbrc	r17, 7
 1f2:	29 c0       	rjmp	.+82     	; 0x246 <vfprintf+0x126>
 1f4:	90 ed       	ldi	r25, 0xD0	; 208
 1f6:	98 0f       	add	r25, r24
 1f8:	9a 30       	cpi	r25, 0x0A	; 10
 1fa:	78 f4       	brcc	.+30     	; 0x21a <vfprintf+0xfa>
 1fc:	16 ff       	sbrs	r17, 6
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <vfprintf+0xec>
 200:	aa e0       	ldi	r26, 0x0A	; 10
 202:	ba 9e       	mul	r11, r26
 204:	90 0d       	add	r25, r0
 206:	11 24       	eor	r1, r1
 208:	b9 2e       	mov	r11, r25
 20a:	13 c0       	rjmp	.+38     	; 0x232 <vfprintf+0x112>
 20c:	ea e0       	ldi	r30, 0x0A	; 10
 20e:	0e 9f       	mul	r16, r30
 210:	90 0d       	add	r25, r0
 212:	11 24       	eor	r1, r1
 214:	09 2f       	mov	r16, r25
 216:	10 62       	ori	r17, 0x20	; 32
 218:	0c c0       	rjmp	.+24     	; 0x232 <vfprintf+0x112>
 21a:	8e 32       	cpi	r24, 0x2E	; 46
 21c:	21 f4       	brne	.+8      	; 0x226 <vfprintf+0x106>
 21e:	16 fd       	sbrc	r17, 6
 220:	85 c1       	rjmp	.+778    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 222:	10 64       	ori	r17, 0x40	; 64
 224:	06 c0       	rjmp	.+12     	; 0x232 <vfprintf+0x112>
 226:	8c 36       	cpi	r24, 0x6C	; 108
 228:	11 f4       	brne	.+4      	; 0x22e <vfprintf+0x10e>
 22a:	10 68       	ori	r17, 0x80	; 128
 22c:	02 c0       	rjmp	.+4      	; 0x232 <vfprintf+0x112>
 22e:	88 36       	cpi	r24, 0x68	; 104
 230:	51 f4       	brne	.+20     	; 0x246 <vfprintf+0x126>
 232:	f3 01       	movw	r30, r6
 234:	84 91       	lpm	r24, Z
 236:	87 fc       	sbrc	r8, 7
 238:	80 81       	ld	r24, Z
 23a:	ff ef       	ldi	r31, 0xFF	; 255
 23c:	6f 1a       	sub	r6, r31
 23e:	7f 0a       	sbc	r7, r31
 240:	8f 0a       	sbc	r8, r31
 242:	81 11       	cpse	r24, r1
 244:	bf cf       	rjmp	.-130    	; 0x1c4 <vfprintf+0xa4>
 246:	98 2f       	mov	r25, r24
 248:	9f 7d       	andi	r25, 0xDF	; 223
 24a:	95 54       	subi	r25, 0x45	; 69
 24c:	93 30       	cpi	r25, 0x03	; 3
 24e:	28 f4       	brcc	.+10     	; 0x25a <vfprintf+0x13a>
 250:	24 e0       	ldi	r18, 0x04	; 4
 252:	e2 0e       	add	r14, r18
 254:	f1 1c       	adc	r15, r1
 256:	99 82       	std	Y+1, r9	; 0x01
 258:	0f c0       	rjmp	.+30     	; 0x278 <vfprintf+0x158>
 25a:	83 36       	cpi	r24, 0x63	; 99
 25c:	31 f0       	breq	.+12     	; 0x26a <vfprintf+0x14a>
 25e:	83 37       	cpi	r24, 0x73	; 115
 260:	91 f0       	breq	.+36     	; 0x286 <vfprintf+0x166>
 262:	83 35       	cpi	r24, 0x53	; 83
 264:	09 f0       	breq	.+2      	; 0x268 <vfprintf+0x148>
 266:	63 c0       	rjmp	.+198    	; 0x32e <vfprintf+0x20e>
 268:	27 c0       	rjmp	.+78     	; 0x2b8 <vfprintf+0x198>
 26a:	f7 01       	movw	r30, r14
 26c:	80 81       	ld	r24, Z
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	97 01       	movw	r18, r14
 272:	2e 5f       	subi	r18, 0xFE	; 254
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	79 01       	movw	r14, r18
 278:	28 88       	ldd	r2, Y+16	; 0x10
 27a:	39 88       	ldd	r3, Y+17	; 0x11
 27c:	4a 88       	ldd	r4, Y+18	; 0x12
 27e:	aa 24       	eor	r10, r10
 280:	a3 94       	inc	r10
 282:	b1 2c       	mov	r11, r1
 284:	17 c0       	rjmp	.+46     	; 0x2b4 <vfprintf+0x194>
 286:	a7 01       	movw	r20, r14
 288:	4d 5f       	subi	r20, 0xFD	; 253
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
 28c:	5f 87       	std	Y+15, r21	; 0x0f
 28e:	4e 87       	std	Y+14, r20	; 0x0e
 290:	f7 01       	movw	r30, r14
 292:	20 80       	ld	r2, Z
 294:	31 80       	ldd	r3, Z+1	; 0x01
 296:	42 80       	ldd	r4, Z+2	; 0x02
 298:	16 ff       	sbrs	r17, 6
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <vfprintf+0x182>
 29c:	4b 2d       	mov	r20, r11
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <vfprintf+0x186>
 2a2:	4f ef       	ldi	r20, 0xFF	; 255
 2a4:	5f ef       	ldi	r21, 0xFF	; 255
 2a6:	84 2d       	mov	r24, r4
 2a8:	b1 01       	movw	r22, r2
 2aa:	0e 94 0b 05 	call	0xa16	; 0xa16 <strnlen>
 2ae:	5c 01       	movw	r10, r24
 2b0:	ee 84       	ldd	r14, Y+14	; 0x0e
 2b2:	ff 84       	ldd	r15, Y+15	; 0x0f
 2b4:	1f 77       	andi	r17, 0x7F	; 127
 2b6:	18 c0       	rjmp	.+48     	; 0x2e8 <vfprintf+0x1c8>
 2b8:	97 01       	movw	r18, r14
 2ba:	2d 5f       	subi	r18, 0xFD	; 253
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	3f 87       	std	Y+15, r19	; 0x0f
 2c0:	2e 87       	std	Y+14, r18	; 0x0e
 2c2:	f7 01       	movw	r30, r14
 2c4:	20 80       	ld	r2, Z
 2c6:	31 80       	ldd	r3, Z+1	; 0x01
 2c8:	42 80       	ldd	r4, Z+2	; 0x02
 2ca:	16 ff       	sbrs	r17, 6
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <vfprintf+0x1b4>
 2ce:	4b 2d       	mov	r20, r11
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <vfprintf+0x1b8>
 2d4:	4f ef       	ldi	r20, 0xFF	; 255
 2d6:	5f ef       	ldi	r21, 0xFF	; 255
 2d8:	84 2d       	mov	r24, r4
 2da:	b1 01       	movw	r22, r2
 2dc:	0e 94 0b 05 	call	0xa16	; 0xa16 <strnlen>
 2e0:	5c 01       	movw	r10, r24
 2e2:	10 68       	ori	r17, 0x80	; 128
 2e4:	ee 84       	ldd	r14, Y+14	; 0x0e
 2e6:	ff 84       	ldd	r15, Y+15	; 0x0f
 2e8:	13 fd       	sbrc	r17, 3
 2ea:	1d c0       	rjmp	.+58     	; 0x326 <vfprintf+0x206>
 2ec:	80 2f       	mov	r24, r16
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	a8 16       	cp	r10, r24
 2f2:	b9 06       	cpc	r11, r25
 2f4:	c0 f4       	brcc	.+48     	; 0x326 <vfprintf+0x206>
 2f6:	b6 01       	movw	r22, r12
 2f8:	80 e2       	ldi	r24, 0x20	; 32
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 300:	01 50       	subi	r16, 0x01	; 1
 302:	f4 cf       	rjmp	.-24     	; 0x2ec <vfprintf+0x1cc>
 304:	f1 01       	movw	r30, r2
 306:	84 91       	lpm	r24, Z
 308:	47 fc       	sbrc	r4, 7
 30a:	80 81       	ld	r24, Z
 30c:	ff ef       	ldi	r31, 0xFF	; 255
 30e:	2f 1a       	sub	r2, r31
 310:	3f 0a       	sbc	r3, r31
 312:	4f 0a       	sbc	r4, r31
 314:	b6 01       	movw	r22, r12
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 31c:	01 11       	cpse	r16, r1
 31e:	01 50       	subi	r16, 0x01	; 1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	a2 1a       	sub	r10, r18
 324:	b1 08       	sbc	r11, r1
 326:	a1 14       	cp	r10, r1
 328:	b1 04       	cpc	r11, r1
 32a:	61 f7       	brne	.-40     	; 0x304 <vfprintf+0x1e4>
 32c:	f5 c0       	rjmp	.+490    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 32e:	84 36       	cpi	r24, 0x64	; 100
 330:	11 f0       	breq	.+4      	; 0x336 <vfprintf+0x216>
 332:	89 36       	cpi	r24, 0x69	; 105
 334:	71 f5       	brne	.+92     	; 0x392 <vfprintf+0x272>
 336:	f7 01       	movw	r30, r14
 338:	17 ff       	sbrs	r17, 7
 33a:	08 c0       	rjmp	.+16     	; 0x34c <vfprintf+0x22c>
 33c:	60 81       	ld	r22, Z
 33e:	71 81       	ldd	r23, Z+1	; 0x01
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	93 81       	ldd	r25, Z+3	; 0x03
 344:	97 01       	movw	r18, r14
 346:	2c 5f       	subi	r18, 0xFC	; 252
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	09 c0       	rjmp	.+18     	; 0x35e <vfprintf+0x23e>
 34c:	60 81       	ld	r22, Z
 34e:	71 81       	ldd	r23, Z+1	; 0x01
 350:	07 2e       	mov	r0, r23
 352:	00 0c       	add	r0, r0
 354:	88 0b       	sbc	r24, r24
 356:	99 0b       	sbc	r25, r25
 358:	97 01       	movw	r18, r14
 35a:	2e 5f       	subi	r18, 0xFE	; 254
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	79 01       	movw	r14, r18
 360:	1f 76       	andi	r17, 0x6F	; 111
 362:	31 2e       	mov	r3, r17
 364:	97 ff       	sbrs	r25, 7
 366:	0a c0       	rjmp	.+20     	; 0x37c <vfprintf+0x25c>
 368:	90 95       	com	r25
 36a:	80 95       	com	r24
 36c:	70 95       	com	r23
 36e:	61 95       	neg	r22
 370:	7f 4f       	sbci	r23, 0xFF	; 255
 372:	8f 4f       	sbci	r24, 0xFF	; 255
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	31 2f       	mov	r19, r17
 378:	30 68       	ori	r19, 0x80	; 128
 37a:	33 2e       	mov	r3, r19
 37c:	2a e0       	ldi	r18, 0x0A	; 10
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	ae 01       	movw	r20, r28
 382:	4f 5f       	subi	r20, 0xFF	; 255
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	0e 94 48 03 	call	0x690	; 0x690 <__ultoa_invert>
 38a:	48 2e       	mov	r4, r24
 38c:	4c 85       	ldd	r20, Y+12	; 0x0c
 38e:	44 1a       	sub	r4, r20
 390:	4a c0       	rjmp	.+148    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 392:	85 37       	cpi	r24, 0x75	; 117
 394:	29 f4       	brne	.+10     	; 0x3a0 <vfprintf+0x280>
 396:	1f 7e       	andi	r17, 0xEF	; 239
 398:	a1 2e       	mov	r10, r17
 39a:	2a e0       	ldi	r18, 0x0A	; 10
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	25 c0       	rjmp	.+74     	; 0x3ea <vfprintf+0x2ca>
 3a0:	51 2f       	mov	r21, r17
 3a2:	59 7f       	andi	r21, 0xF9	; 249
 3a4:	a5 2e       	mov	r10, r21
 3a6:	8f 36       	cpi	r24, 0x6F	; 111
 3a8:	c1 f0       	breq	.+48     	; 0x3da <vfprintf+0x2ba>
 3aa:	18 f4       	brcc	.+6      	; 0x3b2 <vfprintf+0x292>
 3ac:	88 35       	cpi	r24, 0x58	; 88
 3ae:	79 f0       	breq	.+30     	; 0x3ce <vfprintf+0x2ae>
 3b0:	bd c0       	rjmp	.+378    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 3b2:	80 37       	cpi	r24, 0x70	; 112
 3b4:	19 f0       	breq	.+6      	; 0x3bc <vfprintf+0x29c>
 3b6:	88 37       	cpi	r24, 0x78	; 120
 3b8:	21 f0       	breq	.+8      	; 0x3c2 <vfprintf+0x2a2>
 3ba:	b8 c0       	rjmp	.+368    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 3bc:	85 2f       	mov	r24, r21
 3be:	80 61       	ori	r24, 0x10	; 16
 3c0:	a8 2e       	mov	r10, r24
 3c2:	a4 fe       	sbrs	r10, 4
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <vfprintf+0x2c0>
 3c6:	9a 2d       	mov	r25, r10
 3c8:	94 60       	ori	r25, 0x04	; 4
 3ca:	a9 2e       	mov	r10, r25
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <vfprintf+0x2c0>
 3ce:	14 ff       	sbrs	r17, 4
 3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <vfprintf+0x2c6>
 3d2:	a5 2f       	mov	r26, r21
 3d4:	a6 60       	ori	r26, 0x06	; 6
 3d6:	aa 2e       	mov	r10, r26
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <vfprintf+0x2c6>
 3da:	28 e0       	ldi	r18, 0x08	; 8
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <vfprintf+0x2ca>
 3e0:	20 e1       	ldi	r18, 0x10	; 16
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <vfprintf+0x2ca>
 3e6:	20 e1       	ldi	r18, 0x10	; 16
 3e8:	32 e0       	ldi	r19, 0x02	; 2
 3ea:	f7 01       	movw	r30, r14
 3ec:	a7 fe       	sbrs	r10, 7
 3ee:	08 c0       	rjmp	.+16     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f0:	60 81       	ld	r22, Z
 3f2:	71 81       	ldd	r23, Z+1	; 0x01
 3f4:	82 81       	ldd	r24, Z+2	; 0x02
 3f6:	93 81       	ldd	r25, Z+3	; 0x03
 3f8:	a7 01       	movw	r20, r14
 3fa:	4c 5f       	subi	r20, 0xFC	; 252
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	60 81       	ld	r22, Z
 402:	71 81       	ldd	r23, Z+1	; 0x01
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	a7 01       	movw	r20, r14
 40a:	4e 5f       	subi	r20, 0xFE	; 254
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	7a 01       	movw	r14, r20
 410:	ae 01       	movw	r20, r28
 412:	4f 5f       	subi	r20, 0xFF	; 255
 414:	5f 4f       	sbci	r21, 0xFF	; 255
 416:	0e 94 48 03 	call	0x690	; 0x690 <__ultoa_invert>
 41a:	48 2e       	mov	r4, r24
 41c:	5c 85       	ldd	r21, Y+12	; 0x0c
 41e:	45 1a       	sub	r4, r21
 420:	8a 2d       	mov	r24, r10
 422:	8f 77       	andi	r24, 0x7F	; 127
 424:	38 2e       	mov	r3, r24
 426:	36 fe       	sbrs	r3, 6
 428:	0d c0       	rjmp	.+26     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42a:	93 2d       	mov	r25, r3
 42c:	9e 7f       	andi	r25, 0xFE	; 254
 42e:	a9 2e       	mov	r10, r25
 430:	4b 14       	cp	r4, r11
 432:	58 f4       	brcc	.+22     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 434:	34 fe       	sbrs	r3, 4
 436:	0b c0       	rjmp	.+22     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 438:	32 fc       	sbrc	r3, 2
 43a:	09 c0       	rjmp	.+18     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 43c:	a3 2d       	mov	r26, r3
 43e:	ae 7e       	andi	r26, 0xEE	; 238
 440:	aa 2e       	mov	r10, r26
 442:	05 c0       	rjmp	.+10     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 444:	14 2d       	mov	r17, r4
 446:	a3 2c       	mov	r10, r3
 448:	03 c0       	rjmp	.+6      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44a:	14 2d       	mov	r17, r4
 44c:	01 c0       	rjmp	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44e:	1b 2d       	mov	r17, r11
 450:	a4 fe       	sbrs	r10, 4
 452:	0e c0       	rjmp	.+28     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 454:	fe 01       	movw	r30, r28
 456:	e4 0d       	add	r30, r4
 458:	f1 1d       	adc	r31, r1
 45a:	80 81       	ld	r24, Z
 45c:	80 33       	cpi	r24, 0x30	; 48
 45e:	21 f4       	brne	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 460:	ea 2d       	mov	r30, r10
 462:	e9 7e       	andi	r30, 0xE9	; 233
 464:	ae 2e       	mov	r10, r30
 466:	08 c0       	rjmp	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 468:	a2 fe       	sbrs	r10, 2
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46c:	1e 5f       	subi	r17, 0xFE	; 254
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 470:	8a 2d       	mov	r24, r10
 472:	86 78       	andi	r24, 0x86	; 134
 474:	09 f0       	breq	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	1f 5f       	subi	r17, 0xFF	; 255
 478:	a3 fc       	sbrc	r10, 3
 47a:	11 c0       	rjmp	.+34     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 47c:	a0 fe       	sbrs	r10, 0
 47e:	06 c0       	rjmp	.+12     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 480:	10 17       	cp	r17, r16
 482:	88 f4       	brcc	.+34     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 484:	04 0d       	add	r16, r4
 486:	b0 2e       	mov	r11, r16
 488:	b1 1a       	sub	r11, r17
 48a:	0e c0       	rjmp	.+28     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 48c:	10 17       	cp	r17, r16
 48e:	60 f4       	brcc	.+24     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 490:	b6 01       	movw	r22, r12
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 49a:	1f 5f       	subi	r17, 0xFF	; 255
 49c:	f7 cf       	rjmp	.-18     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 49e:	10 17       	cp	r17, r16
 4a0:	18 f4       	brcc	.+6      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a2:	01 1b       	sub	r16, r17
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a6:	b4 2c       	mov	r11, r4
 4a8:	00 e0       	ldi	r16, 0x00	; 0
 4aa:	a4 fe       	sbrs	r10, 4
 4ac:	10 c0       	rjmp	.+32     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ae:	b6 01       	movw	r22, r12
 4b0:	80 e3       	ldi	r24, 0x30	; 48
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 4b8:	a2 fe       	sbrs	r10, 2
 4ba:	17 c0       	rjmp	.+46     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4bc:	a1 fc       	sbrc	r10, 1
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c0:	88 e7       	ldi	r24, 0x78	; 120
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c6:	88 e5       	ldi	r24, 0x58	; 88
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	b6 01       	movw	r22, r12
 4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4ce:	8a 2d       	mov	r24, r10
 4d0:	86 78       	andi	r24, 0x86	; 134
 4d2:	59 f0       	breq	.+22     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4d4:	a1 fe       	sbrs	r10, 1
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d8:	8b e2       	ldi	r24, 0x2B	; 43
 4da:	01 c0       	rjmp	.+2      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	a7 fc       	sbrc	r10, 7
 4e0:	8d e2       	ldi	r24, 0x2D	; 45
 4e2:	b6 01       	movw	r22, r12
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 4ea:	4b 14       	cp	r4, r11
 4ec:	38 f4       	brcc	.+14     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4ee:	b6 01       	movw	r22, r12
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 4f8:	ba 94       	dec	r11
 4fa:	f7 cf       	rjmp	.-18     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4fc:	4a 94       	dec	r4
 4fe:	e1 e0       	ldi	r30, 0x01	; 1
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	ec 0f       	add	r30, r28
 504:	fd 1f       	adc	r31, r29
 506:	e4 0d       	add	r30, r4
 508:	f1 1d       	adc	r31, r1
 50a:	80 81       	ld	r24, Z
 50c:	b6 01       	movw	r22, r12
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 514:	41 10       	cpse	r4, r1
 516:	f2 cf       	rjmp	.-28     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 518:	00 23       	and	r16, r16
 51a:	09 f4       	brne	.+2      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 51c:	30 ce       	rjmp	.-928    	; 0x17e <vfprintf+0x5e>
 51e:	b6 01       	movw	r22, r12
 520:	80 e2       	ldi	r24, 0x20	; 32
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fputc>
 528:	01 50       	subi	r16, 0x01	; 1
 52a:	f6 cf       	rjmp	.-20     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 52c:	f6 01       	movw	r30, r12
 52e:	87 81       	ldd	r24, Z+7	; 0x07
 530:	90 85       	ldd	r25, Z+8	; 0x08
 532:	02 c0       	rjmp	.+4      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	9f ef       	ldi	r25, 0xFF	; 255
 538:	62 96       	adiw	r28, 0x12	; 18
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	bf 90       	pop	r11
 556:	af 90       	pop	r10
 558:	9f 90       	pop	r9
 55a:	8f 90       	pop	r8
 55c:	7f 90       	pop	r7
 55e:	6f 90       	pop	r6
 560:	4f 90       	pop	r4
 562:	3f 90       	pop	r3
 564:	2f 90       	pop	r2
 566:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a16 <strnlen>:
 a16:	cf 92       	push	r12
 a18:	df 92       	push	r13
 a1a:	ef 92       	push	r14
 a1c:	6b 01       	movw	r12, r22
 a1e:	e8 2e       	mov	r14, r24
 a20:	a8 2f       	mov	r26, r24
 a22:	cb 01       	movw	r24, r22
 a24:	41 15       	cp	r20, r1
 a26:	51 05       	cpc	r21, r1
 a28:	31 f4       	brne	.+12     	; 0xa36 <strnlen+0x20>
 a2a:	8c 19       	sub	r24, r12
 a2c:	9d 09       	sbc	r25, r13
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	08 95       	ret
 a36:	fc 01       	movw	r30, r24
 a38:	24 91       	lpm	r18, Z
 a3a:	a7 fd       	sbrc	r26, 7
 a3c:	20 81       	ld	r18, Z
 a3e:	22 23       	and	r18, r18
 a40:	a1 f3       	breq	.-24     	; 0xa2a <strnlen+0x14>
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	a1 1d       	adc	r26, r1
 a46:	41 50       	subi	r20, 0x01	; 1
 a48:	51 09       	sbc	r21, r1
 a4a:	ec cf       	rjmp	.-40     	; 0xa24 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000007e0 <fputc>:
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	fb 01       	movw	r30, r22
 7ea:	24 81       	ldd	r18, Z+4	; 0x04
 7ec:	21 fd       	sbrc	r18, 1
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <fputc+0x16>
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	9f ef       	ldi	r25, 0xFF	; 255
 7f4:	2c c0       	rjmp	.+88     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7f6:	22 ff       	sbrs	r18, 2
 7f8:	16 c0       	rjmp	.+44     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7fa:	47 81       	ldd	r20, Z+7	; 0x07
 7fc:	50 85       	ldd	r21, Z+8	; 0x08
 7fe:	25 81       	ldd	r18, Z+5	; 0x05
 800:	36 81       	ldd	r19, Z+6	; 0x06
 802:	42 17       	cp	r20, r18
 804:	53 07       	cpc	r21, r19
 806:	44 f4       	brge	.+16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 808:	a0 81       	ld	r26, Z
 80a:	b1 81       	ldd	r27, Z+1	; 0x01
 80c:	9d 01       	movw	r18, r26
 80e:	2f 5f       	subi	r18, 0xFF	; 255
 810:	3f 4f       	sbci	r19, 0xFF	; 255
 812:	31 83       	std	Z+1, r19	; 0x01
 814:	20 83       	st	Z, r18
 816:	8c 93       	st	X, r24
 818:	27 81       	ldd	r18, Z+7	; 0x07
 81a:	30 85       	ldd	r19, Z+8	; 0x08
 81c:	2f 5f       	subi	r18, 0xFF	; 255
 81e:	3f 4f       	sbci	r19, 0xFF	; 255
 820:	30 87       	std	Z+8, r19	; 0x08
 822:	27 83       	std	Z+7, r18	; 0x07
 824:	14 c0       	rjmp	.+40     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 826:	8b 01       	movw	r16, r22
 828:	ec 01       	movw	r28, r24
 82a:	fb 01       	movw	r30, r22
 82c:	01 84       	ldd	r0, Z+9	; 0x09
 82e:	f2 85       	ldd	r31, Z+10	; 0x0a
 830:	e0 2d       	mov	r30, r0
 832:	09 95       	icall
 834:	89 2b       	or	r24, r25
 836:	e1 f6       	brne	.-72     	; 0x7f0 <fputc+0x10>
 838:	d8 01       	movw	r26, r16
 83a:	17 96       	adiw	r26, 0x07	; 7
 83c:	8d 91       	ld	r24, X+
 83e:	9c 91       	ld	r25, X
 840:	18 97       	sbiw	r26, 0x08	; 8
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	18 96       	adiw	r26, 0x08	; 8
 846:	9c 93       	st	X, r25
 848:	8e 93       	st	-X, r24
 84a:	17 97       	sbiw	r26, 0x07	; 7
 84c:	ce 01       	movw	r24, r28
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

Disassembly of section .text.avrlibc:

00000690 <__ultoa_invert>:
 690:	fa 01       	movw	r30, r20
 692:	aa 27       	eor	r26, r26
 694:	28 30       	cpi	r18, 0x08	; 8
 696:	51 f1       	breq	.+84     	; 0x6ec <__ultoa_invert+0x5c>
 698:	20 31       	cpi	r18, 0x10	; 16
 69a:	81 f1       	breq	.+96     	; 0x6fc <__ultoa_invert+0x6c>
 69c:	e8 94       	clt
 69e:	6f 93       	push	r22
 6a0:	6e 7f       	andi	r22, 0xFE	; 254
 6a2:	6e 5f       	subi	r22, 0xFE	; 254
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	8f 4f       	sbci	r24, 0xFF	; 255
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	af 4f       	sbci	r26, 0xFF	; 255
 6ac:	b1 e0       	ldi	r27, 0x01	; 1
 6ae:	3e d0       	rcall	.+124    	; 0x72c <__ultoa_invert+0x9c>
 6b0:	b4 e0       	ldi	r27, 0x04	; 4
 6b2:	3c d0       	rcall	.+120    	; 0x72c <__ultoa_invert+0x9c>
 6b4:	67 0f       	add	r22, r23
 6b6:	78 1f       	adc	r23, r24
 6b8:	89 1f       	adc	r24, r25
 6ba:	9a 1f       	adc	r25, r26
 6bc:	a1 1d       	adc	r26, r1
 6be:	68 0f       	add	r22, r24
 6c0:	79 1f       	adc	r23, r25
 6c2:	8a 1f       	adc	r24, r26
 6c4:	91 1d       	adc	r25, r1
 6c6:	a1 1d       	adc	r26, r1
 6c8:	6a 0f       	add	r22, r26
 6ca:	71 1d       	adc	r23, r1
 6cc:	81 1d       	adc	r24, r1
 6ce:	91 1d       	adc	r25, r1
 6d0:	a1 1d       	adc	r26, r1
 6d2:	20 d0       	rcall	.+64     	; 0x714 <__ultoa_invert+0x84>
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <__ultoa_invert+0x48>
 6d6:	68 94       	set
 6d8:	3f 91       	pop	r19
 6da:	2a e0       	ldi	r18, 0x0A	; 10
 6dc:	26 9f       	mul	r18, r22
 6de:	11 24       	eor	r1, r1
 6e0:	30 19       	sub	r19, r0
 6e2:	30 5d       	subi	r19, 0xD0	; 208
 6e4:	31 93       	st	Z+, r19
 6e6:	de f6       	brtc	.-74     	; 0x69e <__ultoa_invert+0xe>
 6e8:	cf 01       	movw	r24, r30
 6ea:	08 95       	ret
 6ec:	46 2f       	mov	r20, r22
 6ee:	47 70       	andi	r20, 0x07	; 7
 6f0:	40 5d       	subi	r20, 0xD0	; 208
 6f2:	41 93       	st	Z+, r20
 6f4:	b3 e0       	ldi	r27, 0x03	; 3
 6f6:	0f d0       	rcall	.+30     	; 0x716 <__ultoa_invert+0x86>
 6f8:	c9 f7       	brne	.-14     	; 0x6ec <__ultoa_invert+0x5c>
 6fa:	f6 cf       	rjmp	.-20     	; 0x6e8 <__ultoa_invert+0x58>
 6fc:	46 2f       	mov	r20, r22
 6fe:	4f 70       	andi	r20, 0x0F	; 15
 700:	40 5d       	subi	r20, 0xD0	; 208
 702:	4a 33       	cpi	r20, 0x3A	; 58
 704:	18 f0       	brcs	.+6      	; 0x70c <__ultoa_invert+0x7c>
 706:	49 5d       	subi	r20, 0xD9	; 217
 708:	31 fd       	sbrc	r19, 1
 70a:	40 52       	subi	r20, 0x20	; 32
 70c:	41 93       	st	Z+, r20
 70e:	02 d0       	rcall	.+4      	; 0x714 <__ultoa_invert+0x84>
 710:	a9 f7       	brne	.-22     	; 0x6fc <__ultoa_invert+0x6c>
 712:	ea cf       	rjmp	.-44     	; 0x6e8 <__ultoa_invert+0x58>
 714:	b4 e0       	ldi	r27, 0x04	; 4
 716:	a6 95       	lsr	r26
 718:	97 95       	ror	r25
 71a:	87 95       	ror	r24
 71c:	77 95       	ror	r23
 71e:	67 95       	ror	r22
 720:	ba 95       	dec	r27
 722:	c9 f7       	brne	.-14     	; 0x716 <__ultoa_invert+0x86>
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	61 05       	cpc	r22, r1
 728:	71 05       	cpc	r23, r1
 72a:	08 95       	ret
 72c:	9b 01       	movw	r18, r22
 72e:	ac 01       	movw	r20, r24
 730:	0a 2e       	mov	r0, r26
 732:	06 94       	lsr	r0
 734:	57 95       	ror	r21
 736:	47 95       	ror	r20
 738:	37 95       	ror	r19
 73a:	27 95       	ror	r18
 73c:	ba 95       	dec	r27
 73e:	c9 f7       	brne	.-14     	; 0x732 <__ultoa_invert+0xa2>
 740:	62 0f       	add	r22, r18
 742:	73 1f       	adc	r23, r19
 744:	84 1f       	adc	r24, r20
 746:	95 1f       	adc	r25, r21
 748:	a0 1d       	adc	r26, r0
 74a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000009de <__prologue_saves__>:
 9de:	2f 92       	push	r2
 9e0:	3f 92       	push	r3
 9e2:	4f 92       	push	r4
 9e4:	5f 92       	push	r5
 9e6:	6f 92       	push	r6
 9e8:	7f 92       	push	r7
 9ea:	8f 92       	push	r8
 9ec:	9f 92       	push	r9
 9ee:	af 92       	push	r10
 9f0:	bf 92       	push	r11
 9f2:	cf 92       	push	r12
 9f4:	df 92       	push	r13
 9f6:	ef 92       	push	r14
 9f8:	ff 92       	push	r15
 9fa:	0f 93       	push	r16
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
 a06:	ca 1b       	sub	r28, r26
 a08:	db 0b       	sbc	r29, r27
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	f8 94       	cli
 a0e:	de bf       	out	0x3e, r29	; 62
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	cd bf       	out	0x3d, r28	; 61
 a14:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000a4c <__epilogue_restores__>:
 a4c:	2a 88       	ldd	r2, Y+18	; 0x12
 a4e:	39 88       	ldd	r3, Y+17	; 0x11
 a50:	48 88       	ldd	r4, Y+16	; 0x10
 a52:	5f 84       	ldd	r5, Y+15	; 0x0f
 a54:	6e 84       	ldd	r6, Y+14	; 0x0e
 a56:	7d 84       	ldd	r7, Y+13	; 0x0d
 a58:	8c 84       	ldd	r8, Y+12	; 0x0c
 a5a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a5c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a5e:	b9 84       	ldd	r11, Y+9	; 0x09
 a60:	c8 84       	ldd	r12, Y+8	; 0x08
 a62:	df 80       	ldd	r13, Y+7	; 0x07
 a64:	ee 80       	ldd	r14, Y+6	; 0x06
 a66:	fd 80       	ldd	r15, Y+5	; 0x05
 a68:	0c 81       	ldd	r16, Y+4	; 0x04
 a6a:	1b 81       	ldd	r17, Y+3	; 0x03
 a6c:	aa 81       	ldd	r26, Y+2	; 0x02
 a6e:	b9 81       	ldd	r27, Y+1	; 0x01
 a70:	ce 0f       	add	r28, r30
 a72:	d1 1d       	adc	r29, r1
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	f8 94       	cli
 a78:	de bf       	out	0x3e, r29	; 62
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	cd bf       	out	0x3d, r28	; 61
 a7e:	ed 01       	movw	r28, r26
 a80:	08 95       	ret
