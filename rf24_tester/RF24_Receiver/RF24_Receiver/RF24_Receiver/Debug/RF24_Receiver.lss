
RF24_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c6a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000c6a  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d56  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a53  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ff  00000000  00000000  0000359e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d4  00000000  00000000  00003fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025b  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000094d  00000000  00000000  000044cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000bc8  00000bc8  00000c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 0000002a  000000c8  000000c8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    0000010a  0000053a  0000053a  000005ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.nrf24_transferSync 00000034  000009d0  000009d0  00000a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.nrf24_transmitSync 00000020  00000afe  00000afe  00000b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.nrf24_ce_digitalWrite 00000014  00000b92  00000b92  00000c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.nrf24_csn_digitalWrite 00000014  00000ba6  00000ba6  00000c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.nrf24_payloadLength 0000002a  00000a8e  00000a8e  00000b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_getStatus 00000020  00000b1e  00000b1e  00000bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_configRegister 00000032  00000a04  00000a04  00000a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_getData 00000060  000007dc  000007dc  00000870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_powerUpRx 00000036  0000092e  0000092e  000009c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_config 00000064  00000778  00000778  0000080c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_readRegister 0000003a  00000882  00000882  00000916  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_rxFifoEmpty 00000024  00000ab8  00000ab8  00000b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.nrf24_dataReady 0000001c  00000b5e  00000b5e  00000bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.nrf24_writeRegister 0000003a  000008bc  000008bc  00000950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.nrf24_rx_address 00000022  00000adc  00000adc  00000b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.nrf24_tx_address 00000020  00000b3e  00000b3e  00000bd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.nrf24_init 0000002c  00000a36  00000a36  00000aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .data.nrf24_addr 0000000a  00800101  00000bcc  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .text.uart_init 00000018  00000b7a  00000b7a  00000c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.uart_putc 0000000e  00000bba  00000bba  00000c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.uart_puts 0000002c  00000a62  00000a62  00000af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000046  0000083c  0000083c  000008d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000448  000000f2  000000f2  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000036  00000964  00000964  000009f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000078  00000700  00000700  00000794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 000000bc  00000644  00000644  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc.prologue 00000038  000008f6  000008f6  0000098a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc.prologue 00000036  0000099a  0000099a  00000a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
   8:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
   c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  10:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  14:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  18:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  1c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  20:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  24:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  28:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  2c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  30:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  34:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  38:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  3c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  40:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  44:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  48:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  4c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  50:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  54:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  58:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  5c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  60:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>
  64:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 01       	movw	r16, r0
  6e:	01 01       	movw	r0, r2
  70:	0b 00       	.word	0x000b	; ????
  72:	0b cc       	rjmp	.-2026   	; 0xfffff88a <__eeprom_end+0xff7ef88a>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000bc8 <__bad_interrupt>:
 bc8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000053a <main>:
#include "spi.h"
#include "uart.h"
#include "config.h"

int main(void)
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
 542:	e4 97       	sbiw	r28, 0x34	; 52
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	a8 95       	wdr
 554:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 558:	88 61       	ori	r24, 0x18	; 24
 55a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 55e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 562:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	uart_init();
 564:	0e 94 bd 05 	call	0xb7a	; 0xb7a <uart_init>
	
	uart_puts("\x1b[2J\r\n");
 568:	68 ec       	ldi	r22, 0xC8	; 200
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts>
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
}

inline static void spi_init(void) {
	SPI_DDR = SPI_DDR | _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 572:	84 b1       	in	r24, 0x04	; 4
 574:	8e 62       	ori	r24, 0x2E	; 46
 576:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | 0 | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 578:	80 e5       	ldi	r24, 0x50	; 80
 57a:	8c bd       	out	0x2c, r24	; 44
	
	spi_init();
	nrf24_init();
 57c:	0e 94 1b 05 	call	0xa36	; 0xa36 <nrf24_init>
	
	uint8_t data[32];
	uint8_t data_len=7;
	
	uint8_t uart_buffer[20]={};
 580:	fe 01       	movw	r30, r28
 582:	b1 96       	adiw	r30, 0x21	; 33
 584:	84 e1       	ldi	r24, 0x14	; 20
 586:	df 01       	movw	r26, r30
 588:	1d 92       	st	X+, r1
 58a:	8a 95       	dec	r24
 58c:	e9 f7       	brne	.-6      	; 0x588 <main+0x4e>
		
	uint32_t try=0;
	
	uart_puts("\r\n");
 58e:	6f ec       	ldi	r22, 0xCF	; 207
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts>
	uint8_t data[32];
	uint8_t data_len=7;
	
	uint8_t uart_buffer[20]={};
		
	uint32_t try=0;
 598:	81 2c       	mov	r8, r1
 59a:	91 2c       	mov	r9, r1
 59c:	54 01       	movw	r10, r8
 59e:	1d c0       	rjmp	.+58     	; 0x5da <main+0xa0>
	uart_puts("\r\n");
	
    while(1)
    {
		while(!nrf24_dataReady()){
			sprintf(uart_buffer, "\rTry %d ... ", (int)try++);
 5a0:	75 01       	movw	r14, r10
 5a2:	64 01       	movw	r12, r8
 5a4:	bf ef       	ldi	r27, 0xFF	; 255
 5a6:	cb 1a       	sub	r12, r27
 5a8:	db 0a       	sbc	r13, r27
 5aa:	eb 0a       	sbc	r14, r27
 5ac:	fb 0a       	sbc	r15, r27
 5ae:	9f 92       	push	r9
 5b0:	8f 92       	push	r8
 5b2:	82 ed       	ldi	r24, 0xD2	; 210
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a0 e0       	ldi	r26, 0x00	; 0
 5b8:	af 93       	push	r26
 5ba:	9f 93       	push	r25
 5bc:	8f 93       	push	r24
 5be:	ce 01       	movw	r24, r28
 5c0:	81 96       	adiw	r24, 0x21	; 33
 5c2:	9f 93       	push	r25
 5c4:	8f 93       	push	r24
 5c6:	0e 94 1e 04 	call	0x83c	; 0x83c <sprintf>
			//uart_puts(uart_buffer);
			//uart_puts(" Data not ready.");
			break;
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
	uart_puts("\r\n");
	
    while(1)
    {
		while(!nrf24_dataReady()){
			sprintf(uart_buffer, "\rTry %d ... ", (int)try++);
 5d4:	46 01       	movw	r8, r12
 5d6:	57 01       	movw	r10, r14
			//uart_puts(uart_buffer);
			//uart_puts(" Data not ready.");
			break;
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <main+0xa8>
	
	uart_puts("\r\n");
	
    while(1)
    {
		while(!nrf24_dataReady()){
 5da:	0e 94 af 05 	call	0xb5e	; 0xb5e <nrf24_dataReady>
 5de:	88 23       	and	r24, r24
 5e0:	f9 f2       	breq	.-66     	; 0x5a0 <main+0x66>
			sprintf(uart_buffer, "\rTry %d ... ", (int)try++);
			//uart_puts(uart_buffer);
			//uart_puts(" Data not ready.");
			break;
		}
		nrf24_getData(data, data_len);
 5e2:	67 e0       	ldi	r22, 0x07	; 7
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 ee 03 	call	0x7dc	; 0x7dc <nrf24_getData>
		uart_puts("\r\nData ready: ");
 5ee:	6f ed       	ldi	r22, 0xDF	; 223
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts>
		for(uint8_t i=0; i<data_len; i++)
 5f8:	f1 2c       	mov	r15, r1
 5fa:	20 c0       	rjmp	.+64     	; 0x63c <main+0x102>
		{
			sprintf(uart_buffer, "%c ", data[i]);
 5fc:	e1 e0       	ldi	r30, 0x01	; 1
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ec 0f       	add	r30, r28
 602:	fd 1f       	adc	r31, r29
 604:	ef 0d       	add	r30, r15
 606:	f1 1d       	adc	r31, r1
 608:	80 81       	ld	r24, Z
 60a:	1f 92       	push	r1
 60c:	8f 93       	push	r24
 60e:	8e ee       	ldi	r24, 0xEE	; 238
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	a0 e0       	ldi	r26, 0x00	; 0
 614:	af 93       	push	r26
 616:	9f 93       	push	r25
 618:	8f 93       	push	r24
 61a:	8e 01       	movw	r16, r28
 61c:	0f 5d       	subi	r16, 0xDF	; 223
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	1f 93       	push	r17
 622:	0f 93       	push	r16
 624:	0e 94 1e 04 	call	0x83c	; 0x83c <sprintf>
			uart_puts(uart_buffer);
 628:	b8 01       	movw	r22, r16
 62a:	80 e8       	ldi	r24, 0x80	; 128
 62c:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts>
			//uart_puts(" Data not ready.");
			break;
		}
		nrf24_getData(data, data_len);
		uart_puts("\r\nData ready: ");
		for(uint8_t i=0; i<data_len; i++)
 630:	f3 94       	inc	r15
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
 63c:	b6 e0       	ldi	r27, 0x06	; 6
 63e:	bf 15       	cp	r27, r15
 640:	e8 f6       	brcc	.-70     	; 0x5fc <main+0xc2>
 642:	cb cf       	rjmp	.-106    	; 0x5da <main+0xa0>

Disassembly of section .text.nrf24_transferSync:

000009d0 <nrf24_transferSync>:
	/* Probably still sending ... */
	else
	{
		return 0xFF;
	}
}
 9d0:	cf 93       	push	r28
 9d2:	df 93       	push	r29
 9d4:	dc 01       	movw	r26, r24
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	10 c0       	rjmp	.+32     	; 0x9fa <nrf24_transferSync+0x2a>
 9da:	29 2f       	mov	r18, r25
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	fb 01       	movw	r30, r22
 9e0:	e2 0f       	add	r30, r18
 9e2:	f3 1f       	adc	r31, r19
 9e4:	ed 01       	movw	r28, r26
 9e6:	c2 0f       	add	r28, r18
 9e8:	d3 1f       	adc	r29, r19
 9ea:	28 81       	ld	r18, Y
 9ec:	2e bd       	out	0x2e, r18	; 46
 9ee:	0d b4       	in	r0, 0x2d	; 45
 9f0:	07 fe       	sbrs	r0, 7
 9f2:	fd cf       	rjmp	.-6      	; 0x9ee <nrf24_transferSync+0x1e>
 9f4:	2e b5       	in	r18, 0x2e	; 46
 9f6:	20 83       	st	Z, r18
 9f8:	9f 5f       	subi	r25, 0xFF	; 255
 9fa:	94 17       	cp	r25, r20
 9fc:	70 f3       	brcs	.-36     	; 0x9da <nrf24_transferSync+0xa>
 9fe:	df 91       	pop	r29
 a00:	cf 91       	pop	r28
 a02:	08 95       	ret

Disassembly of section .text.nrf24_transmitSync:

00000afe <nrf24_transmitSync>:

}

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 afe:	ac 01       	movw	r20, r24
	//uint8_t buf[2];
	//uart_puts("\r\n");
	for(uint8_t i=0; i<len ;i++)
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0a c0       	rjmp	.+20     	; 0xb18 <nrf24_transmitSync+0x1a>
	{
		spi_exchange(dataout[i]);
 b04:	fa 01       	movw	r30, r20
 b06:	e9 0f       	add	r30, r25
 b08:	f1 1d       	adc	r31, r1
 b0a:	20 81       	ld	r18, Z
#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR

inline static uint8_t spi_exchange(uint8_t data) {
	
    SPDR = data;
 b0c:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 b0e:	0d b4       	in	r0, 0x2d	; 45
 b10:	07 fe       	sbrs	r0, 7
 b12:	fd cf       	rjmp	.-6      	; 0xb0e <nrf24_transmitSync+0x10>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 b14:	8e b5       	in	r24, 0x2e	; 46
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
	//uint8_t buf[2];
	//uart_puts("\r\n");
	for(uint8_t i=0; i<len ;i++)
 b16:	9f 5f       	subi	r25, 0xFF	; 255
 b18:	96 17       	cp	r25, r22
 b1a:	a0 f3       	brcs	.-24     	; 0xb04 <nrf24_transmitSync+0x6>
		spi_exchange(dataout[i]);
		//sprintf(buf, "%d, ", dataout[i]);
		//uart_puts(buf);
	}

}
 b1c:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

00000b92 <nrf24_ce_digitalWrite>:
	nrf24_csn_digitalWrite(HIGH);
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
 b92:	88 23       	and	r24, r24
 b94:	21 f0       	breq	.+8      	; 0xb9e <nrf24_ce_digitalWrite+0xc>
	{
		set_bit(NRF24_PORT,NRF24_CE);
 b96:	85 b1       	in	r24, 0x05	; 5
 b98:	81 60       	ori	r24, 0x01	; 1
 b9a:	85 b9       	out	0x05, r24	; 5
 b9c:	08 95       	ret
	}
	else
	{
		clr_bit(NRF24_PORT,NRF24_CE);
 b9e:	85 b1       	in	r24, 0x05	; 5
 ba0:	8e 7f       	andi	r24, 0xFE	; 254
 ba2:	85 b9       	out	0x05, r24	; 5
 ba4:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000ba6 <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 ba6:	88 23       	and	r24, r24
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <nrf24_csn_digitalWrite+0xc>
	{
		set_bit(NRF24_PORT, NRF24_CS);
 baa:	85 b1       	in	r24, 0x05	; 5
 bac:	84 60       	ori	r24, 0x04	; 4
 bae:	85 b9       	out	0x05, r24	; 5
 bb0:	08 95       	ret
	}
	else
	{
		clr_bit(NRF24_PORT, NRF24_CS);
 bb2:	85 b1       	in	r24, 0x05	; 5
 bb4:	8b 7f       	andi	r24, 0xFB	; 251
 bb6:	85 b9       	out	0x05, r24	; 5
 bb8:	08 95       	ret

Disassembly of section .text.nrf24_payloadLength:

00000a8e <nrf24_payloadLength>:
	return (fifoStatus & (1 << RX_EMPTY));
}

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
 a8e:	cf 93       	push	r28
	uint8_t status;
	nrf24_csn_digitalWrite(LOW);
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR

inline static uint8_t spi_exchange(uint8_t data) {
	
    SPDR = data;
 a96:	80 e6       	ldi	r24, 0x60	; 96
 a98:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 a9a:	0d b4       	in	r0, 0x2d	; 45
 a9c:	07 fe       	sbrs	r0, 7
 a9e:	fd cf       	rjmp	.-6      	; 0xa9a <nrf24_payloadLength+0xc>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 aa0:	8e b5       	in	r24, 0x2e	; 46
#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR

inline static uint8_t spi_exchange(uint8_t data) {
	
    SPDR = data;
 aa2:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 aa4:	0d b4       	in	r0, 0x2d	; 45
 aa6:	07 fe       	sbrs	r0, 7
 aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <nrf24_payloadLength+0x16>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 aaa:	ce b5       	in	r28, 0x2e	; 46
	spi_exchange(R_RX_PL_WID);
	status = spi_exchange(0x00);
	nrf24_csn_digitalWrite(HIGH);
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
	return status;
}
 ab2:	8c 2f       	mov	r24, r28
 ab4:	cf 91       	pop	r28
 ab6:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00000b1e <nrf24_getStatus>:
	return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 b1e:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 b20:	80 e0       	ldi	r24, 0x00	; 0
 b22:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR

inline static uint8_t spi_exchange(uint8_t data) {
	
    SPDR = data;
 b26:	8f ef       	ldi	r24, 0xFF	; 255
 b28:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 b2a:	0d b4       	in	r0, 0x2d	; 45
 b2c:	07 fe       	sbrs	r0, 7
 b2e:	fd cf       	rjmp	.-6      	; 0xb2a <nrf24_getStatus+0xc>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 b30:	ce b5       	in	r28, 0x2e	; 46
	rv = spi_exchange(NOP);
	nrf24_csn_digitalWrite(HIGH);
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
	return rv;
}
 b38:	8c 2f       	mov	r24, r28
 b3a:	cf 91       	pop	r28
 b3c:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

00000a04 <nrf24_configRegister>:

}

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	c8 2f       	mov	r28, r24
 a0a:	d6 2f       	mov	r29, r22
	nrf24_csn_digitalWrite(LOW);
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
	spi_exchange(W_REGISTER | (REGISTER_MASK & reg));
 a12:	cf 71       	andi	r28, 0x1F	; 31
 a14:	c0 62       	ori	r28, 0x20	; 32
#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR

inline static uint8_t spi_exchange(uint8_t data) {
	
    SPDR = data;
 a16:	ce bd       	out	0x2e, r28	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 a18:	0d b4       	in	r0, 0x2d	; 45
 a1a:	07 fe       	sbrs	r0, 7
 a1c:	fd cf       	rjmp	.-6      	; 0xa18 <nrf24_configRegister+0x14>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 a1e:	8e b5       	in	r24, 0x2e	; 46
#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR

inline static uint8_t spi_exchange(uint8_t data) {
	
    SPDR = data;
 a20:	de bd       	out	0x2e, r29	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 a22:	0d b4       	in	r0, 0x2d	; 45
 a24:	07 fe       	sbrs	r0, 7
 a26:	fd cf       	rjmp	.-6      	; 0xa22 <nrf24_configRegister+0x1e>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 a28:	8e b5       	in	r24, 0x2e	; 46
	spi_exchange(value);
	nrf24_csn_digitalWrite(HIGH);
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
}
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	08 95       	ret

Disassembly of section .text.nrf24_getData:

000007dc <nrf24_getData>:
	/* Probably still sending ... */
	else
	{
		return 0xFF;
	}
}
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	ec 01       	movw	r28, r24
 7e6:	8b 01       	movw	r16, r22
 7e8:	0e 94 47 05 	call	0xa8e	; 0xa8e <nrf24_payloadLength>
 7ec:	f8 01       	movw	r30, r16
 7ee:	80 83       	st	Z, r24
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 7f6:	81 e6       	ldi	r24, 0x61	; 97
 7f8:	8e bd       	out	0x2e, r24	; 46
 7fa:	0d b4       	in	r0, 0x2d	; 45
 7fc:	07 fe       	sbrs	r0, 7
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <nrf24_getData+0x1e>
 800:	8e b5       	in	r24, 0x2e	; 46
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0b c0       	rjmp	.+22     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 806:	9e 01       	movw	r18, r28
 808:	2f 5f       	subi	r18, 0xFF	; 255
 80a:	3f 4f       	sbci	r19, 0xFF	; 255
 80c:	1e bc       	out	0x2e, r1	; 46
 80e:	0d b4       	in	r0, 0x2d	; 45
 810:	07 fe       	sbrs	r0, 7
 812:	fd cf       	rjmp	.-6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 814:	9e b5       	in	r25, 0x2e	; 46
 816:	98 83       	st	Y, r25
 818:	8f 5f       	subi	r24, 0xFF	; 255
 81a:	e9 01       	movw	r28, r18
 81c:	f8 01       	movw	r30, r16
 81e:	90 81       	ld	r25, Z
 820:	89 17       	cp	r24, r25
 822:	88 f3       	brcs	.-30     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 82a:	60 e4       	ldi	r22, 0x40	; 64
 82c:	87 e0       	ldi	r24, 0x07	; 7
 82e:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	0f 91       	pop	r16
 83a:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

0000092e <nrf24_powerUpRx>:
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 934:	82 ee       	ldi	r24, 0xE2	; 226
 936:	8e bd       	out	0x2e, r24	; 46
 938:	0d b4       	in	r0, 0x2d	; 45
 93a:	07 fe       	sbrs	r0, 7
 93c:	fd cf       	rjmp	.-6      	; 0x938 <nrf24_powerUpRx+0xa>
 93e:	8e b5       	in	r24, 0x2e	; 46
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 946:	60 e7       	ldi	r22, 0x70	; 112
 948:	87 e0       	ldi	r24, 0x07	; 7
 94a:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_ce_digitalWrite>
 954:	6b e0       	ldi	r22, 0x0B	; 11
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_ce_digitalWrite>
 962:	08 95       	ret

Disassembly of section .text.nrf24_config:

00000778 <nrf24_config>:
 778:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 77c:	68 2f       	mov	r22, r24
 77e:	85 e0       	ldi	r24, 0x05	; 5
 780:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	81 e1       	ldi	r24, 0x11	; 17
 788:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 78c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 790:	82 e1       	ldi	r24, 0x12	; 18
 792:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	83 e1       	ldi	r24, 0x13	; 19
 79a:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	84 e1       	ldi	r24, 0x14	; 20
 7a2:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	85 e1       	ldi	r24, 0x15	; 21
 7aa:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	86 e1       	ldi	r24, 0x16	; 22
 7b2:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7b6:	6e e0       	ldi	r22, 0x0E	; 14
 7b8:	86 e0       	ldi	r24, 0x06	; 6
 7ba:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7be:	68 e0       	ldi	r22, 0x08	; 8
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7c6:	63 e0       	ldi	r22, 0x03	; 3
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	8c e1       	ldi	r24, 0x1C	; 28
 7d2:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24_configRegister>
 7d6:	0e 94 97 04 	call	0x92e	; 0x92e <nrf24_powerUpRx>
 7da:	08 95       	ret

Disassembly of section .text.nrf24_readRegister:

00000882 <nrf24_readRegister>:
 882:	0f 93       	push	r16
 884:	1f 93       	push	r17
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	c8 2f       	mov	r28, r24
 88c:	8b 01       	movw	r16, r22
 88e:	d4 2f       	mov	r29, r20
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 896:	cf 71       	andi	r28, 0x1F	; 31
 898:	ce bd       	out	0x2e, r28	; 46
 89a:	0d b4       	in	r0, 0x2d	; 45
 89c:	07 fe       	sbrs	r0, 7
 89e:	fd cf       	rjmp	.-6      	; 0x89a <nrf24_readRegister+0x18>
 8a0:	8e b5       	in	r24, 0x2e	; 46
 8a2:	4d 2f       	mov	r20, r29
 8a4:	b8 01       	movw	r22, r16
 8a6:	c8 01       	movw	r24, r16
 8a8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <nrf24_transferSync>
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	08 95       	ret

Disassembly of section .text.nrf24_rxFifoEmpty:

00000ab8 <nrf24_rxFifoEmpty>:
    return !nrf24_rxFifoEmpty();
}

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 ab8:	cf 93       	push	r28
 aba:	df 93       	push	r29
 abc:	1f 92       	push	r1
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 ac2:	41 e0       	ldi	r20, 0x01	; 1
 ac4:	be 01       	movw	r22, r28
 ac6:	6f 5f       	subi	r22, 0xFF	; 255
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	87 e1       	ldi	r24, 0x17	; 23
 acc:	0e 94 41 04 	call	0x882	; 0x882 <nrf24_readRegister>
	
	return (fifoStatus & (1 << RX_EMPTY));
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
 ad2:	81 70       	andi	r24, 0x01	; 1
 ad4:	0f 90       	pop	r0
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	08 95       	ret

Disassembly of section .text.nrf24_dataReady:

00000b5e <nrf24_dataReady>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady()
{
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 b5e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <nrf24_getStatus>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) )
 b62:	86 fd       	sbrc	r24, 6
 b64:	07 c0       	rjmp	.+14     	; 0xb74 <nrf24_dataReady+0x16>
    {
	    return 1;
    }
    return !nrf24_rxFifoEmpty();
 b66:	0e 94 5c 05 	call	0xab8	; 0xab8 <nrf24_rxFifoEmpty>
 b6a:	91 e0       	ldi	r25, 0x01	; 1
 b6c:	88 23       	and	r24, r24
 b6e:	19 f0       	breq	.+6      	; 0xb76 <nrf24_dataReady+0x18>
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	01 c0       	rjmp	.+2      	; 0xb76 <nrf24_dataReady+0x18>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) )
    {
	    return 1;
 b74:	91 e0       	ldi	r25, 0x01	; 1
    }
    return !nrf24_rxFifoEmpty();
}
 b76:	89 2f       	mov	r24, r25
 b78:	08 95       	ret

Disassembly of section .text.nrf24_writeRegister:

000008bc <nrf24_writeRegister>:
	/* Probably still sending ... */
	else
	{
		return 0xFF;
	}
}
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	c8 2f       	mov	r28, r24
 8c6:	8b 01       	movw	r16, r22
 8c8:	d4 2f       	mov	r29, r20
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 8d0:	cf 71       	andi	r28, 0x1F	; 31
 8d2:	c0 62       	ori	r28, 0x20	; 32
 8d4:	ce bd       	out	0x2e, r28	; 46
 8d6:	0d b4       	in	r0, 0x2d	; 45
 8d8:	07 fe       	sbrs	r0, 7
 8da:	fd cf       	rjmp	.-6      	; 0x8d6 <nrf24_writeRegister+0x1a>
 8dc:	8e b5       	in	r24, 0x2e	; 46
 8de:	6d 2f       	mov	r22, r29
 8e0:	c8 01       	movw	r24, r16
 8e2:	0e 94 7f 05 	call	0xafe	; 0xafe <nrf24_transmitSync>
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

00000adc <nrf24_rx_address>:
	nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
 adc:	cf 93       	push	r28
 ade:	df 93       	push	r29
 ae0:	ec 01       	movw	r28, r24
	nrf24_ce_digitalWrite(LOW);
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 ae8:	45 e0       	ldi	r20, 0x05	; 5
 aea:	be 01       	movw	r22, r28
 aec:	8b e0       	ldi	r24, 0x0B	; 11
 aee:	0e 94 5e 04 	call	0x8bc	; 0x8bc <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_ce_digitalWrite>
}
 af8:	df 91       	pop	r29
 afa:	cf 91       	pop	r28
 afc:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

00000b3e <nrf24_tx_address>:
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 b3e:	cf 93       	push	r28
 b40:	df 93       	push	r29
 b42:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 b44:	45 e0       	ldi	r20, 0x05	; 5
 b46:	bc 01       	movw	r22, r24
 b48:	8a e0       	ldi	r24, 0x0A	; 10
 b4a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 b4e:	45 e0       	ldi	r20, 0x05	; 5
 b50:	be 01       	movw	r22, r28
 b52:	80 e1       	ldi	r24, 0x10	; 16
 b54:	0e 94 5e 04 	call	0x8bc	; 0x8bc <nrf24_writeRegister>
}
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	08 95       	ret

Disassembly of section .text.nrf24_init:

00000a36 <nrf24_init>:
};

/* init the hardware pins */
void nrf24_init()
{
	NRF24_DDR |= (_BV(NRF24_CE) | _BV(NRF24_CS)); /* Set Chip Enable pin as output */
 a36:	84 b1       	in	r24, 0x04	; 4
 a38:	85 60       	ori	r24, 0x05	; 5
 a3a:	84 b9       	out	0x04, r24	; 4
	nrf24_tx_address(nrf24_addr[ADDRESS_MASTER]);
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	91 e0       	ldi	r25, 0x01	; 1
 a40:	0e 94 9f 05 	call	0xb3e	; 0xb3e <nrf24_tx_address>
	nrf24_rx_address(nrf24_addr[ADDRESS_SLAVE]);
 a44:	86 e0       	ldi	r24, 0x06	; 6
 a46:	91 e0       	ldi	r25, 0x01	; 1
 a48:	0e 94 6e 05 	call	0xadc	; 0xadc <nrf24_rx_address>
	nrf24_ce_digitalWrite(LOW);
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	0e 94 d3 05 	call	0xba6	; 0xba6 <nrf24_csn_digitalWrite>
	
	nrf24_config(NRF24_CHANNEL,NRF24_PAYLENGTH);
 a58:	67 e0       	ldi	r22, 0x07	; 7
 a5a:	82 e0       	ldi	r24, 0x02	; 2
 a5c:	0e 94 bc 03 	call	0x778	; 0x778 <nrf24_config>
 a60:	08 95       	ret

Disassembly of section .text.uart_init:

00000b7a <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 b7a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 b7e:	87 e6       	ldi	r24, 0x67	; 103
 b80:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 b84:	86 e0       	ldi	r24, 0x06	; 6
 b86:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 b8a:	88 e1       	ldi	r24, 0x18	; 24
 b8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 b90:	08 95       	ret

Disassembly of section .text.uart_putc:

00000bba <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 bba:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 bbe:	95 ff       	sbrs	r25, 5
 bc0:	fc cf       	rjmp	.-8      	; 0xbba <uart_putc>
	UDR0 = DataByte;
 bc2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 bc6:	08 95       	ret

Disassembly of section .text.uart_puts:

00000a62 <uart_puts>:
}

void uart_puts(const char *s )
{
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	6b 01       	movw	r12, r22
 a6a:	e8 2e       	mov	r14, r24
	while (*s)
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <uart_puts+0x18>
	uart_putc(*s++);
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	c9 1a       	sub	r12, r25
 a72:	d9 0a       	sbc	r13, r25
 a74:	e9 0a       	sbc	r14, r25
 a76:	0e 94 dd 05 	call	0xbba	; 0xbba <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 a7a:	f6 01       	movw	r30, r12
 a7c:	84 91       	lpm	r24, Z
 a7e:	e7 fc       	sbrc	r14, 7
 a80:	80 81       	ld	r24, Z
 a82:	81 11       	cpse	r24, r1
 a84:	f4 cf       	rjmp	.-24     	; 0xa6e <uart_puts+0xc>
	uart_putc(*s++);

	}/* uart_puts */
 a86:	ef 90       	pop	r14
 a88:	df 90       	pop	r13
 a8a:	cf 90       	pop	r12
 a8c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000083c <sprintf>:
 83c:	af e0       	ldi	r26, 0x0F	; 15
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	e4 e2       	ldi	r30, 0x24	; 36
 842:	f4 e0       	ldi	r31, 0x04	; 4
 844:	0c 94 89 04 	jmp	0x912	; 0x912 <__stack+0x13>
 848:	0e 89       	ldd	r16, Y+22	; 0x16
 84a:	1f 89       	ldd	r17, Y+23	; 0x17
 84c:	86 e0       	ldi	r24, 0x06	; 6
 84e:	8d 83       	std	Y+5, r24	; 0x05
 850:	1a 83       	std	Y+2, r17	; 0x02
 852:	09 83       	std	Y+1, r16	; 0x01
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	9f e7       	ldi	r25, 0x7F	; 127
 858:	9f 83       	std	Y+7, r25	; 0x07
 85a:	8e 83       	std	Y+6, r24	; 0x06
 85c:	9e 01       	movw	r18, r28
 85e:	25 5e       	subi	r18, 0xE5	; 229
 860:	3f 4f       	sbci	r19, 0xFF	; 255
 862:	48 8d       	ldd	r20, Y+24	; 0x18
 864:	59 8d       	ldd	r21, Y+25	; 0x19
 866:	6a 8d       	ldd	r22, Y+26	; 0x1a
 868:	ce 01       	movw	r24, r28
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	0e 94 79 00 	call	0xf2	; 0xf2 <vfprintf>
 870:	e8 85       	ldd	r30, Y+8	; 0x08
 872:	f9 85       	ldd	r31, Y+9	; 0x09
 874:	e0 0f       	add	r30, r16
 876:	f1 1f       	adc	r31, r17
 878:	10 82       	st	Z, r1
 87a:	2f 96       	adiw	r28, 0x0f	; 15
 87c:	e4 e0       	ldi	r30, 0x04	; 4
 87e:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000000f2 <vfprintf>:
  f2:	2f 92       	push	r2
  f4:	3f 92       	push	r3
  f6:	4f 92       	push	r4
  f8:	6f 92       	push	r6
  fa:	7f 92       	push	r7
  fc:	8f 92       	push	r8
  fe:	9f 92       	push	r9
 100:	af 92       	push	r10
 102:	bf 92       	push	r11
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	62 97       	sbiw	r28, 0x12	; 18
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	6c 01       	movw	r12, r24
 126:	3a 01       	movw	r6, r20
 128:	86 2e       	mov	r8, r22
 12a:	79 01       	movw	r14, r18
 12c:	fc 01       	movw	r30, r24
 12e:	10 86       	std	Z+8, r1	; 0x08
 130:	17 82       	std	Z+7, r1	; 0x07
 132:	84 81       	ldd	r24, Z+4	; 0x04
 134:	81 ff       	sbrs	r24, 1
 136:	e7 c1       	rjmp	.+974    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 138:	9e 01       	movw	r18, r28
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	3d 87       	std	Y+13, r19	; 0x0d
 140:	2c 87       	std	Y+12, r18	; 0x0c
 142:	c9 01       	movw	r24, r18
 144:	a0 e8       	ldi	r26, 0x80	; 128
 146:	88 8b       	std	Y+16, r24	; 0x10
 148:	99 8b       	std	Y+17, r25	; 0x11
 14a:	aa 8b       	std	Y+18, r26	; 0x12
 14c:	9f e3       	ldi	r25, 0x3F	; 63
 14e:	99 2e       	mov	r9, r25
 150:	f3 01       	movw	r30, r6
 152:	84 91       	lpm	r24, Z
 154:	87 fc       	sbrc	r8, 7
 156:	80 81       	ld	r24, Z
 158:	88 23       	and	r24, r24
 15a:	09 f4       	brne	.+2      	; 0x15e <vfprintf+0x6c>
 15c:	d0 c1       	rjmp	.+928    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 15e:	48 2d       	mov	r20, r8
 160:	93 01       	movw	r18, r6
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	4f 4f       	sbci	r20, 0xFF	; 255
 168:	85 32       	cpi	r24, 0x25	; 37
 16a:	19 f0       	breq	.+6      	; 0x172 <vfprintf+0x80>
 16c:	39 01       	movw	r6, r18
 16e:	84 2e       	mov	r8, r20
 170:	0a c0       	rjmp	.+20     	; 0x186 <vfprintf+0x94>
 172:	f9 01       	movw	r30, r18
 174:	84 91       	lpm	r24, Z
 176:	47 fd       	sbrc	r20, 7
 178:	80 81       	ld	r24, Z
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	69 0e       	add	r6, r25
 17e:	71 1c       	adc	r7, r1
 180:	81 1c       	adc	r8, r1
 182:	85 32       	cpi	r24, 0x25	; 37
 184:	29 f4       	brne	.+10     	; 0x190 <vfprintf+0x9e>
 186:	b6 01       	movw	r22, r12
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 18e:	e0 cf       	rjmp	.-64     	; 0x150 <vfprintf+0x5e>
 190:	b1 2c       	mov	r11, r1
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	10 32       	cpi	r17, 0x20	; 32
 198:	a0 f4       	brcc	.+40     	; 0x1c2 <vfprintf+0xd0>
 19a:	8b 32       	cpi	r24, 0x2B	; 43
 19c:	69 f0       	breq	.+26     	; 0x1b8 <vfprintf+0xc6>
 19e:	30 f4       	brcc	.+12     	; 0x1ac <vfprintf+0xba>
 1a0:	80 32       	cpi	r24, 0x20	; 32
 1a2:	59 f0       	breq	.+22     	; 0x1ba <vfprintf+0xc8>
 1a4:	83 32       	cpi	r24, 0x23	; 35
 1a6:	69 f4       	brne	.+26     	; 0x1c2 <vfprintf+0xd0>
 1a8:	10 61       	ori	r17, 0x10	; 16
 1aa:	2c c0       	rjmp	.+88     	; 0x204 <vfprintf+0x112>
 1ac:	8d 32       	cpi	r24, 0x2D	; 45
 1ae:	39 f0       	breq	.+14     	; 0x1be <vfprintf+0xcc>
 1b0:	80 33       	cpi	r24, 0x30	; 48
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <vfprintf+0xd0>
 1b4:	11 60       	ori	r17, 0x01	; 1
 1b6:	26 c0       	rjmp	.+76     	; 0x204 <vfprintf+0x112>
 1b8:	12 60       	ori	r17, 0x02	; 2
 1ba:	14 60       	ori	r17, 0x04	; 4
 1bc:	23 c0       	rjmp	.+70     	; 0x204 <vfprintf+0x112>
 1be:	18 60       	ori	r17, 0x08	; 8
 1c0:	21 c0       	rjmp	.+66     	; 0x204 <vfprintf+0x112>
 1c2:	17 fd       	sbrc	r17, 7
 1c4:	29 c0       	rjmp	.+82     	; 0x218 <vfprintf+0x126>
 1c6:	90 ed       	ldi	r25, 0xD0	; 208
 1c8:	98 0f       	add	r25, r24
 1ca:	9a 30       	cpi	r25, 0x0A	; 10
 1cc:	78 f4       	brcc	.+30     	; 0x1ec <vfprintf+0xfa>
 1ce:	16 ff       	sbrs	r17, 6
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <vfprintf+0xec>
 1d2:	aa e0       	ldi	r26, 0x0A	; 10
 1d4:	ba 9e       	mul	r11, r26
 1d6:	90 0d       	add	r25, r0
 1d8:	11 24       	eor	r1, r1
 1da:	b9 2e       	mov	r11, r25
 1dc:	13 c0       	rjmp	.+38     	; 0x204 <vfprintf+0x112>
 1de:	ea e0       	ldi	r30, 0x0A	; 10
 1e0:	0e 9f       	mul	r16, r30
 1e2:	90 0d       	add	r25, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	09 2f       	mov	r16, r25
 1e8:	10 62       	ori	r17, 0x20	; 32
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <vfprintf+0x112>
 1ec:	8e 32       	cpi	r24, 0x2E	; 46
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <vfprintf+0x106>
 1f0:	16 fd       	sbrc	r17, 6
 1f2:	85 c1       	rjmp	.+778    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 1f4:	10 64       	ori	r17, 0x40	; 64
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <vfprintf+0x112>
 1f8:	8c 36       	cpi	r24, 0x6C	; 108
 1fa:	11 f4       	brne	.+4      	; 0x200 <vfprintf+0x10e>
 1fc:	10 68       	ori	r17, 0x80	; 128
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <vfprintf+0x112>
 200:	88 36       	cpi	r24, 0x68	; 104
 202:	51 f4       	brne	.+20     	; 0x218 <vfprintf+0x126>
 204:	f3 01       	movw	r30, r6
 206:	84 91       	lpm	r24, Z
 208:	87 fc       	sbrc	r8, 7
 20a:	80 81       	ld	r24, Z
 20c:	ff ef       	ldi	r31, 0xFF	; 255
 20e:	6f 1a       	sub	r6, r31
 210:	7f 0a       	sbc	r7, r31
 212:	8f 0a       	sbc	r8, r31
 214:	81 11       	cpse	r24, r1
 216:	bf cf       	rjmp	.-130    	; 0x196 <vfprintf+0xa4>
 218:	98 2f       	mov	r25, r24
 21a:	9f 7d       	andi	r25, 0xDF	; 223
 21c:	95 54       	subi	r25, 0x45	; 69
 21e:	93 30       	cpi	r25, 0x03	; 3
 220:	28 f4       	brcc	.+10     	; 0x22c <vfprintf+0x13a>
 222:	24 e0       	ldi	r18, 0x04	; 4
 224:	e2 0e       	add	r14, r18
 226:	f1 1c       	adc	r15, r1
 228:	99 82       	std	Y+1, r9	; 0x01
 22a:	0f c0       	rjmp	.+30     	; 0x24a <vfprintf+0x158>
 22c:	83 36       	cpi	r24, 0x63	; 99
 22e:	31 f0       	breq	.+12     	; 0x23c <vfprintf+0x14a>
 230:	83 37       	cpi	r24, 0x73	; 115
 232:	91 f0       	breq	.+36     	; 0x258 <vfprintf+0x166>
 234:	83 35       	cpi	r24, 0x53	; 83
 236:	09 f0       	breq	.+2      	; 0x23a <vfprintf+0x148>
 238:	63 c0       	rjmp	.+198    	; 0x300 <vfprintf+0x20e>
 23a:	27 c0       	rjmp	.+78     	; 0x28a <vfprintf+0x198>
 23c:	f7 01       	movw	r30, r14
 23e:	80 81       	ld	r24, Z
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	97 01       	movw	r18, r14
 244:	2e 5f       	subi	r18, 0xFE	; 254
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	79 01       	movw	r14, r18
 24a:	28 88       	ldd	r2, Y+16	; 0x10
 24c:	39 88       	ldd	r3, Y+17	; 0x11
 24e:	4a 88       	ldd	r4, Y+18	; 0x12
 250:	aa 24       	eor	r10, r10
 252:	a3 94       	inc	r10
 254:	b1 2c       	mov	r11, r1
 256:	17 c0       	rjmp	.+46     	; 0x286 <vfprintf+0x194>
 258:	a7 01       	movw	r20, r14
 25a:	4d 5f       	subi	r20, 0xFD	; 253
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	5f 87       	std	Y+15, r21	; 0x0f
 260:	4e 87       	std	Y+14, r20	; 0x0e
 262:	f7 01       	movw	r30, r14
 264:	20 80       	ld	r2, Z
 266:	31 80       	ldd	r3, Z+1	; 0x01
 268:	42 80       	ldd	r4, Z+2	; 0x02
 26a:	16 ff       	sbrs	r17, 6
 26c:	03 c0       	rjmp	.+6      	; 0x274 <vfprintf+0x182>
 26e:	4b 2d       	mov	r20, r11
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <vfprintf+0x186>
 274:	4f ef       	ldi	r20, 0xFF	; 255
 276:	5f ef       	ldi	r21, 0xFF	; 255
 278:	84 2d       	mov	r24, r4
 27a:	b1 01       	movw	r22, r2
 27c:	0e 94 b2 04 	call	0x964	; 0x964 <strnlen>
 280:	5c 01       	movw	r10, r24
 282:	ee 84       	ldd	r14, Y+14	; 0x0e
 284:	ff 84       	ldd	r15, Y+15	; 0x0f
 286:	1f 77       	andi	r17, 0x7F	; 127
 288:	18 c0       	rjmp	.+48     	; 0x2ba <vfprintf+0x1c8>
 28a:	97 01       	movw	r18, r14
 28c:	2d 5f       	subi	r18, 0xFD	; 253
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	3f 87       	std	Y+15, r19	; 0x0f
 292:	2e 87       	std	Y+14, r18	; 0x0e
 294:	f7 01       	movw	r30, r14
 296:	20 80       	ld	r2, Z
 298:	31 80       	ldd	r3, Z+1	; 0x01
 29a:	42 80       	ldd	r4, Z+2	; 0x02
 29c:	16 ff       	sbrs	r17, 6
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <vfprintf+0x1b4>
 2a0:	4b 2d       	mov	r20, r11
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <vfprintf+0x1b8>
 2a6:	4f ef       	ldi	r20, 0xFF	; 255
 2a8:	5f ef       	ldi	r21, 0xFF	; 255
 2aa:	84 2d       	mov	r24, r4
 2ac:	b1 01       	movw	r22, r2
 2ae:	0e 94 b2 04 	call	0x964	; 0x964 <strnlen>
 2b2:	5c 01       	movw	r10, r24
 2b4:	10 68       	ori	r17, 0x80	; 128
 2b6:	ee 84       	ldd	r14, Y+14	; 0x0e
 2b8:	ff 84       	ldd	r15, Y+15	; 0x0f
 2ba:	13 fd       	sbrc	r17, 3
 2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <vfprintf+0x206>
 2be:	80 2f       	mov	r24, r16
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	a8 16       	cp	r10, r24
 2c4:	b9 06       	cpc	r11, r25
 2c6:	c0 f4       	brcc	.+48     	; 0x2f8 <vfprintf+0x206>
 2c8:	b6 01       	movw	r22, r12
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 2d2:	01 50       	subi	r16, 0x01	; 1
 2d4:	f4 cf       	rjmp	.-24     	; 0x2be <vfprintf+0x1cc>
 2d6:	f1 01       	movw	r30, r2
 2d8:	84 91       	lpm	r24, Z
 2da:	47 fc       	sbrc	r4, 7
 2dc:	80 81       	ld	r24, Z
 2de:	ff ef       	ldi	r31, 0xFF	; 255
 2e0:	2f 1a       	sub	r2, r31
 2e2:	3f 0a       	sbc	r3, r31
 2e4:	4f 0a       	sbc	r4, r31
 2e6:	b6 01       	movw	r22, r12
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 2ee:	01 11       	cpse	r16, r1
 2f0:	01 50       	subi	r16, 0x01	; 1
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	a2 1a       	sub	r10, r18
 2f6:	b1 08       	sbc	r11, r1
 2f8:	a1 14       	cp	r10, r1
 2fa:	b1 04       	cpc	r11, r1
 2fc:	61 f7       	brne	.-40     	; 0x2d6 <vfprintf+0x1e4>
 2fe:	f5 c0       	rjmp	.+490    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 300:	84 36       	cpi	r24, 0x64	; 100
 302:	11 f0       	breq	.+4      	; 0x308 <vfprintf+0x216>
 304:	89 36       	cpi	r24, 0x69	; 105
 306:	71 f5       	brne	.+92     	; 0x364 <vfprintf+0x272>
 308:	f7 01       	movw	r30, r14
 30a:	17 ff       	sbrs	r17, 7
 30c:	08 c0       	rjmp	.+16     	; 0x31e <vfprintf+0x22c>
 30e:	60 81       	ld	r22, Z
 310:	71 81       	ldd	r23, Z+1	; 0x01
 312:	82 81       	ldd	r24, Z+2	; 0x02
 314:	93 81       	ldd	r25, Z+3	; 0x03
 316:	97 01       	movw	r18, r14
 318:	2c 5f       	subi	r18, 0xFC	; 252
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	09 c0       	rjmp	.+18     	; 0x330 <vfprintf+0x23e>
 31e:	60 81       	ld	r22, Z
 320:	71 81       	ldd	r23, Z+1	; 0x01
 322:	07 2e       	mov	r0, r23
 324:	00 0c       	add	r0, r0
 326:	88 0b       	sbc	r24, r24
 328:	99 0b       	sbc	r25, r25
 32a:	97 01       	movw	r18, r14
 32c:	2e 5f       	subi	r18, 0xFE	; 254
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	79 01       	movw	r14, r18
 332:	1f 76       	andi	r17, 0x6F	; 111
 334:	31 2e       	mov	r3, r17
 336:	97 ff       	sbrs	r25, 7
 338:	0a c0       	rjmp	.+20     	; 0x34e <vfprintf+0x25c>
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	31 2f       	mov	r19, r17
 34a:	30 68       	ori	r19, 0x80	; 128
 34c:	33 2e       	mov	r3, r19
 34e:	2a e0       	ldi	r18, 0x0A	; 10
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	ae 01       	movw	r20, r28
 354:	4f 5f       	subi	r20, 0xFF	; 255
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	0e 94 22 03 	call	0x644	; 0x644 <__ultoa_invert>
 35c:	48 2e       	mov	r4, r24
 35e:	4c 85       	ldd	r20, Y+12	; 0x0c
 360:	44 1a       	sub	r4, r20
 362:	4a c0       	rjmp	.+148    	; 0x3f8 <vfprintf+0x306>
 364:	85 37       	cpi	r24, 0x75	; 117
 366:	29 f4       	brne	.+10     	; 0x372 <vfprintf+0x280>
 368:	1f 7e       	andi	r17, 0xEF	; 239
 36a:	a1 2e       	mov	r10, r17
 36c:	2a e0       	ldi	r18, 0x0A	; 10
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	25 c0       	rjmp	.+74     	; 0x3bc <vfprintf+0x2ca>
 372:	51 2f       	mov	r21, r17
 374:	59 7f       	andi	r21, 0xF9	; 249
 376:	a5 2e       	mov	r10, r21
 378:	8f 36       	cpi	r24, 0x6F	; 111
 37a:	c1 f0       	breq	.+48     	; 0x3ac <vfprintf+0x2ba>
 37c:	18 f4       	brcc	.+6      	; 0x384 <vfprintf+0x292>
 37e:	88 35       	cpi	r24, 0x58	; 88
 380:	79 f0       	breq	.+30     	; 0x3a0 <vfprintf+0x2ae>
 382:	bd c0       	rjmp	.+378    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 384:	80 37       	cpi	r24, 0x70	; 112
 386:	19 f0       	breq	.+6      	; 0x38e <vfprintf+0x29c>
 388:	88 37       	cpi	r24, 0x78	; 120
 38a:	21 f0       	breq	.+8      	; 0x394 <vfprintf+0x2a2>
 38c:	b8 c0       	rjmp	.+368    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 38e:	85 2f       	mov	r24, r21
 390:	80 61       	ori	r24, 0x10	; 16
 392:	a8 2e       	mov	r10, r24
 394:	a4 fe       	sbrs	r10, 4
 396:	0d c0       	rjmp	.+26     	; 0x3b2 <vfprintf+0x2c0>
 398:	9a 2d       	mov	r25, r10
 39a:	94 60       	ori	r25, 0x04	; 4
 39c:	a9 2e       	mov	r10, r25
 39e:	09 c0       	rjmp	.+18     	; 0x3b2 <vfprintf+0x2c0>
 3a0:	14 ff       	sbrs	r17, 4
 3a2:	0a c0       	rjmp	.+20     	; 0x3b8 <vfprintf+0x2c6>
 3a4:	a5 2f       	mov	r26, r21
 3a6:	a6 60       	ori	r26, 0x06	; 6
 3a8:	aa 2e       	mov	r10, r26
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <vfprintf+0x2c6>
 3ac:	28 e0       	ldi	r18, 0x08	; 8
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <vfprintf+0x2ca>
 3b2:	20 e1       	ldi	r18, 0x10	; 16
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <vfprintf+0x2ca>
 3b8:	20 e1       	ldi	r18, 0x10	; 16
 3ba:	32 e0       	ldi	r19, 0x02	; 2
 3bc:	f7 01       	movw	r30, r14
 3be:	a7 fe       	sbrs	r10, 7
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <vfprintf+0x2e0>
 3c2:	60 81       	ld	r22, Z
 3c4:	71 81       	ldd	r23, Z+1	; 0x01
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	a7 01       	movw	r20, r14
 3cc:	4c 5f       	subi	r20, 0xFC	; 252
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <vfprintf+0x2ee>
 3d2:	60 81       	ld	r22, Z
 3d4:	71 81       	ldd	r23, Z+1	; 0x01
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a7 01       	movw	r20, r14
 3dc:	4e 5f       	subi	r20, 0xFE	; 254
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	7a 01       	movw	r14, r20
 3e2:	ae 01       	movw	r20, r28
 3e4:	4f 5f       	subi	r20, 0xFF	; 255
 3e6:	5f 4f       	sbci	r21, 0xFF	; 255
 3e8:	0e 94 22 03 	call	0x644	; 0x644 <__ultoa_invert>
 3ec:	48 2e       	mov	r4, r24
 3ee:	5c 85       	ldd	r21, Y+12	; 0x0c
 3f0:	45 1a       	sub	r4, r21
 3f2:	8a 2d       	mov	r24, r10
 3f4:	8f 77       	andi	r24, 0x7F	; 127
 3f6:	38 2e       	mov	r3, r24
 3f8:	36 fe       	sbrs	r3, 6
 3fa:	0d c0       	rjmp	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3fc:	93 2d       	mov	r25, r3
 3fe:	9e 7f       	andi	r25, 0xFE	; 254
 400:	a9 2e       	mov	r10, r25
 402:	4b 14       	cp	r4, r11
 404:	58 f4       	brcc	.+22     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 406:	34 fe       	sbrs	r3, 4
 408:	0b c0       	rjmp	.+22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40a:	32 fc       	sbrc	r3, 2
 40c:	09 c0       	rjmp	.+18     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40e:	a3 2d       	mov	r26, r3
 410:	ae 7e       	andi	r26, 0xEE	; 238
 412:	aa 2e       	mov	r10, r26
 414:	05 c0       	rjmp	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	14 2d       	mov	r17, r4
 418:	a3 2c       	mov	r10, r3
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	14 2d       	mov	r17, r4
 41e:	01 c0       	rjmp	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	1b 2d       	mov	r17, r11
 422:	a4 fe       	sbrs	r10, 4
 424:	0e c0       	rjmp	.+28     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 426:	fe 01       	movw	r30, r28
 428:	e4 0d       	add	r30, r4
 42a:	f1 1d       	adc	r31, r1
 42c:	80 81       	ld	r24, Z
 42e:	80 33       	cpi	r24, 0x30	; 48
 430:	21 f4       	brne	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 432:	ea 2d       	mov	r30, r10
 434:	e9 7e       	andi	r30, 0xE9	; 233
 436:	ae 2e       	mov	r10, r30
 438:	08 c0       	rjmp	.+16     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 43a:	a2 fe       	sbrs	r10, 2
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 43e:	1e 5f       	subi	r17, 0xFE	; 254
 440:	04 c0       	rjmp	.+8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 442:	8a 2d       	mov	r24, r10
 444:	86 78       	andi	r24, 0x86	; 134
 446:	09 f0       	breq	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	1f 5f       	subi	r17, 0xFF	; 255
 44a:	a3 fc       	sbrc	r10, 3
 44c:	11 c0       	rjmp	.+34     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 44e:	a0 fe       	sbrs	r10, 0
 450:	06 c0       	rjmp	.+12     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 452:	10 17       	cp	r17, r16
 454:	88 f4       	brcc	.+34     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 456:	04 0d       	add	r16, r4
 458:	b0 2e       	mov	r11, r16
 45a:	b1 1a       	sub	r11, r17
 45c:	0e c0       	rjmp	.+28     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 45e:	10 17       	cp	r17, r16
 460:	60 f4       	brcc	.+24     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 462:	b6 01       	movw	r22, r12
 464:	80 e2       	ldi	r24, 0x20	; 32
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 46c:	1f 5f       	subi	r17, 0xFF	; 255
 46e:	f7 cf       	rjmp	.-18     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 470:	10 17       	cp	r17, r16
 472:	18 f4       	brcc	.+6      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 474:	01 1b       	sub	r16, r17
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	b4 2c       	mov	r11, r4
 47a:	00 e0       	ldi	r16, 0x00	; 0
 47c:	a4 fe       	sbrs	r10, 4
 47e:	10 c0       	rjmp	.+32     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 480:	b6 01       	movw	r22, r12
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 48a:	a2 fe       	sbrs	r10, 2
 48c:	17 c0       	rjmp	.+46     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 48e:	a1 fc       	sbrc	r10, 1
 490:	03 c0       	rjmp	.+6      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 492:	88 e7       	ldi	r24, 0x78	; 120
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 e5       	ldi	r24, 0x58	; 88
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	b6 01       	movw	r22, r12
 49e:	0c c0       	rjmp	.+24     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4a0:	8a 2d       	mov	r24, r10
 4a2:	86 78       	andi	r24, 0x86	; 134
 4a4:	59 f0       	breq	.+22     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4a6:	a1 fe       	sbrs	r10, 1
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	8b e2       	ldi	r24, 0x2B	; 43
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	a7 fc       	sbrc	r10, 7
 4b2:	8d e2       	ldi	r24, 0x2D	; 45
 4b4:	b6 01       	movw	r22, r12
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 4bc:	4b 14       	cp	r4, r11
 4be:	38 f4       	brcc	.+14     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4c0:	b6 01       	movw	r22, r12
 4c2:	80 e3       	ldi	r24, 0x30	; 48
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 4ca:	ba 94       	dec	r11
 4cc:	f7 cf       	rjmp	.-18     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4ce:	4a 94       	dec	r4
 4d0:	e1 e0       	ldi	r30, 0x01	; 1
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	ec 0f       	add	r30, r28
 4d6:	fd 1f       	adc	r31, r29
 4d8:	e4 0d       	add	r30, r4
 4da:	f1 1d       	adc	r31, r1
 4dc:	80 81       	ld	r24, Z
 4de:	b6 01       	movw	r22, r12
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 4e6:	41 10       	cpse	r4, r1
 4e8:	f2 cf       	rjmp	.-28     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ea:	00 23       	and	r16, r16
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ee:	30 ce       	rjmp	.-928    	; 0x150 <vfprintf+0x5e>
 4f0:	b6 01       	movw	r22, r12
 4f2:	80 e2       	ldi	r24, 0x20	; 32
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 80 03 	call	0x700	; 0x700 <fputc>
 4fa:	01 50       	subi	r16, 0x01	; 1
 4fc:	f6 cf       	rjmp	.-20     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4fe:	f6 01       	movw	r30, r12
 500:	87 81       	ldd	r24, Z+7	; 0x07
 502:	90 85       	ldd	r25, Z+8	; 0x08
 504:	02 c0       	rjmp	.+4      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	9f ef       	ldi	r25, 0xFF	; 255
 50a:	62 96       	adiw	r28, 0x12	; 18
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	df 90       	pop	r13
 524:	cf 90       	pop	r12
 526:	bf 90       	pop	r11
 528:	af 90       	pop	r10
 52a:	9f 90       	pop	r9
 52c:	8f 90       	pop	r8
 52e:	7f 90       	pop	r7
 530:	6f 90       	pop	r6
 532:	4f 90       	pop	r4
 534:	3f 90       	pop	r3
 536:	2f 90       	pop	r2
 538:	08 95       	ret

Disassembly of section .text.avrlibc:

00000964 <strnlen>:
 964:	cf 92       	push	r12
 966:	df 92       	push	r13
 968:	ef 92       	push	r14
 96a:	6b 01       	movw	r12, r22
 96c:	e8 2e       	mov	r14, r24
 96e:	a8 2f       	mov	r26, r24
 970:	cb 01       	movw	r24, r22
 972:	41 15       	cp	r20, r1
 974:	51 05       	cpc	r21, r1
 976:	31 f4       	brne	.+12     	; 0x984 <strnlen+0x20>
 978:	8c 19       	sub	r24, r12
 97a:	9d 09       	sbc	r25, r13
 97c:	ef 90       	pop	r14
 97e:	df 90       	pop	r13
 980:	cf 90       	pop	r12
 982:	08 95       	ret
 984:	fc 01       	movw	r30, r24
 986:	24 91       	lpm	r18, Z
 988:	a7 fd       	sbrc	r26, 7
 98a:	20 81       	ld	r18, Z
 98c:	22 23       	and	r18, r18
 98e:	a1 f3       	breq	.-24     	; 0x978 <strnlen+0x14>
 990:	01 96       	adiw	r24, 0x01	; 1
 992:	a1 1d       	adc	r26, r1
 994:	41 50       	subi	r20, 0x01	; 1
 996:	51 09       	sbc	r21, r1
 998:	ec cf       	rjmp	.-40     	; 0x972 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000700 <fputc>:
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	fb 01       	movw	r30, r22
 70a:	24 81       	ldd	r18, Z+4	; 0x04
 70c:	21 fd       	sbrc	r18, 1
 70e:	03 c0       	rjmp	.+6      	; 0x716 <fputc+0x16>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	9f ef       	ldi	r25, 0xFF	; 255
 714:	2c c0       	rjmp	.+88     	; 0x76e <fputc+0x6e>
 716:	22 ff       	sbrs	r18, 2
 718:	16 c0       	rjmp	.+44     	; 0x746 <fputc+0x46>
 71a:	47 81       	ldd	r20, Z+7	; 0x07
 71c:	50 85       	ldd	r21, Z+8	; 0x08
 71e:	25 81       	ldd	r18, Z+5	; 0x05
 720:	36 81       	ldd	r19, Z+6	; 0x06
 722:	42 17       	cp	r20, r18
 724:	53 07       	cpc	r21, r19
 726:	44 f4       	brge	.+16     	; 0x738 <fputc+0x38>
 728:	a0 81       	ld	r26, Z
 72a:	b1 81       	ldd	r27, Z+1	; 0x01
 72c:	9d 01       	movw	r18, r26
 72e:	2f 5f       	subi	r18, 0xFF	; 255
 730:	3f 4f       	sbci	r19, 0xFF	; 255
 732:	31 83       	std	Z+1, r19	; 0x01
 734:	20 83       	st	Z, r18
 736:	8c 93       	st	X, r24
 738:	27 81       	ldd	r18, Z+7	; 0x07
 73a:	30 85       	ldd	r19, Z+8	; 0x08
 73c:	2f 5f       	subi	r18, 0xFF	; 255
 73e:	3f 4f       	sbci	r19, 0xFF	; 255
 740:	30 87       	std	Z+8, r19	; 0x08
 742:	27 83       	std	Z+7, r18	; 0x07
 744:	14 c0       	rjmp	.+40     	; 0x76e <fputc+0x6e>
 746:	8b 01       	movw	r16, r22
 748:	ec 01       	movw	r28, r24
 74a:	fb 01       	movw	r30, r22
 74c:	01 84       	ldd	r0, Z+9	; 0x09
 74e:	f2 85       	ldd	r31, Z+10	; 0x0a
 750:	e0 2d       	mov	r30, r0
 752:	09 95       	icall
 754:	89 2b       	or	r24, r25
 756:	e1 f6       	brne	.-72     	; 0x710 <fputc+0x10>
 758:	d8 01       	movw	r26, r16
 75a:	17 96       	adiw	r26, 0x07	; 7
 75c:	8d 91       	ld	r24, X+
 75e:	9c 91       	ld	r25, X
 760:	18 97       	sbiw	r26, 0x08	; 8
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	18 96       	adiw	r26, 0x08	; 8
 766:	9c 93       	st	X, r25
 768:	8e 93       	st	-X, r24
 76a:	17 97       	sbiw	r26, 0x07	; 7
 76c:	ce 01       	movw	r24, r28
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	08 95       	ret

Disassembly of section .text.avrlibc:

00000644 <__ultoa_invert>:
 644:	fa 01       	movw	r30, r20
 646:	aa 27       	eor	r26, r26
 648:	28 30       	cpi	r18, 0x08	; 8
 64a:	51 f1       	breq	.+84     	; 0x6a0 <__ultoa_invert+0x5c>
 64c:	20 31       	cpi	r18, 0x10	; 16
 64e:	81 f1       	breq	.+96     	; 0x6b0 <__ultoa_invert+0x6c>
 650:	e8 94       	clt
 652:	6f 93       	push	r22
 654:	6e 7f       	andi	r22, 0xFE	; 254
 656:	6e 5f       	subi	r22, 0xFE	; 254
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	af 4f       	sbci	r26, 0xFF	; 255
 660:	b1 e0       	ldi	r27, 0x01	; 1
 662:	3e d0       	rcall	.+124    	; 0x6e0 <__ultoa_invert+0x9c>
 664:	b4 e0       	ldi	r27, 0x04	; 4
 666:	3c d0       	rcall	.+120    	; 0x6e0 <__ultoa_invert+0x9c>
 668:	67 0f       	add	r22, r23
 66a:	78 1f       	adc	r23, r24
 66c:	89 1f       	adc	r24, r25
 66e:	9a 1f       	adc	r25, r26
 670:	a1 1d       	adc	r26, r1
 672:	68 0f       	add	r22, r24
 674:	79 1f       	adc	r23, r25
 676:	8a 1f       	adc	r24, r26
 678:	91 1d       	adc	r25, r1
 67a:	a1 1d       	adc	r26, r1
 67c:	6a 0f       	add	r22, r26
 67e:	71 1d       	adc	r23, r1
 680:	81 1d       	adc	r24, r1
 682:	91 1d       	adc	r25, r1
 684:	a1 1d       	adc	r26, r1
 686:	20 d0       	rcall	.+64     	; 0x6c8 <__ultoa_invert+0x84>
 688:	09 f4       	brne	.+2      	; 0x68c <__ultoa_invert+0x48>
 68a:	68 94       	set
 68c:	3f 91       	pop	r19
 68e:	2a e0       	ldi	r18, 0x0A	; 10
 690:	26 9f       	mul	r18, r22
 692:	11 24       	eor	r1, r1
 694:	30 19       	sub	r19, r0
 696:	30 5d       	subi	r19, 0xD0	; 208
 698:	31 93       	st	Z+, r19
 69a:	de f6       	brtc	.-74     	; 0x652 <__ultoa_invert+0xe>
 69c:	cf 01       	movw	r24, r30
 69e:	08 95       	ret
 6a0:	46 2f       	mov	r20, r22
 6a2:	47 70       	andi	r20, 0x07	; 7
 6a4:	40 5d       	subi	r20, 0xD0	; 208
 6a6:	41 93       	st	Z+, r20
 6a8:	b3 e0       	ldi	r27, 0x03	; 3
 6aa:	0f d0       	rcall	.+30     	; 0x6ca <__ultoa_invert+0x86>
 6ac:	c9 f7       	brne	.-14     	; 0x6a0 <__ultoa_invert+0x5c>
 6ae:	f6 cf       	rjmp	.-20     	; 0x69c <__ultoa_invert+0x58>
 6b0:	46 2f       	mov	r20, r22
 6b2:	4f 70       	andi	r20, 0x0F	; 15
 6b4:	40 5d       	subi	r20, 0xD0	; 208
 6b6:	4a 33       	cpi	r20, 0x3A	; 58
 6b8:	18 f0       	brcs	.+6      	; 0x6c0 <__ultoa_invert+0x7c>
 6ba:	49 5d       	subi	r20, 0xD9	; 217
 6bc:	31 fd       	sbrc	r19, 1
 6be:	40 52       	subi	r20, 0x20	; 32
 6c0:	41 93       	st	Z+, r20
 6c2:	02 d0       	rcall	.+4      	; 0x6c8 <__ultoa_invert+0x84>
 6c4:	a9 f7       	brne	.-22     	; 0x6b0 <__ultoa_invert+0x6c>
 6c6:	ea cf       	rjmp	.-44     	; 0x69c <__ultoa_invert+0x58>
 6c8:	b4 e0       	ldi	r27, 0x04	; 4
 6ca:	a6 95       	lsr	r26
 6cc:	97 95       	ror	r25
 6ce:	87 95       	ror	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	ba 95       	dec	r27
 6d6:	c9 f7       	brne	.-14     	; 0x6ca <__ultoa_invert+0x86>
 6d8:	00 97       	sbiw	r24, 0x00	; 0
 6da:	61 05       	cpc	r22, r1
 6dc:	71 05       	cpc	r23, r1
 6de:	08 95       	ret
 6e0:	9b 01       	movw	r18, r22
 6e2:	ac 01       	movw	r20, r24
 6e4:	0a 2e       	mov	r0, r26
 6e6:	06 94       	lsr	r0
 6e8:	57 95       	ror	r21
 6ea:	47 95       	ror	r20
 6ec:	37 95       	ror	r19
 6ee:	27 95       	ror	r18
 6f0:	ba 95       	dec	r27
 6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__ultoa_invert+0xa2>
 6f4:	62 0f       	add	r22, r18
 6f6:	73 1f       	adc	r23, r19
 6f8:	84 1f       	adc	r24, r20
 6fa:	95 1f       	adc	r25, r21
 6fc:	a0 1d       	adc	r26, r0
 6fe:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000008f6 <__prologue_saves__>:
 8f6:	2f 92       	push	r2
 8f8:	3f 92       	push	r3
 8fa:	4f 92       	push	r4
 8fc:	5f 92       	push	r5
 8fe:	6f 92       	push	r6
 900:	7f 92       	push	r7
 902:	8f 92       	push	r8
 904:	9f 92       	push	r9
 906:	af 92       	push	r10
 908:	bf 92       	push	r11
 90a:	cf 92       	push	r12
 90c:	df 92       	push	r13
 90e:	ef 92       	push	r14
 910:	ff 92       	push	r15
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	ca 1b       	sub	r28, r26
 920:	db 0b       	sbc	r29, r27
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	f8 94       	cli
 926:	de bf       	out	0x3e, r29	; 62
 928:	0f be       	out	0x3f, r0	; 63
 92a:	cd bf       	out	0x3d, r28	; 61
 92c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000099a <__epilogue_restores__>:
 99a:	2a 88       	ldd	r2, Y+18	; 0x12
 99c:	39 88       	ldd	r3, Y+17	; 0x11
 99e:	48 88       	ldd	r4, Y+16	; 0x10
 9a0:	5f 84       	ldd	r5, Y+15	; 0x0f
 9a2:	6e 84       	ldd	r6, Y+14	; 0x0e
 9a4:	7d 84       	ldd	r7, Y+13	; 0x0d
 9a6:	8c 84       	ldd	r8, Y+12	; 0x0c
 9a8:	9b 84       	ldd	r9, Y+11	; 0x0b
 9aa:	aa 84       	ldd	r10, Y+10	; 0x0a
 9ac:	b9 84       	ldd	r11, Y+9	; 0x09
 9ae:	c8 84       	ldd	r12, Y+8	; 0x08
 9b0:	df 80       	ldd	r13, Y+7	; 0x07
 9b2:	ee 80       	ldd	r14, Y+6	; 0x06
 9b4:	fd 80       	ldd	r15, Y+5	; 0x05
 9b6:	0c 81       	ldd	r16, Y+4	; 0x04
 9b8:	1b 81       	ldd	r17, Y+3	; 0x03
 9ba:	aa 81       	ldd	r26, Y+2	; 0x02
 9bc:	b9 81       	ldd	r27, Y+1	; 0x01
 9be:	ce 0f       	add	r28, r30
 9c0:	d1 1d       	adc	r29, r1
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	ed 01       	movw	r28, r26
 9ce:	08 95       	ret
