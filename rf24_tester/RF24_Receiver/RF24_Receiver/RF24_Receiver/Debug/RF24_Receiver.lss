
RF24_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005e4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000408  00800100  00800100  000005e4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000613  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002052  00000000  00000000  00000733  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b06  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f0  00000000  00000000  0000328b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  00003c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028c  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a75  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004e6  000004e6  000005da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 00000039  000000d4  000000d4  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    0000008e  000001a2  000001a2  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.data_len 00000001  0080050e  0080050e  000005e4  2**0
                  ALLOC
 17 .data.tx_addr 00000003  00800508  000004ea  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .data.rx_addr 00000003  0080050b  000004ed  000005e1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.nrf24_ce_digitalWrite 00000028  000003fc  000003fc  000004f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.nrf24_csn_digitalWrite 00000014  00000494  00000494  00000588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_rx_address 00000038  0000033e  0000033e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_tx_address 0000006c  00000230  00000230  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_payloadLength 00000040  000002fe  000002fe  000003f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_getStatus 0000001c  0000044a  0000044a  0000053e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_configRegister 0000002a  000003d2  000003d2  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_powerUpRx 00000030  00000376  00000376  0000046a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_getData 00000062  0000029c  0000029c  00000390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.nrf24_readRegister 00000026  00000424  00000424  00000518  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.nrf24_rxFifoEmpty 00000012  000004a8  000004a8  0000059c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.nrf24_dataReady 00000012  000004ba  000004ba  000005ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.nrf24_config 00000094  0000010e  0000010e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .data.rf24_mode 00000001  0080050f  0000010d  00000201  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .text.spi_exchange 0000000c  000004da  000004da  000005ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.spi_init 00000016  0000047e  0000047e  00000572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.uart_init 00000018  00000466  00000466  0000055a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.uart_putc 0000000e  000004cc  000004cc  000005c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.uart_puts 0000002c  000003a6  000003a6  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
   8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
   c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  10:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  14:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  18:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  1c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  20:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  24:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  28:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  2c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  30:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  34:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  38:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  3c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  40:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  44:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  48:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  4c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  50:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  54:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  58:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  5c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  60:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
  64:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	05 08       	sbc	r0, r5
  6c:	80 05       	cpc	r24, r0
  6e:	08 05       	cpc	r16, r8
  70:	0e 00       	.word	0x000e	; ????
  72:	04 ea       	ldi	r16, 0xA4	; 164
  74:	05 0e       	add	r0, r21
  76:	05 0f       	add	r16, r21
  78:	80 05       	cpc	r24, r0
  7a:	0f 05       	cpc	r16, r15
  7c:	10 00       	.word	0x0010	; ????
  7e:	01 0d       	add	r16, r1

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e8 e6       	ldi	r30, 0x68	; 104
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  cc:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

000004e6 <__bad_interrupt>:
 4e6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000001a2 <main>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	a8 95       	wdr
 1a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1ac:	88 61       	ori	r24, 0x18	; 24
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1b6:	0f be       	out	0x3f, r0	; 63
{
	uint8_t status;
	uint8_t uart_buffer[20]={};
	
	wdt_disable();
	uart_init();
 1b8:	0e 94 33 02 	call	0x466	; 0x466 <uart_init>
	
	uart_puts("\x1b[2J\r\n");
 1bc:	64 ed       	ldi	r22, 0xD4	; 212
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
	
	spi_init();
 1c6:	0e 94 3f 02 	call	0x47e	; 0x47e <spi_init>
	
	status=nrf24_config(tx_addr,rx_addr);
 1ca:	6b e0       	ldi	r22, 0x0B	; 11
 1cc:	75 e0       	ldi	r23, 0x05	; 5
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	95 e0       	ldi	r25, 0x05	; 5
 1d2:	0e 94 87 00 	call	0x10e	; 0x10e <nrf24_config>
	if(status!=0){
 1d6:	81 11       	cpse	r24, r1
 1d8:	23 c0       	rjmp	.+70     	; 0x220 <main+0x7e>
		uart_puts("\r\nNRF24 Not connected!");
		return -1;
	}
		
	uart_puts("\r\nReady to receive.");
 1da:	62 ef       	ldi	r22, 0xF2	; 242
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
	
    while(1)
    {
		while(nrf24_dataReady()==NRF24_DATA_UNAVAILABLE);
 1e4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <nrf24_dataReady>
 1e8:	88 23       	and	r24, r24
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <main+0x42>
		nrf24_getData(data, &data_len);
 1ec:	6e e0       	ldi	r22, 0x0E	; 14
 1ee:	75 e0       	ldi	r23, 0x05	; 5
 1f0:	88 ee       	ldi	r24, 0xE8	; 232
 1f2:	94 e0       	ldi	r25, 0x04	; 4
 1f4:	0e 94 4e 01 	call	0x29c	; 0x29c <nrf24_getData>
		if(data[31]==31 & data_len==32)
 1f8:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <data+0x1f>
 1fc:	20 91 0e 05 	lds	r18, 0x050E	; 0x80050e <data_len>
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	8f 31       	cpi	r24, 0x1F	; 31
 204:	09 f0       	breq	.+2      	; 0x208 <main+0x66>
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	20 32       	cpi	r18, 0x20	; 32
 20c:	09 f0       	breq	.+2      	; 0x210 <main+0x6e>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	89 23       	and	r24, r25
 212:	41 f3       	breq	.-48     	; 0x1e4 <main+0x42>
			uart_puts("\r\nloop");
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	71 e0       	ldi	r23, 0x01	; 1
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
 21e:	e2 cf       	rjmp	.-60     	; 0x1e4 <main+0x42>
	
	spi_init();
	
	status=nrf24_config(tx_addr,rx_addr);
	if(status!=0){
		uart_puts("\r\nNRF24 Not connected!");
 220:	6b ed       	ldi	r22, 0xDB	; 219
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
		while(nrf24_dataReady()==NRF24_DATA_UNAVAILABLE);
		nrf24_getData(data, &data_len);
		if(data[31]==31 & data_len==32)
			uart_puts("\r\nloop");
    }
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	9f ef       	ldi	r25, 0xFF	; 255
 22e:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

000003fc <nrf24_ce_digitalWrite>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 3fc:	88 23       	and	r24, r24
 3fe:	41 f0       	breq	.+16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 400:	85 b1       	in	r24, 0x05	; 5
 402:	81 60       	ori	r24, 0x01	; 1
 404:	85 b9       	out	0x05, r24	; 5
 406:	85 e3       	ldi	r24, 0x35	; 53
 408:	8a 95       	dec	r24
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 00       	nop
 40e:	08 95       	ret
 410:	8f e1       	ldi	r24, 0x1F	; 31
 412:	93 e0       	ldi	r25, 0x03	; 3
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	8e 7f       	andi	r24, 0xFE	; 254
 420:	85 b9       	out	0x05, r24	; 5
 422:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000494 <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 494:	88 23       	and	r24, r24
 496:	21 f0       	breq	.+8      	; 0x4a0 <nrf24_csn_digitalWrite+0xc>
		set_bit(NRF24_PORT, NRF24_CS);
 498:	85 b1       	in	r24, 0x05	; 5
 49a:	84 60       	ori	r24, 0x04	; 4
 49c:	85 b9       	out	0x05, r24	; 5
 49e:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
 4a0:	85 b1       	in	r24, 0x05	; 5
 4a2:	8b 7f       	andi	r24, 0xFB	; 251
 4a4:	85 b9       	out	0x05, r24	; 5
 4a6:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

0000033e <nrf24_rx_address>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	8c 01       	movw	r16, r24
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 34c:	8b e2       	ldi	r24, 0x2B	; 43
 34e:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	07 c0       	rjmp	.+14     	; 0x364 <nrf24_rx_address+0x26>
 356:	f8 01       	movw	r30, r16
 358:	ec 0f       	add	r30, r28
 35a:	f1 1d       	adc	r31, r1
 35c:	80 81       	ld	r24, Z
 35e:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	c3 30       	cpi	r28, 0x03	; 3
 366:	b8 f3       	brcs	.-18     	; 0x356 <nrf24_rx_address+0x18>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

00000230 <nrf24_tx_address>:
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	8c 01       	movw	r16, r24
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	07 c0       	rjmp	.+14     	; 0x256 <nrf24_tx_address+0x26>
 248:	f8 01       	movw	r30, r16
 24a:	ec 0f       	add	r30, r28
 24c:	f1 1d       	adc	r31, r1
 24e:	80 81       	ld	r24, Z
 250:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 254:	cf 5f       	subi	r28, 0xFF	; 255
 256:	c3 30       	cpi	r28, 0x03	; 3
 258:	b8 f3       	brcs	.-18     	; 0x248 <nrf24_tx_address+0x18>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 260:	8f e8       	ldi	r24, 0x8F	; 143
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <nrf24_tx_address+0x34>
 268:	00 c0       	rjmp	.+0      	; 0x26a <nrf24_tx_address+0x3a>
 26a:	00 00       	nop
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 272:	8a e2       	ldi	r24, 0x2A	; 42
 274:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	07 c0       	rjmp	.+14     	; 0x28a <nrf24_tx_address+0x5a>
 27c:	f8 01       	movw	r30, r16
 27e:	ec 0f       	add	r30, r28
 280:	f1 1d       	adc	r31, r1
 282:	80 81       	ld	r24, Z
 284:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 288:	cf 5f       	subi	r28, 0xFF	; 255
 28a:	c3 30       	cpi	r28, 0x03	; 3
 28c:	b8 f3       	brcs	.-18     	; 0x27c <nrf24_tx_address+0x4c>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

Disassembly of section .text.nrf24_payloadLength:

000002fe <nrf24_payloadLength>:
 2fe:	cf 93       	push	r28
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 306:	80 e6       	ldi	r24, 0x60	; 96
 308:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 312:	c8 2f       	mov	r28, r24
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	8c 0f       	add	r24, r28
 31e:	80 32       	cpi	r24, 0x20	; 32
 320:	58 f0       	brcs	.+22     	; 0x338 <nrf24_payloadLength+0x3a>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 328:	82 ee       	ldi	r24, 0xE2	; 226
 32a:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	01 c0       	rjmp	.+2      	; 0x33a <nrf24_payloadLength+0x3c>
 338:	8c 2f       	mov	r24, r28
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

0000044a <nrf24_getStatus>:
	}
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
 44a:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 458:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
	return rv;
}
 460:	8c 2f       	mov	r24, r28
 462:	cf 91       	pop	r28
 464:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

000003d2 <nrf24_configRegister>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	c8 2f       	mov	r28, r24
 3d8:	d6 2f       	mov	r29, r22
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 3e0:	8c 2f       	mov	r24, r28
 3e2:	8f 71       	andi	r24, 0x1F	; 31
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 3ea:	8d 2f       	mov	r24, r29
 3ec:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

00000376 <nrf24_powerUpRx>:
 376:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <rf24_mode>
 37a:	88 23       	and	r24, r24
 37c:	99 f0       	breq	.+38     	; 0x3a4 <nrf24_powerUpRx+0x2e>
 37e:	6f e7       	ldi	r22, 0x7F	; 127
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 38e:	8f e8       	ldi	r24, 0x8F	; 143
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <nrf24_powerUpRx+0x1c>
 396:	00 c0       	rjmp	.+0      	; 0x398 <nrf24_powerUpRx+0x22>
 398:	00 00       	nop
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <nrf24_ce_digitalWrite>
 3a0:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <rf24_mode>
 3a4:	08 95       	ret

Disassembly of section .text.nrf24_getData:

0000029c <nrf24_getData>:
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	6c 01       	movw	r12, r24
 2ac:	7b 01       	movw	r14, r22
 2ae:	60 e4       	ldi	r22, 0x40	; 64
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 2b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nrf24_payloadLength>
 2ba:	f7 01       	movw	r30, r14
 2bc:	80 83       	st	Z, r24
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 2c4:	81 e6       	ldi	r24, 0x61	; 97
 2c6:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <nrf24_getData+0x44>
 2ce:	86 01       	movw	r16, r12
 2d0:	0c 0f       	add	r16, r28
 2d2:	11 1d       	adc	r17, r1
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 2da:	f8 01       	movw	r30, r16
 2dc:	80 83       	st	Z, r24
 2de:	cf 5f       	subi	r28, 0xFF	; 255
 2e0:	f7 01       	movw	r30, r14
 2e2:	80 81       	ld	r24, Z
 2e4:	c8 17       	cp	r28, r24
 2e6:	98 f3       	brcs	.-26     	; 0x2ce <nrf24_getData+0x32>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

Disassembly of section .text.nrf24_readRegister:

00000424 <nrf24_readRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Read n bytes from nrf24 register */
uint8_t nrf24_readRegister(uint8_t reg)
{
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
	uint8_t data;
	nrf24_csn_digitalWrite(LOW);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
	spi_exchange(R_REGISTER | (REGISTER_MASK & reg));
 42e:	8c 2f       	mov	r24, r28
 430:	8f 71       	andi	r24, 0x1F	; 31
 432:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
	data=spi_exchange(0);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 6d 02 	call	0x4da	; 0x4da <spi_exchange>
 43c:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
	return data;
}
 444:	8c 2f       	mov	r24, r28
 446:	cf 91       	pop	r28
 448:	08 95       	ret

Disassembly of section .text.nrf24_rxFifoEmpty:

000004a8 <nrf24_rxFifoEmpty>:
}

/* Checks if RX FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
	uint8_t fifoStatus=nrf24_readRegister(FIFO_STATUS);
 4a8:	87 e1       	ldi	r24, 0x17	; 23
 4aa:	0e 94 12 02 	call	0x424	; 0x424 <nrf24_readRegister>

	if(fifoStatus & (1 << RX_EMPTY)){
 4ae:	80 ff       	sbrs	r24, 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <nrf24_rxFifoEmpty+0xe>
		//uart_puts("\r\nFifo empty");
		return NRF24_DATA_UNAVAILABLE;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
	}
	else{
		//uart_puts("\r\nFifo has data");
		return NRF24_DATA_AVAILABLE;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 4b8:	08 95       	ret

Disassembly of section .text.nrf24_dataReady:

000004ba <nrf24_dataReady>:
}

/* Checks if there is data in the RX FIFO  */
uint8_t nrf24_dataReady()
{
	uint8_t status = nrf24_getStatus();
 4ba:	0e 94 25 02 	call	0x44a	; 0x44a <nrf24_getStatus>
	/* Check if Data Ready flag is set.*/
	/* RX_DR just means data has arrived in the FIFO,
	 * but we still need to verify if there is already
	 * data in the FIFO in the occasions where RX_DR
	 * isn't set. */
	if ( status & (1 << RX_DR) ) {
 4be:	86 fd       	sbrc	r24, 6
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <nrf24_dataReady+0xe>
		//uart_puts("\r\nData received");
		return NRF24_DATA_AVAILABLE;
	}
	return nrf24_rxFifoEmpty();
 4c2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <nrf24_rxFifoEmpty>
 4c6:	08 95       	ret
	 * but we still need to verify if there is already
	 * data in the FIFO in the occasions where RX_DR
	 * isn't set. */
	if ( status & (1 << RX_DR) ) {
		//uart_puts("\r\nData received");
		return NRF24_DATA_AVAILABLE;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return nrf24_rxFifoEmpty();
}
 4ca:	08 95       	ret

Disassembly of section .text.nrf24_config:

0000010e <nrf24_config>:
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
}
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	8c 01       	movw	r16, r24
 118:	eb 01       	movw	r28, r22
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	84 b9       	out	0x04, r24	; 4
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 fe 01 	call	0x3fc	; 0x3fc <nrf24_ce_digitalWrite>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 4a 02 	call	0x494	; 0x494 <nrf24_csn_digitalWrite>
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <nrf24_config+0x22>
 134:	00 c0       	rjmp	.+0      	; 0x136 <nrf24_config+0x28>
 136:	00 00       	nop
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 140:	c8 01       	movw	r24, r16
 142:	0e 94 18 01 	call	0x230	; 0x230 <nrf24_tx_address>
 146:	ce 01       	movw	r24, r28
 148:	0e 94 9f 01 	call	0x33e	; 0x33e <nrf24_rx_address>
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	8c e1       	ldi	r24, 0x1C	; 28
 158:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	8d e1       	ldi	r24, 0x1D	; 29
 160:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 164:	6e e0       	ldi	r22, 0x0E	; 14
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 174:	6f e7       	ldi	r22, 0x7F	; 127
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	0e 94 12 02 	call	0x424	; 0x424 <nrf24_readRegister>
 182:	8f 37       	cpi	r24, 0x7F	; 127
 184:	41 f4       	brne	.+16     	; 0x196 <nrf24_config+0x88>
 186:	60 e7       	ldi	r22, 0x70	; 112
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 18e:	0e 94 bb 01 	call	0x376	; 0x376 <nrf24_powerUpRx>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	01 c0       	rjmp	.+2      	; 0x198 <nrf24_config+0x8a>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

Disassembly of section .text.spi_exchange:

000004da <spi_exchange>:
#include "spi.h"

/* Send one byte over SPI */
uint8_t spi_exchange(uint8_t data) {

    SPDR = data;
 4da:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 4dc:	0d b4       	in	r0, 0x2d	; 45
 4de:	07 fe       	sbrs	r0, 7
 4e0:	fd cf       	rjmp	.-6      	; 0x4dc <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 4e2:	8e b5       	in	r24, 0x2e	; 46
}
 4e4:	08 95       	ret

Disassembly of section .text.spi_init:

0000047e <spi_init>:
		datain[i] = spi_exchange(dataout[i]);
	}
}

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 47e:	84 b1       	in	r24, 0x04	; 4
 480:	8e 62       	ori	r24, 0x2E	; 46
 482:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO);
 484:	84 b1       	in	r24, 0x04	; 4
 486:	8f 7e       	andi	r24, 0xEF	; 239
 488:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 48a:	80 e5       	ldi	r24, 0x50	; 80
 48c:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* double speed */
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	8d bd       	out	0x2d, r24	; 45
 492:	08 95       	ret

Disassembly of section .text.uart_init:

00000466 <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 466:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 46a:	87 e6       	ldi	r24, 0x67	; 103
 46c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 470:	86 e0       	ldi	r24, 0x06	; 6
 472:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 476:	88 e1       	ldi	r24, 0x18	; 24
 478:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 47c:	08 95       	ret

Disassembly of section .text.uart_putc:

000004cc <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 4cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4d0:	95 ff       	sbrs	r25, 5
 4d2:	fc cf       	rjmp	.-8      	; 0x4cc <uart_putc>
	UDR0 = DataByte;
 4d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4d8:	08 95       	ret

Disassembly of section .text.uart_puts:

000003a6 <uart_puts>:
}

void uart_puts(const char *s )
{
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	6b 01       	movw	r12, r22
 3ae:	e8 2e       	mov	r14, r24
	while (*s)
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <uart_puts+0x18>
	uart_putc(*s++);
 3b2:	9f ef       	ldi	r25, 0xFF	; 255
 3b4:	c9 1a       	sub	r12, r25
 3b6:	d9 0a       	sbc	r13, r25
 3b8:	e9 0a       	sbc	r14, r25
 3ba:	0e 94 66 02 	call	0x4cc	; 0x4cc <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 3be:	f6 01       	movw	r30, r12
 3c0:	84 91       	lpm	r24, Z
 3c2:	e7 fc       	sbrc	r14, 7
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f4 cf       	rjmp	.-24     	; 0x3b2 <uart_puts+0xc>
	uart_putc(*s++);

	}/* uart_puts */
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	08 95       	ret
