
RF24_Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c97  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000120  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000020f2  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000b8b  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ac0  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002cc  00000000  00000000  00004550  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000292  00000000  00000000  0000481c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000bad  00000000  00000000  00004aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e0  00000000  00000000  0000565b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000bf8  00000bf8  00000c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000573c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 00000044  000000c8  000000c8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .text.main    0000011e  00000554  00000554  000005e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.command  00000020  00800100  00800100  00000c97  2**0
                  ALLOC
 16 .data.rx_addr 00000003  00800120  00000bfc  00000c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.tx_addr 00000003  00800123  00000bff  00000c93  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.nrf24_ce_digitalWrite 0000001c  00000b56  00000b56  00000bea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.nrf24_csn_digitalWrite 00000014  00000bbc  00000bbc  00000c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.nrf24_rx_address 00000038  000009ce  000009ce  00000a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_tx_address 0000006c  0000083a  0000083a  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_getStatus 0000001c  00000b72  00000b72  00000c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_configRegister 0000002a  00000b06  00000b06  00000b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_powerUpRx 00000030  00000aaa  00000aaa  00000b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_wait_tx_result 00000056  000008a6  000008a6  0000093a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_powerUpTx 0000003e  00000990  00000990  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_sendData 0000004e  000008fc  000008fc  00000990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.nrf24_readRegister 00000026  00000b30  00000b30  00000bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.nrf24_config 00000094  0000072e  0000072e  000007c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .data.rf24_mode 00000001  00800126  00000c02  00000c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .text.spi_exchange 0000000c  00000bec  00000bec  00000c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.spi_init 00000016  00000ba6  00000ba6  00000c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart_init 00000018  00000b8e  00000b8e  00000c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.uart_putc 0000000e  00000bd0  00000bd0  00000c64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.uart_puts 0000002c  00000ada  00000ada  00000b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 0000000e  00000bde  00000bde  00000c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000046  0000094a  0000094a  000009de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000448  0000010c  0000010c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000036  00000a3e  00000a3e  00000ad2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000078  000007c2  000007c2  00000856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 000000bc  00000672  00000672  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc.prologue 00000038  00000a06  00000a06  00000a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc.prologue 00000036  00000a74  00000a74  00000b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
   8:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
   c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  10:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  14:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  18:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  1c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  20:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  24:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  28:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  2c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  30:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  34:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  38:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  3c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  44:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  48:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  4c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  50:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  54:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  58:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  5c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  60:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  64:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 20       	and	r0, r1
  6c:	80 01       	movw	r16, r0
  6e:	20 01       	movw	r4, r0
  70:	27 00       	.word	0x0027	; ????
  72:	0b fc       	.word	0xfc0b	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000bf8 <__bad_interrupt>:
 bf8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000554 <main>:
volatile uint8_t rx_addr[]={0x05, 0x10, 0x20};
	
volatile uint8_t command[32]={};

int main(void)
{
 554:	ef 92       	push	r14
 556:	ff 92       	push	r15
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	64 97       	sbiw	r28, 0x14	; 20
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	a8 95       	wdr
 576:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 57a:	88 61       	ori	r24, 0x18	; 24
 57c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 580:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 584:	0f be       	out	0x3f, r0	; 63
	uint8_t try=1;
	uint8_t flag=0;
	uint8_t uart_buffer[20];
	
	wdt_disable();
	uart_init();
 586:	0e 94 c7 05 	call	0xb8e	; 0xb8e <uart_init>
	spi_init();
 58a:	0e 94 d3 05 	call	0xba6	; 0xba6 <spi_init>
	
	memset(command, 'a', 32);
 58e:	40 e2       	ldi	r20, 0x20	; 32
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	61 e6       	ldi	r22, 0x61	; 97
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 ef 05 	call	0xbde	; 0xbde <memset>
		
	status=nrf24_config(tx_addr,rx_addr);
 59e:	60 e2       	ldi	r22, 0x20	; 32
 5a0:	71 e0       	ldi	r23, 0x01	; 1
 5a2:	83 e2       	ldi	r24, 0x23	; 35
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 97 03 	call	0x72e	; 0x72e <nrf24_config>
	if(status!=0){
 5aa:	81 11       	cpse	r24, r1
 5ac:	4e c0       	rjmp	.+156    	; 0x64a <main+0xf6>
		uart_puts("\r\nNRF24 Not connected!");
		return -1;
	}

	uart_puts("\r\nReady to transmit");
 5ae:	6f ed       	ldi	r22, 0xDF	; 223
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 6d 05 	call	0xada	; 0xada <uart_puts>
	uint8_t dir=0;
 5b8:	00 e0       	ldi	r16, 0x00	; 0

int main(void)
{
	uint8_t status;
	uint8_t tx_result;
	uint8_t try=1;
 5ba:	11 e0       	ldi	r17, 0x01	; 1
	uart_puts("\r\nReady to transmit");
	uint8_t dir=0;
		while(1)
		{
			flag=0;
			sprintf(uart_buffer, "\r\n%d", try);
 5bc:	1f 92       	push	r1
 5be:	1f 93       	push	r17
 5c0:	83 ef       	ldi	r24, 0xF3	; 243
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	a0 e0       	ldi	r26, 0x00	; 0
 5c6:	af 93       	push	r26
 5c8:	9f 93       	push	r25
 5ca:	8f 93       	push	r24
 5cc:	ce 01       	movw	r24, r28
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	7c 01       	movw	r14, r24
 5d2:	9f 93       	push	r25
 5d4:	8f 93       	push	r24
 5d6:	0e 94 a5 04 	call	0x94a	; 0x94a <sprintf>
			uart_puts(uart_buffer);
 5da:	b7 01       	movw	r22, r14
 5dc:	80 e8       	ldi	r24, 0x80	; 128
 5de:	0e 94 6d 05 	call	0xada	; 0xada <uart_puts>
			
			for(uint8_t i=0; i<100; i++)
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <main+0xaa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f0:	e3 ec       	ldi	r30, 0xC3	; 195
 5f2:	f9 e0       	ldi	r31, 0x09	; 9
 5f4:	31 97       	sbiw	r30, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <main+0xa0>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0xa6>
 5fa:	00 00       	nop
 5fc:	8f 5f       	subi	r24, 0xFF	; 255
 5fe:	84 36       	cpi	r24, 0x64	; 100
 600:	b8 f3       	brcs	.-18     	; 0x5f0 <main+0x9c>
				_delay_ms(10);
			
			nrf24_sendData(command, try);
 602:	61 2f       	mov	r22, r17
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 7e 04 	call	0x8fc	; 0x8fc <nrf24_sendData>
			
			tx_result=nrf24_wait_tx_result();
 60c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrf24_wait_tx_result>
			
			if(tx_result != NRF24_MESSAGE_SENT)
 610:	81 11       	cpse	r24, r1
				flag=1;
 612:	81 e0       	ldi	r24, 0x01	; 1
			
			if (dir==0)
 614:	01 11       	cpse	r16, r1
 616:	02 c0       	rjmp	.+4      	; 0x61c <main+0xc8>
				try++;
 618:	1f 5f       	subi	r17, 0xFF	; 255
 61a:	01 c0       	rjmp	.+2      	; 0x61e <main+0xca>
			else
				try--;
 61c:	11 50       	subi	r17, 0x01	; 1
			if (try==32)
 61e:	10 32       	cpi	r17, 0x20	; 32
 620:	19 f0       	breq	.+6      	; 0x628 <main+0xd4>
				dir=1;
			else if(try==0)
 622:	11 23       	and	r17, r17
 624:	19 f0       	breq	.+6      	; 0x62c <main+0xd8>
 626:	03 c0       	rjmp	.+6      	; 0x62e <main+0xda>
			if (dir==0)
				try++;
			else
				try--;
			if (try==32)
				dir=1;
 628:	01 e0       	ldi	r16, 0x01	; 1
 62a:	01 c0       	rjmp	.+2      	; 0x62e <main+0xda>
			else if(try==0)
				dir=0;
 62c:	00 e0       	ldi	r16, 0x00	; 0
				
			if(flag==1)
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	31 f4       	brne	.+12     	; 0x63e <main+0xea>
				uart_puts("\r\nfailed");
 632:	68 ef       	ldi	r22, 0xF8	; 248
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 6d 05 	call	0xada	; 0xada <uart_puts>
 63c:	bf cf       	rjmp	.-130    	; 0x5bc <main+0x68>
			else
				uart_puts("\r\nno fails");
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	71 e0       	ldi	r23, 0x01	; 1
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	0e 94 6d 05 	call	0xada	; 0xada <uart_puts>
 648:	b9 cf       	rjmp	.-142    	; 0x5bc <main+0x68>
	
	memset(command, 'a', 32);
		
	status=nrf24_config(tx_addr,rx_addr);
	if(status!=0){
		uart_puts("\r\nNRF24 Not connected!");
 64a:	68 ec       	ldi	r22, 0xC8	; 200
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 6d 05 	call	0xada	; 0xada <uart_puts>
				uart_puts("\r\nfailed");
			else
				uart_puts("\r\nno fails");
		}

 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	9f ef       	ldi	r25, 0xFF	; 255
 658:	64 96       	adiw	r28, 0x14	; 20
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

00000b56 <nrf24_ce_digitalWrite>:
		spi_exchange(FLUSH_RX);
		nrf24_csn_digitalWrite(HIGH);
		return 0;
	}
	return payload_len;
}
 b56:	88 23       	and	r24, r24
 b58:	41 f0       	breq	.+16     	; 0xb6a <nrf24_ce_digitalWrite+0x14>
 b5a:	85 b1       	in	r24, 0x05	; 5
 b5c:	81 60       	ori	r24, 0x01	; 1
 b5e:	85 b9       	out	0x05, r24	; 5
 b60:	85 e3       	ldi	r24, 0x35	; 53
 b62:	8a 95       	dec	r24
 b64:	f1 f7       	brne	.-4      	; 0xb62 <nrf24_ce_digitalWrite+0xc>
 b66:	00 00       	nop
 b68:	08 95       	ret
 b6a:	85 b1       	in	r24, 0x05	; 5
 b6c:	8e 7f       	andi	r24, 0xFE	; 254
 b6e:	85 b9       	out	0x05, r24	; 5
 b70:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000bbc <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 bbc:	88 23       	and	r24, r24
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <nrf24_csn_digitalWrite+0xc>
		set_bit(NRF24_PORT, NRF24_CS);
 bc0:	85 b1       	in	r24, 0x05	; 5
 bc2:	84 60       	ori	r24, 0x04	; 4
 bc4:	85 b9       	out	0x05, r24	; 5
 bc6:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
 bc8:	85 b1       	in	r24, 0x05	; 5
 bca:	8b 7f       	andi	r24, 0xFB	; 251
 bcc:	85 b9       	out	0x05, r24	; 5
 bce:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

000009ce <nrf24_rx_address>:
		spi_exchange(FLUSH_RX);
		nrf24_csn_digitalWrite(HIGH);
		return 0;
	}
	return payload_len;
}
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	8c 01       	movw	r16, r24
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 9dc:	8b e2       	ldi	r24, 0x2B	; 43
 9de:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 9e2:	c0 e0       	ldi	r28, 0x00	; 0
 9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <nrf24_rx_address+0x26>
 9e6:	f8 01       	movw	r30, r16
 9e8:	ec 0f       	add	r30, r28
 9ea:	f1 1d       	adc	r31, r1
 9ec:	80 81       	ld	r24, Z
 9ee:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 9f2:	cf 5f       	subi	r28, 0xFF	; 255
 9f4:	c3 30       	cpi	r28, 0x03	; 3
 9f6:	b8 f3       	brcs	.-18     	; 0x9e6 <nrf24_rx_address+0x18>
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

0000083a <nrf24_tx_address>:
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	8c 01       	movw	r16, r24
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 848:	80 e3       	ldi	r24, 0x30	; 48
 84a:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 84e:	c0 e0       	ldi	r28, 0x00	; 0
 850:	07 c0       	rjmp	.+14     	; 0x860 <nrf24_tx_address+0x26>
 852:	f8 01       	movw	r30, r16
 854:	ec 0f       	add	r30, r28
 856:	f1 1d       	adc	r31, r1
 858:	80 81       	ld	r24, Z
 85a:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 85e:	cf 5f       	subi	r28, 0xFF	; 255
 860:	c3 30       	cpi	r28, 0x03	; 3
 862:	b8 f3       	brcs	.-18     	; 0x852 <nrf24_tx_address+0x18>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 86a:	8f e8       	ldi	r24, 0x8F	; 143
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	f1 f7       	brne	.-4      	; 0x86e <nrf24_tx_address+0x34>
 872:	00 c0       	rjmp	.+0      	; 0x874 <nrf24_tx_address+0x3a>
 874:	00 00       	nop
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 87c:	8a e2       	ldi	r24, 0x2A	; 42
 87e:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 882:	c0 e0       	ldi	r28, 0x00	; 0
 884:	07 c0       	rjmp	.+14     	; 0x894 <nrf24_tx_address+0x5a>
 886:	f8 01       	movw	r30, r16
 888:	ec 0f       	add	r30, r28
 88a:	f1 1d       	adc	r31, r1
 88c:	80 81       	ld	r24, Z
 88e:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 892:	cf 5f       	subi	r28, 0xFF	; 255
 894:	c3 30       	cpi	r28, 0x03	; 3
 896:	b8 f3       	brcs	.-18     	; 0x886 <nrf24_tx_address+0x4c>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00000b72 <nrf24_getStatus>:
	}
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
 b72:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
 b7a:	8f ef       	ldi	r24, 0xFF	; 255
 b7c:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 b80:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 b82:	81 e0       	ldi	r24, 0x01	; 1
 b84:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
	return rv;
}
 b88:	8c 2f       	mov	r24, r28
 b8a:	cf 91       	pop	r28
 b8c:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

00000b06 <nrf24_configRegister>:
		spi_exchange(FLUSH_RX);
		nrf24_csn_digitalWrite(HIGH);
		return 0;
	}
	return payload_len;
}
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	c8 2f       	mov	r28, r24
 b0c:	d6 2f       	mov	r29, r22
 b0e:	80 e0       	ldi	r24, 0x00	; 0
 b10:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 b14:	8c 2f       	mov	r24, r28
 b16:	8f 71       	andi	r24, 0x1F	; 31
 b18:	80 62       	ori	r24, 0x20	; 32
 b1a:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 b1e:	8d 2f       	mov	r24, r29
 b20:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

00000aaa <nrf24_powerUpRx>:
 aaa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <rf24_mode>
 aae:	88 23       	and	r24, r24
 ab0:	99 f0       	breq	.+38     	; 0xad8 <nrf24_powerUpRx+0x2e>
 ab2:	6f e7       	ldi	r22, 0x7F	; 127
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 aba:	62 e0       	ldi	r22, 0x02	; 2
 abc:	82 e0       	ldi	r24, 0x02	; 2
 abe:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 ac2:	8f e8       	ldi	r24, 0x8F	; 143
 ac4:	91 e0       	ldi	r25, 0x01	; 1
 ac6:	01 97       	sbiw	r24, 0x01	; 1
 ac8:	f1 f7       	brne	.-4      	; 0xac6 <nrf24_powerUpRx+0x1c>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <nrf24_powerUpRx+0x22>
 acc:	00 00       	nop
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	0e 94 ab 05 	call	0xb56	; 0xb56 <nrf24_ce_digitalWrite>
 ad4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <rf24_mode>
 ad8:	08 95       	ret

Disassembly of section .text.nrf24_wait_tx_result:

000008a6 <nrf24_wait_tx_result>:
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	0e 94 b9 05 	call	0xb72	; 0xb72 <nrf24_getStatus>
 8b0:	0e 94 b9 05 	call	0xb72	; 0xb72 <nrf24_getStatus>
 8b4:	18 2f       	mov	r17, r24
 8b6:	10 72       	andi	r17, 0x20	; 32
 8b8:	c0 e1       	ldi	r28, 0x10	; 16
 8ba:	d7 e2       	ldi	r29, 0x27	; 39
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <nrf24_wait_tx_result+0x28>
 8be:	0e 94 b9 05 	call	0xb72	; 0xb72 <nrf24_getStatus>
 8c2:	18 2f       	mov	r17, r24
 8c4:	10 72       	andi	r17, 0x20	; 32
 8c6:	95 e3       	ldi	r25, 0x35	; 53
 8c8:	9a 95       	dec	r25
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <nrf24_wait_tx_result+0x22>
 8cc:	00 00       	nop
 8ce:	11 23       	and	r17, r17
 8d0:	11 f0       	breq	.+4      	; 0x8d6 <nrf24_wait_tx_result+0x30>
 8d2:	80 ff       	sbrs	r24, 0
 8d4:	04 c0       	rjmp	.+8      	; 0x8de <nrf24_wait_tx_result+0x38>
 8d6:	84 fd       	sbrc	r24, 4
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <nrf24_wait_tx_result+0x38>
 8da:	21 97       	sbiw	r28, 0x01	; 1
 8dc:	81 f7       	brne	.-32     	; 0x8be <nrf24_wait_tx_result+0x18>
 8de:	60 e6       	ldi	r22, 0x60	; 96
 8e0:	87 e0       	ldi	r24, 0x07	; 7
 8e2:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 8e6:	0e 94 55 05 	call	0xaaa	; 0xaaa <nrf24_powerUpRx>
 8ea:	11 23       	and	r17, r17
 8ec:	11 f0       	breq	.+4      	; 0x8f2 <nrf24_wait_tx_result+0x4c>
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <nrf24_wait_tx_result+0x4e>
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	08 95       	ret

Disassembly of section .text.nrf24_powerUpTx:

00000990 <nrf24_powerUpTx>:
 990:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <rf24_mode>
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	d1 f0       	breq	.+52     	; 0x9cc <nrf24_powerUpTx+0x3c>
 998:	6e e7       	ldi	r22, 0x7E	; 126
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 9a0:	61 e0       	ldi	r22, 0x01	; 1
 9a2:	82 e0       	ldi	r24, 0x02	; 2
 9a4:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 9ae:	81 ee       	ldi	r24, 0xE1	; 225
 9b0:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 9ba:	8f e8       	ldi	r24, 0x8F	; 143
 9bc:	91 e0       	ldi	r25, 0x01	; 1
 9be:	01 97       	sbiw	r24, 0x01	; 1
 9c0:	f1 f7       	brne	.-4      	; 0x9be <nrf24_powerUpTx+0x2e>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <nrf24_powerUpTx+0x34>
 9c4:	00 00       	nop
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <rf24_mode>
 9cc:	08 95       	ret

Disassembly of section .text.nrf24_sendData:

000008fc <nrf24_sendData>:
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	8c 01       	movw	r16, r24
 906:	d6 2f       	mov	r29, r22
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	0e 94 ab 05 	call	0xb56	; 0xb56 <nrf24_ce_digitalWrite>
 90e:	0e 94 c8 04 	call	0x990	; 0x990 <nrf24_powerUpTx>
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 918:	80 ea       	ldi	r24, 0xA0	; 160
 91a:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	07 c0       	rjmp	.+14     	; 0x930 <__stack+0x31>
 922:	f8 01       	movw	r30, r16
 924:	ec 0f       	add	r30, r28
 926:	f1 1d       	adc	r31, r1
 928:	80 81       	ld	r24, Z
 92a:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 92e:	cf 5f       	subi	r28, 0xFF	; 255
 930:	cd 17       	cp	r28, r29
 932:	b8 f3       	brcs	.-18     	; 0x922 <__stack+0x23>
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	0e 94 ab 05 	call	0xb56	; 0xb56 <nrf24_ce_digitalWrite>
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	08 95       	ret

Disassembly of section .text.nrf24_readRegister:

00000b30 <nrf24_readRegister>:
 b30:	cf 93       	push	r28
 b32:	c8 2f       	mov	r28, r24
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 b3a:	8c 2f       	mov	r24, r28
 b3c:	8f 71       	andi	r24, 0x1F	; 31
 b3e:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_exchange>
 b48:	c8 2f       	mov	r28, r24
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 b50:	8c 2f       	mov	r24, r28
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

Disassembly of section .text.nrf24_config:

0000072e <nrf24_config>:
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	8c 01       	movw	r16, r24
 738:	eb 01       	movw	r28, r22
 73a:	84 b1       	in	r24, 0x04	; 4
 73c:	85 60       	ori	r24, 0x05	; 5
 73e:	84 b9       	out	0x04, r24	; 4
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	0e 94 ab 05 	call	0xb56	; 0xb56 <nrf24_ce_digitalWrite>
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	0e 94 de 05 	call	0xbbc	; 0xbbc <nrf24_csn_digitalWrite>
 74c:	8f e1       	ldi	r24, 0x1F	; 31
 74e:	9e e4       	ldi	r25, 0x4E	; 78
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <nrf24_config+0x22>
 754:	00 c0       	rjmp	.+0      	; 0x756 <nrf24_config+0x28>
 756:	00 00       	nop
 758:	61 e0       	ldi	r22, 0x01	; 1
 75a:	83 e0       	ldi	r24, 0x03	; 3
 75c:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 760:	c8 01       	movw	r24, r16
 762:	0e 94 1d 04 	call	0x83a	; 0x83a <nrf24_tx_address>
 766:	ce 01       	movw	r24, r28
 768:	0e 94 e7 04 	call	0x9ce	; 0x9ce <nrf24_rx_address>
 76c:	62 e0       	ldi	r22, 0x02	; 2
 76e:	85 e0       	ldi	r24, 0x05	; 5
 770:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 774:	63 e0       	ldi	r22, 0x03	; 3
 776:	8c e1       	ldi	r24, 0x1C	; 28
 778:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 77c:	64 e0       	ldi	r22, 0x04	; 4
 77e:	8d e1       	ldi	r24, 0x1D	; 29
 780:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 784:	6e e0       	ldi	r22, 0x0E	; 14
 786:	86 e0       	ldi	r24, 0x06	; 6
 788:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 78c:	63 e0       	ldi	r22, 0x03	; 3
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 794:	6f e7       	ldi	r22, 0x7F	; 127
 796:	84 e0       	ldi	r24, 0x04	; 4
 798:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 79c:	84 e0       	ldi	r24, 0x04	; 4
 79e:	0e 94 98 05 	call	0xb30	; 0xb30 <nrf24_readRegister>
 7a2:	8f 37       	cpi	r24, 0x7F	; 127
 7a4:	41 f4       	brne	.+16     	; 0x7b6 <nrf24_config+0x88>
 7a6:	60 e7       	ldi	r22, 0x70	; 112
 7a8:	87 e0       	ldi	r24, 0x07	; 7
 7aa:	0e 94 83 05 	call	0xb06	; 0xb06 <nrf24_configRegister>
 7ae:	0e 94 55 05 	call	0xaaa	; 0xaaa <nrf24_powerUpRx>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <nrf24_config+0x8a>
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	08 95       	ret

Disassembly of section .text.spi_exchange:

00000bec <spi_exchange>:
#include "spi.h"

/* Send one byte over SPI */
uint8_t spi_exchange(uint8_t data) {

    SPDR = data;
 bec:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 bee:	0d b4       	in	r0, 0x2d	; 45
 bf0:	07 fe       	sbrs	r0, 7
 bf2:	fd cf       	rjmp	.-6      	; 0xbee <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 bf4:	8e b5       	in	r24, 0x2e	; 46
}
 bf6:	08 95       	ret

Disassembly of section .text.spi_init:

00000ba6 <spi_init>:
		datain[i] = spi_exchange(dataout[i]);
	}
}

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 ba6:	84 b1       	in	r24, 0x04	; 4
 ba8:	8e 62       	ori	r24, 0x2E	; 46
 baa:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO);
 bac:	84 b1       	in	r24, 0x04	; 4
 bae:	8f 7e       	andi	r24, 0xEF	; 239
 bb0:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 bb2:	80 e5       	ldi	r24, 0x50	; 80
 bb4:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* double speed */
 bb6:	81 e0       	ldi	r24, 0x01	; 1
 bb8:	8d bd       	out	0x2d, r24	; 45
 bba:	08 95       	ret

Disassembly of section .text.uart_init:

00000b8e <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 b8e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 b92:	87 e6       	ldi	r24, 0x67	; 103
 b94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 b98:	86 e0       	ldi	r24, 0x06	; 6
 b9a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 b9e:	88 e1       	ldi	r24, 0x18	; 24
 ba0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 ba4:	08 95       	ret

Disassembly of section .text.uart_putc:

00000bd0 <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 bd0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 bd4:	95 ff       	sbrs	r25, 5
 bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <uart_putc>
	UDR0 = DataByte;
 bd8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 bdc:	08 95       	ret

Disassembly of section .text.uart_puts:

00000ada <uart_puts>:
}

void uart_puts(const char *s )
{
 ada:	cf 92       	push	r12
 adc:	df 92       	push	r13
 ade:	ef 92       	push	r14
 ae0:	6b 01       	movw	r12, r22
 ae2:	e8 2e       	mov	r14, r24
	while (*s)
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <uart_puts+0x18>
	uart_putc(*s++);
 ae6:	9f ef       	ldi	r25, 0xFF	; 255
 ae8:	c9 1a       	sub	r12, r25
 aea:	d9 0a       	sbc	r13, r25
 aec:	e9 0a       	sbc	r14, r25
 aee:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 af2:	f6 01       	movw	r30, r12
 af4:	84 91       	lpm	r24, Z
 af6:	e7 fc       	sbrc	r14, 7
 af8:	80 81       	ld	r24, Z
 afa:	81 11       	cpse	r24, r1
 afc:	f4 cf       	rjmp	.-24     	; 0xae6 <uart_puts+0xc>
	uart_putc(*s++);

	}/* uart_puts */
 afe:	ef 90       	pop	r14
 b00:	df 90       	pop	r13
 b02:	cf 90       	pop	r12
 b04:	08 95       	ret

Disassembly of section .text.avrlibc:

00000bde <memset>:
 bde:	dc 01       	movw	r26, r24
 be0:	01 c0       	rjmp	.+2      	; 0xbe4 <memset+0x6>
 be2:	6d 93       	st	X+, r22
 be4:	41 50       	subi	r20, 0x01	; 1
 be6:	50 40       	sbci	r21, 0x00	; 0
 be8:	e0 f7       	brcc	.-8      	; 0xbe2 <memset+0x4>
 bea:	08 95       	ret

Disassembly of section .text.avrlibc:

0000094a <sprintf>:
 94a:	af e0       	ldi	r26, 0x0F	; 15
 94c:	b0 e0       	ldi	r27, 0x00	; 0
 94e:	eb ea       	ldi	r30, 0xAB	; 171
 950:	f4 e0       	ldi	r31, 0x04	; 4
 952:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__prologue_saves__+0x1c>
 956:	0e 89       	ldd	r16, Y+22	; 0x16
 958:	1f 89       	ldd	r17, Y+23	; 0x17
 95a:	86 e0       	ldi	r24, 0x06	; 6
 95c:	8d 83       	std	Y+5, r24	; 0x05
 95e:	1a 83       	std	Y+2, r17	; 0x02
 960:	09 83       	std	Y+1, r16	; 0x01
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	9f e7       	ldi	r25, 0x7F	; 127
 966:	9f 83       	std	Y+7, r25	; 0x07
 968:	8e 83       	std	Y+6, r24	; 0x06
 96a:	9e 01       	movw	r18, r28
 96c:	25 5e       	subi	r18, 0xE5	; 229
 96e:	3f 4f       	sbci	r19, 0xFF	; 255
 970:	48 8d       	ldd	r20, Y+24	; 0x18
 972:	59 8d       	ldd	r21, Y+25	; 0x19
 974:	6a 8d       	ldd	r22, Y+26	; 0x1a
 976:	ce 01       	movw	r24, r28
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	0e 94 86 00 	call	0x10c	; 0x10c <vfprintf>
 97e:	e8 85       	ldd	r30, Y+8	; 0x08
 980:	f9 85       	ldd	r31, Y+9	; 0x09
 982:	e0 0f       	add	r30, r16
 984:	f1 1f       	adc	r31, r17
 986:	10 82       	st	Z, r1
 988:	2f 96       	adiw	r28, 0x0f	; 15
 98a:	e4 e0       	ldi	r30, 0x04	; 4
 98c:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000010c <vfprintf>:
 10c:	2f 92       	push	r2
 10e:	3f 92       	push	r3
 110:	4f 92       	push	r4
 112:	6f 92       	push	r6
 114:	7f 92       	push	r7
 116:	8f 92       	push	r8
 118:	9f 92       	push	r9
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	62 97       	sbiw	r28, 0x12	; 18
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	6c 01       	movw	r12, r24
 140:	3a 01       	movw	r6, r20
 142:	86 2e       	mov	r8, r22
 144:	79 01       	movw	r14, r18
 146:	fc 01       	movw	r30, r24
 148:	10 86       	std	Z+8, r1	; 0x08
 14a:	17 82       	std	Z+7, r1	; 0x07
 14c:	84 81       	ldd	r24, Z+4	; 0x04
 14e:	81 ff       	sbrs	r24, 1
 150:	e7 c1       	rjmp	.+974    	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 152:	9e 01       	movw	r18, r28
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	3d 87       	std	Y+13, r19	; 0x0d
 15a:	2c 87       	std	Y+12, r18	; 0x0c
 15c:	c9 01       	movw	r24, r18
 15e:	a0 e8       	ldi	r26, 0x80	; 128
 160:	88 8b       	std	Y+16, r24	; 0x10
 162:	99 8b       	std	Y+17, r25	; 0x11
 164:	aa 8b       	std	Y+18, r26	; 0x12
 166:	9f e3       	ldi	r25, 0x3F	; 63
 168:	99 2e       	mov	r9, r25
 16a:	f3 01       	movw	r30, r6
 16c:	84 91       	lpm	r24, Z
 16e:	87 fc       	sbrc	r8, 7
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	09 f4       	brne	.+2      	; 0x178 <vfprintf+0x6c>
 176:	d0 c1       	rjmp	.+928    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 178:	48 2d       	mov	r20, r8
 17a:	93 01       	movw	r18, r6
 17c:	2f 5f       	subi	r18, 0xFF	; 255
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	4f 4f       	sbci	r20, 0xFF	; 255
 182:	85 32       	cpi	r24, 0x25	; 37
 184:	19 f0       	breq	.+6      	; 0x18c <vfprintf+0x80>
 186:	39 01       	movw	r6, r18
 188:	84 2e       	mov	r8, r20
 18a:	0a c0       	rjmp	.+20     	; 0x1a0 <vfprintf+0x94>
 18c:	f9 01       	movw	r30, r18
 18e:	84 91       	lpm	r24, Z
 190:	47 fd       	sbrc	r20, 7
 192:	80 81       	ld	r24, Z
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	69 0e       	add	r6, r25
 198:	71 1c       	adc	r7, r1
 19a:	81 1c       	adc	r8, r1
 19c:	85 32       	cpi	r24, 0x25	; 37
 19e:	29 f4       	brne	.+10     	; 0x1aa <vfprintf+0x9e>
 1a0:	b6 01       	movw	r22, r12
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 1a8:	e0 cf       	rjmp	.-64     	; 0x16a <vfprintf+0x5e>
 1aa:	b1 2c       	mov	r11, r1
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	10 32       	cpi	r17, 0x20	; 32
 1b2:	a0 f4       	brcc	.+40     	; 0x1dc <vfprintf+0xd0>
 1b4:	8b 32       	cpi	r24, 0x2B	; 43
 1b6:	69 f0       	breq	.+26     	; 0x1d2 <vfprintf+0xc6>
 1b8:	30 f4       	brcc	.+12     	; 0x1c6 <vfprintf+0xba>
 1ba:	80 32       	cpi	r24, 0x20	; 32
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <vfprintf+0xc8>
 1be:	83 32       	cpi	r24, 0x23	; 35
 1c0:	69 f4       	brne	.+26     	; 0x1dc <vfprintf+0xd0>
 1c2:	10 61       	ori	r17, 0x10	; 16
 1c4:	2c c0       	rjmp	.+88     	; 0x21e <vfprintf+0x112>
 1c6:	8d 32       	cpi	r24, 0x2D	; 45
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <vfprintf+0xcc>
 1ca:	80 33       	cpi	r24, 0x30	; 48
 1cc:	39 f4       	brne	.+14     	; 0x1dc <vfprintf+0xd0>
 1ce:	11 60       	ori	r17, 0x01	; 1
 1d0:	26 c0       	rjmp	.+76     	; 0x21e <vfprintf+0x112>
 1d2:	12 60       	ori	r17, 0x02	; 2
 1d4:	14 60       	ori	r17, 0x04	; 4
 1d6:	23 c0       	rjmp	.+70     	; 0x21e <vfprintf+0x112>
 1d8:	18 60       	ori	r17, 0x08	; 8
 1da:	21 c0       	rjmp	.+66     	; 0x21e <vfprintf+0x112>
 1dc:	17 fd       	sbrc	r17, 7
 1de:	29 c0       	rjmp	.+82     	; 0x232 <vfprintf+0x126>
 1e0:	90 ed       	ldi	r25, 0xD0	; 208
 1e2:	98 0f       	add	r25, r24
 1e4:	9a 30       	cpi	r25, 0x0A	; 10
 1e6:	78 f4       	brcc	.+30     	; 0x206 <vfprintf+0xfa>
 1e8:	16 ff       	sbrs	r17, 6
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <vfprintf+0xec>
 1ec:	aa e0       	ldi	r26, 0x0A	; 10
 1ee:	ba 9e       	mul	r11, r26
 1f0:	90 0d       	add	r25, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	b9 2e       	mov	r11, r25
 1f6:	13 c0       	rjmp	.+38     	; 0x21e <vfprintf+0x112>
 1f8:	ea e0       	ldi	r30, 0x0A	; 10
 1fa:	0e 9f       	mul	r16, r30
 1fc:	90 0d       	add	r25, r0
 1fe:	11 24       	eor	r1, r1
 200:	09 2f       	mov	r16, r25
 202:	10 62       	ori	r17, 0x20	; 32
 204:	0c c0       	rjmp	.+24     	; 0x21e <vfprintf+0x112>
 206:	8e 32       	cpi	r24, 0x2E	; 46
 208:	21 f4       	brne	.+8      	; 0x212 <vfprintf+0x106>
 20a:	16 fd       	sbrc	r17, 6
 20c:	85 c1       	rjmp	.+778    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 20e:	10 64       	ori	r17, 0x40	; 64
 210:	06 c0       	rjmp	.+12     	; 0x21e <vfprintf+0x112>
 212:	8c 36       	cpi	r24, 0x6C	; 108
 214:	11 f4       	brne	.+4      	; 0x21a <vfprintf+0x10e>
 216:	10 68       	ori	r17, 0x80	; 128
 218:	02 c0       	rjmp	.+4      	; 0x21e <vfprintf+0x112>
 21a:	88 36       	cpi	r24, 0x68	; 104
 21c:	51 f4       	brne	.+20     	; 0x232 <vfprintf+0x126>
 21e:	f3 01       	movw	r30, r6
 220:	84 91       	lpm	r24, Z
 222:	87 fc       	sbrc	r8, 7
 224:	80 81       	ld	r24, Z
 226:	ff ef       	ldi	r31, 0xFF	; 255
 228:	6f 1a       	sub	r6, r31
 22a:	7f 0a       	sbc	r7, r31
 22c:	8f 0a       	sbc	r8, r31
 22e:	81 11       	cpse	r24, r1
 230:	bf cf       	rjmp	.-130    	; 0x1b0 <vfprintf+0xa4>
 232:	98 2f       	mov	r25, r24
 234:	9f 7d       	andi	r25, 0xDF	; 223
 236:	95 54       	subi	r25, 0x45	; 69
 238:	93 30       	cpi	r25, 0x03	; 3
 23a:	28 f4       	brcc	.+10     	; 0x246 <vfprintf+0x13a>
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	e2 0e       	add	r14, r18
 240:	f1 1c       	adc	r15, r1
 242:	99 82       	std	Y+1, r9	; 0x01
 244:	0f c0       	rjmp	.+30     	; 0x264 <vfprintf+0x158>
 246:	83 36       	cpi	r24, 0x63	; 99
 248:	31 f0       	breq	.+12     	; 0x256 <vfprintf+0x14a>
 24a:	83 37       	cpi	r24, 0x73	; 115
 24c:	91 f0       	breq	.+36     	; 0x272 <vfprintf+0x166>
 24e:	83 35       	cpi	r24, 0x53	; 83
 250:	09 f0       	breq	.+2      	; 0x254 <vfprintf+0x148>
 252:	63 c0       	rjmp	.+198    	; 0x31a <vfprintf+0x20e>
 254:	27 c0       	rjmp	.+78     	; 0x2a4 <vfprintf+0x198>
 256:	f7 01       	movw	r30, r14
 258:	80 81       	ld	r24, Z
 25a:	89 83       	std	Y+1, r24	; 0x01
 25c:	97 01       	movw	r18, r14
 25e:	2e 5f       	subi	r18, 0xFE	; 254
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	79 01       	movw	r14, r18
 264:	28 88       	ldd	r2, Y+16	; 0x10
 266:	39 88       	ldd	r3, Y+17	; 0x11
 268:	4a 88       	ldd	r4, Y+18	; 0x12
 26a:	aa 24       	eor	r10, r10
 26c:	a3 94       	inc	r10
 26e:	b1 2c       	mov	r11, r1
 270:	17 c0       	rjmp	.+46     	; 0x2a0 <vfprintf+0x194>
 272:	a7 01       	movw	r20, r14
 274:	4d 5f       	subi	r20, 0xFD	; 253
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	5f 87       	std	Y+15, r21	; 0x0f
 27a:	4e 87       	std	Y+14, r20	; 0x0e
 27c:	f7 01       	movw	r30, r14
 27e:	20 80       	ld	r2, Z
 280:	31 80       	ldd	r3, Z+1	; 0x01
 282:	42 80       	ldd	r4, Z+2	; 0x02
 284:	16 ff       	sbrs	r17, 6
 286:	03 c0       	rjmp	.+6      	; 0x28e <vfprintf+0x182>
 288:	4b 2d       	mov	r20, r11
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <vfprintf+0x186>
 28e:	4f ef       	ldi	r20, 0xFF	; 255
 290:	5f ef       	ldi	r21, 0xFF	; 255
 292:	84 2d       	mov	r24, r4
 294:	b1 01       	movw	r22, r2
 296:	0e 94 1f 05 	call	0xa3e	; 0xa3e <strnlen>
 29a:	5c 01       	movw	r10, r24
 29c:	ee 84       	ldd	r14, Y+14	; 0x0e
 29e:	ff 84       	ldd	r15, Y+15	; 0x0f
 2a0:	1f 77       	andi	r17, 0x7F	; 127
 2a2:	18 c0       	rjmp	.+48     	; 0x2d4 <vfprintf+0x1c8>
 2a4:	97 01       	movw	r18, r14
 2a6:	2d 5f       	subi	r18, 0xFD	; 253
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	3f 87       	std	Y+15, r19	; 0x0f
 2ac:	2e 87       	std	Y+14, r18	; 0x0e
 2ae:	f7 01       	movw	r30, r14
 2b0:	20 80       	ld	r2, Z
 2b2:	31 80       	ldd	r3, Z+1	; 0x01
 2b4:	42 80       	ldd	r4, Z+2	; 0x02
 2b6:	16 ff       	sbrs	r17, 6
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <vfprintf+0x1b4>
 2ba:	4b 2d       	mov	r20, r11
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <vfprintf+0x1b8>
 2c0:	4f ef       	ldi	r20, 0xFF	; 255
 2c2:	5f ef       	ldi	r21, 0xFF	; 255
 2c4:	84 2d       	mov	r24, r4
 2c6:	b1 01       	movw	r22, r2
 2c8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <strnlen>
 2cc:	5c 01       	movw	r10, r24
 2ce:	10 68       	ori	r17, 0x80	; 128
 2d0:	ee 84       	ldd	r14, Y+14	; 0x0e
 2d2:	ff 84       	ldd	r15, Y+15	; 0x0f
 2d4:	13 fd       	sbrc	r17, 3
 2d6:	1d c0       	rjmp	.+58     	; 0x312 <vfprintf+0x206>
 2d8:	80 2f       	mov	r24, r16
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	a8 16       	cp	r10, r24
 2de:	b9 06       	cpc	r11, r25
 2e0:	c0 f4       	brcc	.+48     	; 0x312 <vfprintf+0x206>
 2e2:	b6 01       	movw	r22, r12
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 2ec:	01 50       	subi	r16, 0x01	; 1
 2ee:	f4 cf       	rjmp	.-24     	; 0x2d8 <vfprintf+0x1cc>
 2f0:	f1 01       	movw	r30, r2
 2f2:	84 91       	lpm	r24, Z
 2f4:	47 fc       	sbrc	r4, 7
 2f6:	80 81       	ld	r24, Z
 2f8:	ff ef       	ldi	r31, 0xFF	; 255
 2fa:	2f 1a       	sub	r2, r31
 2fc:	3f 0a       	sbc	r3, r31
 2fe:	4f 0a       	sbc	r4, r31
 300:	b6 01       	movw	r22, r12
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 308:	01 11       	cpse	r16, r1
 30a:	01 50       	subi	r16, 0x01	; 1
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	a2 1a       	sub	r10, r18
 310:	b1 08       	sbc	r11, r1
 312:	a1 14       	cp	r10, r1
 314:	b1 04       	cpc	r11, r1
 316:	61 f7       	brne	.-40     	; 0x2f0 <vfprintf+0x1e4>
 318:	f5 c0       	rjmp	.+490    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 31a:	84 36       	cpi	r24, 0x64	; 100
 31c:	11 f0       	breq	.+4      	; 0x322 <vfprintf+0x216>
 31e:	89 36       	cpi	r24, 0x69	; 105
 320:	71 f5       	brne	.+92     	; 0x37e <vfprintf+0x272>
 322:	f7 01       	movw	r30, r14
 324:	17 ff       	sbrs	r17, 7
 326:	08 c0       	rjmp	.+16     	; 0x338 <vfprintf+0x22c>
 328:	60 81       	ld	r22, Z
 32a:	71 81       	ldd	r23, Z+1	; 0x01
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	93 81       	ldd	r25, Z+3	; 0x03
 330:	97 01       	movw	r18, r14
 332:	2c 5f       	subi	r18, 0xFC	; 252
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	09 c0       	rjmp	.+18     	; 0x34a <vfprintf+0x23e>
 338:	60 81       	ld	r22, Z
 33a:	71 81       	ldd	r23, Z+1	; 0x01
 33c:	07 2e       	mov	r0, r23
 33e:	00 0c       	add	r0, r0
 340:	88 0b       	sbc	r24, r24
 342:	99 0b       	sbc	r25, r25
 344:	97 01       	movw	r18, r14
 346:	2e 5f       	subi	r18, 0xFE	; 254
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	79 01       	movw	r14, r18
 34c:	1f 76       	andi	r17, 0x6F	; 111
 34e:	31 2e       	mov	r3, r17
 350:	97 ff       	sbrs	r25, 7
 352:	0a c0       	rjmp	.+20     	; 0x368 <vfprintf+0x25c>
 354:	90 95       	com	r25
 356:	80 95       	com	r24
 358:	70 95       	com	r23
 35a:	61 95       	neg	r22
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
 35e:	8f 4f       	sbci	r24, 0xFF	; 255
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	31 2f       	mov	r19, r17
 364:	30 68       	ori	r19, 0x80	; 128
 366:	33 2e       	mov	r3, r19
 368:	2a e0       	ldi	r18, 0x0A	; 10
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	ae 01       	movw	r20, r28
 36e:	4f 5f       	subi	r20, 0xFF	; 255
 370:	5f 4f       	sbci	r21, 0xFF	; 255
 372:	0e 94 39 03 	call	0x672	; 0x672 <__ultoa_invert>
 376:	48 2e       	mov	r4, r24
 378:	4c 85       	ldd	r20, Y+12	; 0x0c
 37a:	44 1a       	sub	r4, r20
 37c:	4a c0       	rjmp	.+148    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 37e:	85 37       	cpi	r24, 0x75	; 117
 380:	29 f4       	brne	.+10     	; 0x38c <vfprintf+0x280>
 382:	1f 7e       	andi	r17, 0xEF	; 239
 384:	a1 2e       	mov	r10, r17
 386:	2a e0       	ldi	r18, 0x0A	; 10
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	25 c0       	rjmp	.+74     	; 0x3d6 <vfprintf+0x2ca>
 38c:	51 2f       	mov	r21, r17
 38e:	59 7f       	andi	r21, 0xF9	; 249
 390:	a5 2e       	mov	r10, r21
 392:	8f 36       	cpi	r24, 0x6F	; 111
 394:	c1 f0       	breq	.+48     	; 0x3c6 <vfprintf+0x2ba>
 396:	18 f4       	brcc	.+6      	; 0x39e <vfprintf+0x292>
 398:	88 35       	cpi	r24, 0x58	; 88
 39a:	79 f0       	breq	.+30     	; 0x3ba <vfprintf+0x2ae>
 39c:	bd c0       	rjmp	.+378    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 39e:	80 37       	cpi	r24, 0x70	; 112
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <vfprintf+0x29c>
 3a2:	88 37       	cpi	r24, 0x78	; 120
 3a4:	21 f0       	breq	.+8      	; 0x3ae <vfprintf+0x2a2>
 3a6:	b8 c0       	rjmp	.+368    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 3a8:	85 2f       	mov	r24, r21
 3aa:	80 61       	ori	r24, 0x10	; 16
 3ac:	a8 2e       	mov	r10, r24
 3ae:	a4 fe       	sbrs	r10, 4
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <vfprintf+0x2c0>
 3b2:	9a 2d       	mov	r25, r10
 3b4:	94 60       	ori	r25, 0x04	; 4
 3b6:	a9 2e       	mov	r10, r25
 3b8:	09 c0       	rjmp	.+18     	; 0x3cc <vfprintf+0x2c0>
 3ba:	14 ff       	sbrs	r17, 4
 3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <vfprintf+0x2c6>
 3be:	a5 2f       	mov	r26, r21
 3c0:	a6 60       	ori	r26, 0x06	; 6
 3c2:	aa 2e       	mov	r10, r26
 3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <vfprintf+0x2c6>
 3c6:	28 e0       	ldi	r18, 0x08	; 8
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <vfprintf+0x2ca>
 3cc:	20 e1       	ldi	r18, 0x10	; 16
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <vfprintf+0x2ca>
 3d2:	20 e1       	ldi	r18, 0x10	; 16
 3d4:	32 e0       	ldi	r19, 0x02	; 2
 3d6:	f7 01       	movw	r30, r14
 3d8:	a7 fe       	sbrs	r10, 7
 3da:	08 c0       	rjmp	.+16     	; 0x3ec <vfprintf+0x2e0>
 3dc:	60 81       	ld	r22, Z
 3de:	71 81       	ldd	r23, Z+1	; 0x01
 3e0:	82 81       	ldd	r24, Z+2	; 0x02
 3e2:	93 81       	ldd	r25, Z+3	; 0x03
 3e4:	a7 01       	movw	r20, r14
 3e6:	4c 5f       	subi	r20, 0xFC	; 252
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <vfprintf+0x2ee>
 3ec:	60 81       	ld	r22, Z
 3ee:	71 81       	ldd	r23, Z+1	; 0x01
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	a7 01       	movw	r20, r14
 3f6:	4e 5f       	subi	r20, 0xFE	; 254
 3f8:	5f 4f       	sbci	r21, 0xFF	; 255
 3fa:	7a 01       	movw	r14, r20
 3fc:	ae 01       	movw	r20, r28
 3fe:	4f 5f       	subi	r20, 0xFF	; 255
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	0e 94 39 03 	call	0x672	; 0x672 <__ultoa_invert>
 406:	48 2e       	mov	r4, r24
 408:	5c 85       	ldd	r21, Y+12	; 0x0c
 40a:	45 1a       	sub	r4, r21
 40c:	8a 2d       	mov	r24, r10
 40e:	8f 77       	andi	r24, 0x7F	; 127
 410:	38 2e       	mov	r3, r24
 412:	36 fe       	sbrs	r3, 6
 414:	0d c0       	rjmp	.+26     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 416:	93 2d       	mov	r25, r3
 418:	9e 7f       	andi	r25, 0xFE	; 254
 41a:	a9 2e       	mov	r10, r25
 41c:	4b 14       	cp	r4, r11
 41e:	58 f4       	brcc	.+22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 420:	34 fe       	sbrs	r3, 4
 422:	0b c0       	rjmp	.+22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 424:	32 fc       	sbrc	r3, 2
 426:	09 c0       	rjmp	.+18     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 428:	a3 2d       	mov	r26, r3
 42a:	ae 7e       	andi	r26, 0xEE	; 238
 42c:	aa 2e       	mov	r10, r26
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 430:	14 2d       	mov	r17, r4
 432:	a3 2c       	mov	r10, r3
 434:	03 c0       	rjmp	.+6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 436:	14 2d       	mov	r17, r4
 438:	01 c0       	rjmp	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	1b 2d       	mov	r17, r11
 43c:	a4 fe       	sbrs	r10, 4
 43e:	0e c0       	rjmp	.+28     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 440:	fe 01       	movw	r30, r28
 442:	e4 0d       	add	r30, r4
 444:	f1 1d       	adc	r31, r1
 446:	80 81       	ld	r24, Z
 448:	80 33       	cpi	r24, 0x30	; 48
 44a:	21 f4       	brne	.+8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 44c:	ea 2d       	mov	r30, r10
 44e:	e9 7e       	andi	r30, 0xE9	; 233
 450:	ae 2e       	mov	r10, r30
 452:	08 c0       	rjmp	.+16     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 454:	a2 fe       	sbrs	r10, 2
 456:	05 c0       	rjmp	.+10     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 458:	1e 5f       	subi	r17, 0xFE	; 254
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45c:	8a 2d       	mov	r24, r10
 45e:	86 78       	andi	r24, 0x86	; 134
 460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	1f 5f       	subi	r17, 0xFF	; 255
 464:	a3 fc       	sbrc	r10, 3
 466:	11 c0       	rjmp	.+34     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 468:	a0 fe       	sbrs	r10, 0
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 46c:	10 17       	cp	r17, r16
 46e:	88 f4       	brcc	.+34     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 470:	04 0d       	add	r16, r4
 472:	b0 2e       	mov	r11, r16
 474:	b1 1a       	sub	r11, r17
 476:	0e c0       	rjmp	.+28     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 478:	10 17       	cp	r17, r16
 47a:	60 f4       	brcc	.+24     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 47c:	b6 01       	movw	r22, r12
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 486:	1f 5f       	subi	r17, 0xFF	; 255
 488:	f7 cf       	rjmp	.-18     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 48a:	10 17       	cp	r17, r16
 48c:	18 f4       	brcc	.+6      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 48e:	01 1b       	sub	r16, r17
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	b4 2c       	mov	r11, r4
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	a4 fe       	sbrs	r10, 4
 498:	10 c0       	rjmp	.+32     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 49a:	b6 01       	movw	r22, r12
 49c:	80 e3       	ldi	r24, 0x30	; 48
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 4a4:	a2 fe       	sbrs	r10, 2
 4a6:	17 c0       	rjmp	.+46     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4a8:	a1 fc       	sbrc	r10, 1
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ac:	88 e7       	ldi	r24, 0x78	; 120
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	88 e5       	ldi	r24, 0x58	; 88
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	b6 01       	movw	r22, r12
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ba:	8a 2d       	mov	r24, r10
 4bc:	86 78       	andi	r24, 0x86	; 134
 4be:	59 f0       	breq	.+22     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4c0:	a1 fe       	sbrs	r10, 1
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c4:	8b e2       	ldi	r24, 0x2B	; 43
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c8:	80 e2       	ldi	r24, 0x20	; 32
 4ca:	a7 fc       	sbrc	r10, 7
 4cc:	8d e2       	ldi	r24, 0x2D	; 45
 4ce:	b6 01       	movw	r22, r12
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 4d6:	4b 14       	cp	r4, r11
 4d8:	38 f4       	brcc	.+14     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4da:	b6 01       	movw	r22, r12
 4dc:	80 e3       	ldi	r24, 0x30	; 48
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 4e4:	ba 94       	dec	r11
 4e6:	f7 cf       	rjmp	.-18     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4e8:	4a 94       	dec	r4
 4ea:	e1 e0       	ldi	r30, 0x01	; 1
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	ec 0f       	add	r30, r28
 4f0:	fd 1f       	adc	r31, r29
 4f2:	e4 0d       	add	r30, r4
 4f4:	f1 1d       	adc	r31, r1
 4f6:	80 81       	ld	r24, Z
 4f8:	b6 01       	movw	r22, r12
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 500:	41 10       	cpse	r4, r1
 502:	f2 cf       	rjmp	.-28     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 504:	00 23       	and	r16, r16
 506:	09 f4       	brne	.+2      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 508:	30 ce       	rjmp	.-928    	; 0x16a <vfprintf+0x5e>
 50a:	b6 01       	movw	r22, r12
 50c:	80 e2       	ldi	r24, 0x20	; 32
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fputc>
 514:	01 50       	subi	r16, 0x01	; 1
 516:	f6 cf       	rjmp	.-20     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 518:	f6 01       	movw	r30, r12
 51a:	87 81       	ldd	r24, Z+7	; 0x07
 51c:	90 85       	ldd	r25, Z+8	; 0x08
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	9f ef       	ldi	r25, 0xFF	; 255
 524:	62 96       	adiw	r28, 0x12	; 18
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	bf 90       	pop	r11
 542:	af 90       	pop	r10
 544:	9f 90       	pop	r9
 546:	8f 90       	pop	r8
 548:	7f 90       	pop	r7
 54a:	6f 90       	pop	r6
 54c:	4f 90       	pop	r4
 54e:	3f 90       	pop	r3
 550:	2f 90       	pop	r2
 552:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a3e <strnlen>:
 a3e:	cf 92       	push	r12
 a40:	df 92       	push	r13
 a42:	ef 92       	push	r14
 a44:	6b 01       	movw	r12, r22
 a46:	e8 2e       	mov	r14, r24
 a48:	a8 2f       	mov	r26, r24
 a4a:	cb 01       	movw	r24, r22
 a4c:	41 15       	cp	r20, r1
 a4e:	51 05       	cpc	r21, r1
 a50:	31 f4       	brne	.+12     	; 0xa5e <strnlen+0x20>
 a52:	8c 19       	sub	r24, r12
 a54:	9d 09       	sbc	r25, r13
 a56:	ef 90       	pop	r14
 a58:	df 90       	pop	r13
 a5a:	cf 90       	pop	r12
 a5c:	08 95       	ret
 a5e:	fc 01       	movw	r30, r24
 a60:	24 91       	lpm	r18, Z
 a62:	a7 fd       	sbrc	r26, 7
 a64:	20 81       	ld	r18, Z
 a66:	22 23       	and	r18, r18
 a68:	a1 f3       	breq	.-24     	; 0xa52 <strnlen+0x14>
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	41 50       	subi	r20, 0x01	; 1
 a70:	51 09       	sbc	r21, r1
 a72:	ec cf       	rjmp	.-40     	; 0xa4c <strnlen+0xe>

Disassembly of section .text.avrlibc:

000007c2 <fputc>:
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	fb 01       	movw	r30, r22
 7cc:	24 81       	ldd	r18, Z+4	; 0x04
 7ce:	21 fd       	sbrc	r18, 1
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <fputc+0x16>
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	9f ef       	ldi	r25, 0xFF	; 255
 7d6:	2c c0       	rjmp	.+88     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7d8:	22 ff       	sbrs	r18, 2
 7da:	16 c0       	rjmp	.+44     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7dc:	47 81       	ldd	r20, Z+7	; 0x07
 7de:	50 85       	ldd	r21, Z+8	; 0x08
 7e0:	25 81       	ldd	r18, Z+5	; 0x05
 7e2:	36 81       	ldd	r19, Z+6	; 0x06
 7e4:	42 17       	cp	r20, r18
 7e6:	53 07       	cpc	r21, r19
 7e8:	44 f4       	brge	.+16     	; 0x7fa <fputc+0x38>
 7ea:	a0 81       	ld	r26, Z
 7ec:	b1 81       	ldd	r27, Z+1	; 0x01
 7ee:	9d 01       	movw	r18, r26
 7f0:	2f 5f       	subi	r18, 0xFF	; 255
 7f2:	3f 4f       	sbci	r19, 0xFF	; 255
 7f4:	31 83       	std	Z+1, r19	; 0x01
 7f6:	20 83       	st	Z, r18
 7f8:	8c 93       	st	X, r24
 7fa:	27 81       	ldd	r18, Z+7	; 0x07
 7fc:	30 85       	ldd	r19, Z+8	; 0x08
 7fe:	2f 5f       	subi	r18, 0xFF	; 255
 800:	3f 4f       	sbci	r19, 0xFF	; 255
 802:	30 87       	std	Z+8, r19	; 0x08
 804:	27 83       	std	Z+7, r18	; 0x07
 806:	14 c0       	rjmp	.+40     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 808:	8b 01       	movw	r16, r22
 80a:	ec 01       	movw	r28, r24
 80c:	fb 01       	movw	r30, r22
 80e:	01 84       	ldd	r0, Z+9	; 0x09
 810:	f2 85       	ldd	r31, Z+10	; 0x0a
 812:	e0 2d       	mov	r30, r0
 814:	09 95       	icall
 816:	89 2b       	or	r24, r25
 818:	e1 f6       	brne	.-72     	; 0x7d2 <fputc+0x10>
 81a:	d8 01       	movw	r26, r16
 81c:	17 96       	adiw	r26, 0x07	; 7
 81e:	8d 91       	ld	r24, X+
 820:	9c 91       	ld	r25, X
 822:	18 97       	sbiw	r26, 0x08	; 8
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	18 96       	adiw	r26, 0x08	; 8
 828:	9c 93       	st	X, r25
 82a:	8e 93       	st	-X, r24
 82c:	17 97       	sbiw	r26, 0x07	; 7
 82e:	ce 01       	movw	r24, r28
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	08 95       	ret

Disassembly of section .text.avrlibc:

00000672 <__ultoa_invert>:
 672:	fa 01       	movw	r30, r20
 674:	aa 27       	eor	r26, r26
 676:	28 30       	cpi	r18, 0x08	; 8
 678:	51 f1       	breq	.+84     	; 0x6ce <__ultoa_invert+0x5c>
 67a:	20 31       	cpi	r18, 0x10	; 16
 67c:	81 f1       	breq	.+96     	; 0x6de <__ultoa_invert+0x6c>
 67e:	e8 94       	clt
 680:	6f 93       	push	r22
 682:	6e 7f       	andi	r22, 0xFE	; 254
 684:	6e 5f       	subi	r22, 0xFE	; 254
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	af 4f       	sbci	r26, 0xFF	; 255
 68e:	b1 e0       	ldi	r27, 0x01	; 1
 690:	3e d0       	rcall	.+124    	; 0x70e <__ultoa_invert+0x9c>
 692:	b4 e0       	ldi	r27, 0x04	; 4
 694:	3c d0       	rcall	.+120    	; 0x70e <__ultoa_invert+0x9c>
 696:	67 0f       	add	r22, r23
 698:	78 1f       	adc	r23, r24
 69a:	89 1f       	adc	r24, r25
 69c:	9a 1f       	adc	r25, r26
 69e:	a1 1d       	adc	r26, r1
 6a0:	68 0f       	add	r22, r24
 6a2:	79 1f       	adc	r23, r25
 6a4:	8a 1f       	adc	r24, r26
 6a6:	91 1d       	adc	r25, r1
 6a8:	a1 1d       	adc	r26, r1
 6aa:	6a 0f       	add	r22, r26
 6ac:	71 1d       	adc	r23, r1
 6ae:	81 1d       	adc	r24, r1
 6b0:	91 1d       	adc	r25, r1
 6b2:	a1 1d       	adc	r26, r1
 6b4:	20 d0       	rcall	.+64     	; 0x6f6 <__ultoa_invert+0x84>
 6b6:	09 f4       	brne	.+2      	; 0x6ba <__ultoa_invert+0x48>
 6b8:	68 94       	set
 6ba:	3f 91       	pop	r19
 6bc:	2a e0       	ldi	r18, 0x0A	; 10
 6be:	26 9f       	mul	r18, r22
 6c0:	11 24       	eor	r1, r1
 6c2:	30 19       	sub	r19, r0
 6c4:	30 5d       	subi	r19, 0xD0	; 208
 6c6:	31 93       	st	Z+, r19
 6c8:	de f6       	brtc	.-74     	; 0x680 <__ultoa_invert+0xe>
 6ca:	cf 01       	movw	r24, r30
 6cc:	08 95       	ret
 6ce:	46 2f       	mov	r20, r22
 6d0:	47 70       	andi	r20, 0x07	; 7
 6d2:	40 5d       	subi	r20, 0xD0	; 208
 6d4:	41 93       	st	Z+, r20
 6d6:	b3 e0       	ldi	r27, 0x03	; 3
 6d8:	0f d0       	rcall	.+30     	; 0x6f8 <__ultoa_invert+0x86>
 6da:	c9 f7       	brne	.-14     	; 0x6ce <__ultoa_invert+0x5c>
 6dc:	f6 cf       	rjmp	.-20     	; 0x6ca <__ultoa_invert+0x58>
 6de:	46 2f       	mov	r20, r22
 6e0:	4f 70       	andi	r20, 0x0F	; 15
 6e2:	40 5d       	subi	r20, 0xD0	; 208
 6e4:	4a 33       	cpi	r20, 0x3A	; 58
 6e6:	18 f0       	brcs	.+6      	; 0x6ee <__ultoa_invert+0x7c>
 6e8:	49 5d       	subi	r20, 0xD9	; 217
 6ea:	31 fd       	sbrc	r19, 1
 6ec:	40 52       	subi	r20, 0x20	; 32
 6ee:	41 93       	st	Z+, r20
 6f0:	02 d0       	rcall	.+4      	; 0x6f6 <__ultoa_invert+0x84>
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__ultoa_invert+0x6c>
 6f4:	ea cf       	rjmp	.-44     	; 0x6ca <__ultoa_invert+0x58>
 6f6:	b4 e0       	ldi	r27, 0x04	; 4
 6f8:	a6 95       	lsr	r26
 6fa:	97 95       	ror	r25
 6fc:	87 95       	ror	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	ba 95       	dec	r27
 704:	c9 f7       	brne	.-14     	; 0x6f8 <__ultoa_invert+0x86>
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	61 05       	cpc	r22, r1
 70a:	71 05       	cpc	r23, r1
 70c:	08 95       	ret
 70e:	9b 01       	movw	r18, r22
 710:	ac 01       	movw	r20, r24
 712:	0a 2e       	mov	r0, r26
 714:	06 94       	lsr	r0
 716:	57 95       	ror	r21
 718:	47 95       	ror	r20
 71a:	37 95       	ror	r19
 71c:	27 95       	ror	r18
 71e:	ba 95       	dec	r27
 720:	c9 f7       	brne	.-14     	; 0x714 <__ultoa_invert+0xa2>
 722:	62 0f       	add	r22, r18
 724:	73 1f       	adc	r23, r19
 726:	84 1f       	adc	r24, r20
 728:	95 1f       	adc	r25, r21
 72a:	a0 1d       	adc	r26, r0
 72c:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000a06 <__prologue_saves__>:
 a06:	2f 92       	push	r2
 a08:	3f 92       	push	r3
 a0a:	4f 92       	push	r4
 a0c:	5f 92       	push	r5
 a0e:	6f 92       	push	r6
 a10:	7f 92       	push	r7
 a12:	8f 92       	push	r8
 a14:	9f 92       	push	r9
 a16:	af 92       	push	r10
 a18:	bf 92       	push	r11
 a1a:	cf 92       	push	r12
 a1c:	df 92       	push	r13
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	ca 1b       	sub	r28, r26
 a30:	db 0b       	sbc	r29, r27
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	f8 94       	cli
 a36:	de bf       	out	0x3e, r29	; 62
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	cd bf       	out	0x3d, r28	; 61
 a3c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000a74 <__epilogue_restores__>:
 a74:	2a 88       	ldd	r2, Y+18	; 0x12
 a76:	39 88       	ldd	r3, Y+17	; 0x11
 a78:	48 88       	ldd	r4, Y+16	; 0x10
 a7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a80:	8c 84       	ldd	r8, Y+12	; 0x0c
 a82:	9b 84       	ldd	r9, Y+11	; 0x0b
 a84:	aa 84       	ldd	r10, Y+10	; 0x0a
 a86:	b9 84       	ldd	r11, Y+9	; 0x09
 a88:	c8 84       	ldd	r12, Y+8	; 0x08
 a8a:	df 80       	ldd	r13, Y+7	; 0x07
 a8c:	ee 80       	ldd	r14, Y+6	; 0x06
 a8e:	fd 80       	ldd	r15, Y+5	; 0x05
 a90:	0c 81       	ldd	r16, Y+4	; 0x04
 a92:	1b 81       	ldd	r17, Y+3	; 0x03
 a94:	aa 81       	ldd	r26, Y+2	; 0x02
 a96:	b9 81       	ldd	r27, Y+1	; 0x01
 a98:	ce 0f       	add	r28, r30
 a9a:	d1 1d       	adc	r29, r1
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	ed 01       	movw	r28, r26
 aa8:	08 95       	ret
