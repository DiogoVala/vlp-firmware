
RF24_Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000678  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000120  00000000  00000000  000006a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002112  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000b5b  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ae7  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002cc  00000000  00000000  00003f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000292  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c3f  00000000  00000000  0000447a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e0  00000000  00000000  000050b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000059a  0000059a  0000066e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000519c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 0000003f  000000d0  000000d0  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .text.main    00000116  00000110  00000110  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.command  00000020  00800100  00800100  00000678  2**0
                  ALLOC
 16 .data.rx_addr 00000003  00800120  0000059e  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.tx_addr 00000003  00800123  000005a1  00000675  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.nrf24_ce_digitalWrite 00000028  000004c6  000004c6  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.nrf24_csn_digitalWrite 00000014  0000055e  0000055e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.nrf24_rx_address 00000038  00000408  00000408  000004dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_tx_address 0000006c  000002ba  000002ba  0000038e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_getStatus 0000001c  00000514  00000514  000005e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_configRegister 0000002a  0000049c  0000049c  00000570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_powerUpRx 00000030  00000440  00000440  00000514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_wait_tx_result 00000056  00000326  00000326  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_powerUpTx 0000003e  000003ca  000003ca  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_sendData 0000004e  0000037c  0000037c  00000450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.nrf24_readRegister 00000026  000004ee  000004ee  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.nrf24_config 00000094  00000226  00000226  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .data.rf24_mode 00000001  00800126  0000010f  000001e3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .text.spi_exchange 0000000c  0000058e  0000058e  00000662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.spi_init 00000016  00000548  00000548  0000061c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart_init 00000018  00000530  00000530  00000604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.uart_putc 0000000e  00000572  00000572  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.uart_puts 0000002c  00000470  00000470  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 0000000e  00000580  00000580  00000654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
   8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
   c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  10:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  14:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  18:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  1c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  20:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  24:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  28:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  2c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  30:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  34:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  38:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  3c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  40:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  44:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  48:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  4c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  50:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  54:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  58:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  5c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  60:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  64:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 20       	and	r0, r1
  6c:	80 01       	movw	r16, r0
  6e:	20 01       	movw	r4, r0
  70:	26 00       	.word	0x0026	; ????
  72:	05 9e       	mul	r0, r21
  74:	01 26       	eor	r0, r17
  76:	01 27       	eor	r16, r17
  78:	00 01       	movw	r0, r0
  7a:	0f 00       	.word	0x000f	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	e8 e6       	ldi	r30, 0x68	; 104
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	17 c0       	rjmp	.+46     	; 0xbe <__do_clear_bss+0x8>
  90:	b5 91       	lpm	r27, Z+
  92:	a5 91       	lpm	r26, Z+
  94:	35 91       	lpm	r19, Z+
  96:	25 91       	lpm	r18, Z+
  98:	05 91       	lpm	r16, Z+
  9a:	07 fd       	sbrc	r16, 7
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <__do_clear_bss>
  9e:	95 91       	lpm	r25, Z+
  a0:	85 91       	lpm	r24, Z+
  a2:	ef 01       	movw	r28, r30
  a4:	f9 2f       	mov	r31, r25
  a6:	e8 2f       	mov	r30, r24
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x20>
  b2:	fe 01       	movw	r30, r28
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_clear_bss+0x8>

000000b6 <__do_clear_bss>:
  b6:	1d 92       	st	X+, r1
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__do_clear_bss>
  be:	eb 37       	cpi	r30, 0x7B	; 123
  c0:	f4 07       	cpc	r31, r20
  c2:	31 f7       	brne	.-52     	; 0x90 <__do_copy_data+0x8>
  c4:	0e 94 88 00 	call	0x110	; 0x110 <main>
  c8:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>

Disassembly of section .text:

0000059a <__bad_interrupt>:
 59a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000110 <main>:
volatile uint8_t rx_addr[]={0x05, 0x10, 0x20};
	
volatile uint8_t command[32]={};

int main(void)
{
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	a8 95       	wdr
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 128:	88 61       	ori	r24, 0x18	; 24
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 12e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 132:	0f be       	out	0x3f, r0	; 63
	uint8_t try=1;
	uint8_t flag=0;
	uint8_t uart_buffer[20];
	
	wdt_disable();
	uart_init();
 134:	0e 94 98 02 	call	0x530	; 0x530 <uart_init>
	spi_init();
 138:	0e 94 a4 02 	call	0x548	; 0x548 <spi_init>
	
	memset(command, 'a', 32);
 13c:	40 e2       	ldi	r20, 0x20	; 32
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	61 e6       	ldi	r22, 0x61	; 97
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 c0 02 	call	0x580	; 0x580 <memset>
	for(uint8_t i=0; i<32; i++){
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	06 c0       	rjmp	.+12     	; 0x15c <main+0x4c>
		command[i]=i;
 150:	e8 2f       	mov	r30, r24
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 83       	st	Z, r24
	wdt_disable();
	uart_init();
	spi_init();
	
	memset(command, 'a', 32);
	for(uint8_t i=0; i<32; i++){
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 32       	cpi	r24, 0x20	; 32
 15e:	c0 f3       	brcs	.-16     	; 0x150 <main+0x40>
		command[i]=i;
	}
		
	status=nrf24_config(tx_addr,rx_addr);
 160:	60 e2       	ldi	r22, 0x20	; 32
 162:	71 e0       	ldi	r23, 0x01	; 1
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 13 01 	call	0x226	; 0x226 <nrf24_config>
	if(status!=0){
 16c:	88 23       	and	r24, r24
 16e:	41 f0       	breq	.+16     	; 0x180 <main+0x70>
		uart_puts("\r\nNRF24 Not connected!");
 170:	60 ed       	ldi	r22, 0xD0	; 208
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 38 02 	call	0x470	; 0x470 <uart_puts>
		return -1;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	4b c0       	rjmp	.+150    	; 0x216 <main+0x106>
	}

	uart_puts("\r\nReady to transmit");
 180:	67 ee       	ldi	r22, 0xE7	; 231
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 38 02 	call	0x470	; 0x470 <uart_puts>
	uint8_t dir=0;
	uint8_t tx_result;
	
	uint32_t i=321;
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	a0 e0       	ldi	r26, 0x00	; 0
 190:	b0 e0       	ldi	r27, 0x00	; 0
		uart_puts("\r\nNRF24 Not connected!");
		return -1;
	}

	uart_puts("\r\nReady to transmit");
	uint8_t dir=0;
 192:	d0 e0       	ldi	r29, 0x00	; 0

int main(void)
{
	uint8_t status;
	uint8_t try=1;
	uint8_t flag=0;
 194:	10 e0       	ldi	r17, 0x00	; 0
volatile uint8_t command[32]={};

int main(void)
{
	uint8_t status;
	uint8_t try=1;
 196:	c1 e0       	ldi	r28, 0x01	; 1
	uart_puts("\r\nReady to transmit");
	uint8_t dir=0;
	uint8_t tx_result;
	
	uint32_t i=321;
		while(i--)
 198:	22 c0       	rjmp	.+68     	; 0x1de <main+0xce>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	87 ee       	ldi	r24, 0xE7	; 231
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x8e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x94>
 1a4:	00 00       	nop
		{
			//sprintf(uart_buffer, "\r\n%d", try);
			//uart_puts(uart_buffer);
			
			_delay_ms(4);
			tx_result=NRF24_MESSAGE_LOST;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
			while(tx_result==NRF24_MESSAGE_LOST)
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <main+0xa8>
			{
				nrf24_sendData(command, try);
 1aa:	6c 2f       	mov	r22, r28
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 be 01 	call	0x37c	; 0x37c <nrf24_sendData>
				tx_result=nrf24_wait_tx_result();
 1b4:	0e 94 93 01 	call	0x326	; 0x326 <nrf24_wait_tx_result>
			//sprintf(uart_buffer, "\r\n%d", try);
			//uart_puts(uart_buffer);
			
			_delay_ms(4);
			tx_result=NRF24_MESSAGE_LOST;
			while(tx_result==NRF24_MESSAGE_LOST)
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	b9 f3       	breq	.-18     	; 0x1aa <main+0x9a>
			}
			
			
			
			
			if(tx_result != NRF24_MESSAGE_SENT)
 1bc:	81 11       	cpse	r24, r1
				flag=1;
 1be:	11 e0       	ldi	r17, 0x01	; 1
			
			if (dir==1)
 1c0:	d1 30       	cpi	r29, 0x01	; 1
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <main+0xb8>
				try++;
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <main+0xba>
			else
				try--;
 1c8:	c1 50       	subi	r28, 0x01	; 1
			if (try==32)
 1ca:	c0 32       	cpi	r28, 0x20	; 32
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <main+0xc4>
				dir=1;
			else if(try==0)
 1ce:	cc 23       	and	r28, r28
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <main+0xc8>
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <main+0xca>
			if (dir==1)
				try++;
			else
				try--;
			if (try==32)
				dir=1;
 1d4:	d1 e0       	ldi	r29, 0x01	; 1
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <main+0xca>
			else if(try==0)
				dir=0;
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	d7 01       	movw	r26, r14
 1dc:	c6 01       	movw	r24, r12
	uart_puts("\r\nReady to transmit");
	uint8_t dir=0;
	uint8_t tx_result;
	
	uint32_t i=321;
		while(i--)
 1de:	6c 01       	movw	r12, r24
 1e0:	7d 01       	movw	r14, r26
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	c2 1a       	sub	r12, r18
 1e6:	d1 08       	sbc	r13, r1
 1e8:	e1 08       	sbc	r14, r1
 1ea:	f1 08       	sbc	r15, r1
 1ec:	89 2b       	or	r24, r25
 1ee:	8a 2b       	or	r24, r26
 1f0:	8b 2b       	or	r24, r27
 1f2:	99 f6       	brne	.-90     	; 0x19a <main+0x8a>
			if (try==32)
				dir=1;
			else if(try==0)
				dir=0;
		}
		if(flag==1)
 1f4:	11 30       	cpi	r17, 0x01	; 1
 1f6:	41 f4       	brne	.+16     	; 0x208 <main+0xf8>
			uart_puts("\r\nfailed");
 1f8:	6b ef       	ldi	r22, 0xFB	; 251
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 38 02 	call	0x470	; 0x470 <uart_puts>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	07 c0       	rjmp	.+14     	; 0x216 <main+0x106>
		else
			uart_puts("\r\nno fails");
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	71 e0       	ldi	r23, 0x01	; 1
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 38 02 	call	0x470	; 0x470 <uart_puts>
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

000004c6 <nrf24_ce_digitalWrite>:
		spi_exchange(FLUSH_RX);
		nrf24_csn_digitalWrite(HIGH);
		return 0;
	}
	return payload_len;
}
 4c6:	88 23       	and	r24, r24
 4c8:	41 f0       	breq	.+16     	; 0x4da <nrf24_ce_digitalWrite+0x14>
 4ca:	85 b1       	in	r24, 0x05	; 5
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	85 b9       	out	0x05, r24	; 5
 4d0:	85 e3       	ldi	r24, 0x35	; 53
 4d2:	8a 95       	dec	r24
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <nrf24_ce_digitalWrite+0xc>
 4d6:	00 00       	nop
 4d8:	08 95       	ret
 4da:	8f e1       	ldi	r24, 0x1F	; 31
 4dc:	93 e0       	ldi	r25, 0x03	; 3
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <nrf24_ce_digitalWrite+0x18>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <nrf24_ce_digitalWrite+0x1e>
 4e4:	00 00       	nop
 4e6:	85 b1       	in	r24, 0x05	; 5
 4e8:	8e 7f       	andi	r24, 0xFE	; 254
 4ea:	85 b9       	out	0x05, r24	; 5
 4ec:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

0000055e <nrf24_csn_digitalWrite>:
	}
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 55e:	88 23       	and	r24, r24
 560:	21 f0       	breq	.+8      	; 0x56a <nrf24_csn_digitalWrite+0xc>
		set_bit(NRF24_PORT, NRF24_CS);
 562:	85 b1       	in	r24, 0x05	; 5
 564:	84 60       	ori	r24, 0x04	; 4
 566:	85 b9       	out	0x05, r24	; 5
 568:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
 56a:	85 b1       	in	r24, 0x05	; 5
 56c:	8b 7f       	andi	r24, 0xFB	; 251
 56e:	85 b9       	out	0x05, r24	; 5
 570:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

00000408 <nrf24_rx_address>:
		spi_exchange(FLUSH_RX);
		nrf24_csn_digitalWrite(HIGH);
		return 0;
	}
	return payload_len;
}
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	8c 01       	movw	r16, r24
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 416:	8b e2       	ldi	r24, 0x2B	; 43
 418:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	07 c0       	rjmp	.+14     	; 0x42e <nrf24_rx_address+0x26>
 420:	f8 01       	movw	r30, r16
 422:	ec 0f       	add	r30, r28
 424:	f1 1d       	adc	r31, r1
 426:	80 81       	ld	r24, Z
 428:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 42c:	cf 5f       	subi	r28, 0xFF	; 255
 42e:	c3 30       	cpi	r28, 0x03	; 3
 430:	b8 f3       	brcs	.-18     	; 0x420 <nrf24_rx_address+0x18>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

000002ba <nrf24_tx_address>:
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	8c 01       	movw	r16, r24
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <nrf24_tx_address+0x26>
 2d2:	f8 01       	movw	r30, r16
 2d4:	ec 0f       	add	r30, r28
 2d6:	f1 1d       	adc	r31, r1
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 2de:	cf 5f       	subi	r28, 0xFF	; 255
 2e0:	c3 30       	cpi	r28, 0x03	; 3
 2e2:	b8 f3       	brcs	.-18     	; 0x2d2 <nrf24_tx_address+0x18>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 2ea:	8f e8       	ldi	r24, 0x8F	; 143
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <nrf24_tx_address+0x34>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <nrf24_tx_address+0x3a>
 2f4:	00 00       	nop
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 2fc:	8a e2       	ldi	r24, 0x2A	; 42
 2fe:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	07 c0       	rjmp	.+14     	; 0x314 <nrf24_tx_address+0x5a>
 306:	f8 01       	movw	r30, r16
 308:	ec 0f       	add	r30, r28
 30a:	f1 1d       	adc	r31, r1
 30c:	80 81       	ld	r24, Z
 30e:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 312:	cf 5f       	subi	r28, 0xFF	; 255
 314:	c3 30       	cpi	r28, 0x03	; 3
 316:	b8 f3       	brcs	.-18     	; 0x306 <nrf24_tx_address+0x4c>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00000514 <nrf24_getStatus>:
	}
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
 514:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 522:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
	return rv;
}
 52a:	8c 2f       	mov	r24, r28
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

0000049c <nrf24_configRegister>:
		spi_exchange(FLUSH_RX);
		nrf24_csn_digitalWrite(HIGH);
		return 0;
	}
	return payload_len;
}
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	c8 2f       	mov	r28, r24
 4a2:	d6 2f       	mov	r29, r22
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 4aa:	8c 2f       	mov	r24, r28
 4ac:	8f 71       	andi	r24, 0x1F	; 31
 4ae:	80 62       	ori	r24, 0x20	; 32
 4b0:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 4b4:	8d 2f       	mov	r24, r29
 4b6:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

00000440 <nrf24_powerUpRx>:
 440:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <rf24_mode>
 444:	88 23       	and	r24, r24
 446:	99 f0       	breq	.+38     	; 0x46e <nrf24_powerUpRx+0x2e>
 448:	6f e7       	ldi	r22, 0x7F	; 127
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 450:	62 e0       	ldi	r22, 0x02	; 2
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 458:	8f e8       	ldi	r24, 0x8F	; 143
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <nrf24_powerUpRx+0x1c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <nrf24_powerUpRx+0x22>
 462:	00 00       	nop
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 63 02 	call	0x4c6	; 0x4c6 <nrf24_ce_digitalWrite>
 46a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <rf24_mode>
 46e:	08 95       	ret

Disassembly of section .text.nrf24_wait_tx_result:

00000326 <nrf24_wait_tx_result>:
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	0e 94 8a 02 	call	0x514	; 0x514 <nrf24_getStatus>
 330:	0e 94 8a 02 	call	0x514	; 0x514 <nrf24_getStatus>
 334:	18 2f       	mov	r17, r24
 336:	10 72       	andi	r17, 0x20	; 32
 338:	c0 e1       	ldi	r28, 0x10	; 16
 33a:	d7 e2       	ldi	r29, 0x27	; 39
 33c:	08 c0       	rjmp	.+16     	; 0x34e <nrf24_wait_tx_result+0x28>
 33e:	0e 94 8a 02 	call	0x514	; 0x514 <nrf24_getStatus>
 342:	18 2f       	mov	r17, r24
 344:	10 72       	andi	r17, 0x20	; 32
 346:	95 e3       	ldi	r25, 0x35	; 53
 348:	9a 95       	dec	r25
 34a:	f1 f7       	brne	.-4      	; 0x348 <nrf24_wait_tx_result+0x22>
 34c:	00 00       	nop
 34e:	11 23       	and	r17, r17
 350:	11 f0       	breq	.+4      	; 0x356 <nrf24_wait_tx_result+0x30>
 352:	80 ff       	sbrs	r24, 0
 354:	04 c0       	rjmp	.+8      	; 0x35e <nrf24_wait_tx_result+0x38>
 356:	84 fd       	sbrc	r24, 4
 358:	02 c0       	rjmp	.+4      	; 0x35e <nrf24_wait_tx_result+0x38>
 35a:	21 97       	sbiw	r28, 0x01	; 1
 35c:	81 f7       	brne	.-32     	; 0x33e <nrf24_wait_tx_result+0x18>
 35e:	60 e6       	ldi	r22, 0x60	; 96
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 366:	0e 94 20 02 	call	0x440	; 0x440 <nrf24_powerUpRx>
 36a:	11 23       	and	r17, r17
 36c:	11 f0       	breq	.+4      	; 0x372 <nrf24_wait_tx_result+0x4c>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	01 c0       	rjmp	.+2      	; 0x374 <nrf24_wait_tx_result+0x4e>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	08 95       	ret

Disassembly of section .text.nrf24_powerUpTx:

000003ca <nrf24_powerUpTx>:
 3ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <rf24_mode>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	d1 f0       	breq	.+52     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d2:	6e e7       	ldi	r22, 0x7E	; 126
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 3e8:	81 ee       	ldi	r24, 0xE1	; 225
 3ea:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 3f4:	8f e8       	ldi	r24, 0x8F	; 143
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <nrf24_powerUpTx+0x2e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <nrf24_powerUpTx+0x34>
 3fe:	00 00       	nop
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <rf24_mode>
 406:	08 95       	ret

Disassembly of section .text.nrf24_sendData:

0000037c <nrf24_sendData>:
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8c 01       	movw	r16, r24
 386:	d6 2f       	mov	r29, r22
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <nrf24_ce_digitalWrite>
 38e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <nrf24_powerUpTx>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 398:	80 ea       	ldi	r24, 0xA0	; 160
 39a:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 39e:	c0 e0       	ldi	r28, 0x00	; 0
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <nrf24_sendData+0x34>
 3a2:	f8 01       	movw	r30, r16
 3a4:	ec 0f       	add	r30, r28
 3a6:	f1 1d       	adc	r31, r1
 3a8:	80 81       	ld	r24, Z
 3aa:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 3ae:	cf 5f       	subi	r28, 0xFF	; 255
 3b0:	cd 17       	cp	r28, r29
 3b2:	b8 f3       	brcs	.-18     	; 0x3a2 <nrf24_sendData+0x26>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <nrf24_ce_digitalWrite>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	08 95       	ret

Disassembly of section .text.nrf24_readRegister:

000004ee <nrf24_readRegister>:
 4ee:	cf 93       	push	r28
 4f0:	c8 2f       	mov	r28, r24
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 4f8:	8c 2f       	mov	r24, r28
 4fa:	8f 71       	andi	r24, 0x1F	; 31
 4fc:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_exchange>
 506:	c8 2f       	mov	r28, r24
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 50e:	8c 2f       	mov	r24, r28
 510:	cf 91       	pop	r28
 512:	08 95       	ret

Disassembly of section .text.nrf24_config:

00000226 <nrf24_config>:
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
 230:	eb 01       	movw	r28, r22
 232:	84 b1       	in	r24, 0x04	; 4
 234:	85 60       	ori	r24, 0x05	; 5
 236:	84 b9       	out	0x04, r24	; 4
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <nrf24_ce_digitalWrite>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 af 02 	call	0x55e	; 0x55e <nrf24_csn_digitalWrite>
 244:	8f e1       	ldi	r24, 0x1F	; 31
 246:	9e e4       	ldi	r25, 0x4E	; 78
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <nrf24_config+0x22>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <nrf24_config+0x28>
 24e:	00 00       	nop
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 258:	c8 01       	movw	r24, r16
 25a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <nrf24_tx_address>
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 04 02 	call	0x408	; 0x408 <nrf24_rx_address>
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	8c e1       	ldi	r24, 0x1C	; 28
 270:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	8d e1       	ldi	r24, 0x1D	; 29
 278:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 27c:	6e e0       	ldi	r22, 0x0E	; 14
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 28c:	6f e7       	ldi	r22, 0x7F	; 127
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	0e 94 77 02 	call	0x4ee	; 0x4ee <nrf24_readRegister>
 29a:	8f 37       	cpi	r24, 0x7F	; 127
 29c:	41 f4       	brne	.+16     	; 0x2ae <nrf24_config+0x88>
 29e:	60 e7       	ldi	r22, 0x70	; 112
 2a0:	87 e0       	ldi	r24, 0x07	; 7
 2a2:	0e 94 4e 02 	call	0x49c	; 0x49c <nrf24_configRegister>
 2a6:	0e 94 20 02 	call	0x440	; 0x440 <nrf24_powerUpRx>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <nrf24_config+0x8a>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

Disassembly of section .text.spi_exchange:

0000058e <spi_exchange>:
#include "spi.h"

/* Send one byte over SPI */
uint8_t spi_exchange(uint8_t data) {

    SPDR = data;
 58e:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 590:	0d b4       	in	r0, 0x2d	; 45
 592:	07 fe       	sbrs	r0, 7
 594:	fd cf       	rjmp	.-6      	; 0x590 <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 596:	8e b5       	in	r24, 0x2e	; 46
}
 598:	08 95       	ret

Disassembly of section .text.spi_init:

00000548 <spi_init>:
		datain[i] = spi_exchange(dataout[i]);
	}
}

void spi_init(void) {
	SPI_DDR |= _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 548:	84 b1       	in	r24, 0x04	; 4
 54a:	8e 62       	ori	r24, 0x2E	; 46
 54c:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~_BV(SPI_MISO);
 54e:	84 b1       	in	r24, 0x04	; 4
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 554:	80 e5       	ldi	r24, 0x50	; 80
 556:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1 << SPI2X; /* double speed */
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	8d bd       	out	0x2d, r24	; 45
 55c:	08 95       	ret

Disassembly of section .text.uart_init:

00000530 <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 530:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 534:	87 e6       	ldi	r24, 0x67	; 103
 536:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 540:	88 e1       	ldi	r24, 0x18	; 24
 542:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 546:	08 95       	ret

Disassembly of section .text.uart_putc:

00000572 <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 572:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 576:	95 ff       	sbrs	r25, 5
 578:	fc cf       	rjmp	.-8      	; 0x572 <uart_putc>
	UDR0 = DataByte;
 57a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 57e:	08 95       	ret

Disassembly of section .text.uart_puts:

00000470 <uart_puts>:
}

void uart_puts(const char *s )
{
 470:	cf 92       	push	r12
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	6b 01       	movw	r12, r22
 478:	e8 2e       	mov	r14, r24
	while (*s)
 47a:	06 c0       	rjmp	.+12     	; 0x488 <uart_puts+0x18>
	uart_putc(*s++);
 47c:	9f ef       	ldi	r25, 0xFF	; 255
 47e:	c9 1a       	sub	r12, r25
 480:	d9 0a       	sbc	r13, r25
 482:	e9 0a       	sbc	r14, r25
 484:	0e 94 b9 02 	call	0x572	; 0x572 <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 488:	f6 01       	movw	r30, r12
 48a:	84 91       	lpm	r24, Z
 48c:	e7 fc       	sbrc	r14, 7
 48e:	80 81       	ld	r24, Z
 490:	81 11       	cpse	r24, r1
 492:	f4 cf       	rjmp	.-24     	; 0x47c <uart_puts+0xc>
	uart_putc(*s++);

	}/* uart_puts */
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000580 <memset>:
 580:	dc 01       	movw	r26, r24
 582:	01 c0       	rjmp	.+2      	; 0x586 <memset+0x6>
 584:	6d 93       	st	X+, r22
 586:	41 50       	subi	r20, 0x01	; 1
 588:	50 40       	sbci	r21, 0x00	; 0
 58a:	e0 f7       	brcc	.-8      	; 0x584 <memset+0x4>
 58c:	08 95       	ret
