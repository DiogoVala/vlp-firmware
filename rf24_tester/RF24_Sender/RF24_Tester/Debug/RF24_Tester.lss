
RF24_Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004d7  0000056b  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000056b  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000138  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001eb5  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a50  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000940  00000000  00000000  00002fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000324  00000000  00000000  00003918  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027b  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000aa4  00000000  00000000  00003eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  0000495b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000004c2  000004c2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 00000017  000000c4  000000c4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .rodata       00000011  00800100  000004c6  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    0000010e  000000dc  000000dc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.nrf24_ce_digitalWrite 00000014  00000450  00000450  000004e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.nrf24_csn_digitalWrite 00000014  00000464  00000464  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.nrf24_getStatus 0000001c  0000041c  0000041c  000004b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.nrf24_configRegister 0000002a  000003d2  000003d2  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.nrf24_powerUpTx 00000012  00000478  00000478  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_powerUpRx 00000030  00000376  00000376  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_wait_tx_result 00000046  000002b6  000002b6  0000034a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_sendData 00000040  000002fc  000002fc  00000390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_writeRegister 0000003a  0000033c  0000033c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_rx_address 00000012  0000048a  0000048a  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_tx_address 00000020  000003fc  000003fc  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_config 00000080  000001ea  000001ea  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.spi_exchange 0000000c  000004aa  000004aa  0000053e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.spi_exchange_n 0000004c  0000026a  0000026a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.spi_init 0000000c  000004b6  000004b6  0000054a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.uart_init 00000018  00000438  00000438  000004cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.uart_putc 0000000e  0000049c  0000049c  00000530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart_puts 0000002c  000003a6  000003a6  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
   8:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
   c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  10:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  14:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  18:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  1c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  20:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  24:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  28:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  2c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  30:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  34:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  38:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  3c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  40:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  44:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  48:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  4c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  50:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  54:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  58:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  5c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  60:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>
  64:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 11       	cpse	r16, r1
  6c:	00 04       	cpc	r0, r0
  6e:	c6 00       	.word	0x00c6	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  bc:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000004c2 <__bad_interrupt>:
 4c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000dc <main>:
#include "spi.h"
#include "uart.h"
#include "config.h"

int main(void)
{
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	61 97       	sbiw	r28, 0x11	; 17
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	a8 95       	wdr
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 104:	88 61       	ori	r24, 0x18	; 24
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 10a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 10e:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	uart_init();
 110:	0e 94 1c 02 	call	0x438	; 0x438 <uart_init>
	spi_init();
 114:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <spi_init>
	
	uint8_t command[]={'T', 'E', 'S', 'T', 'I', 'N', 'G'};
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	de 01       	movw	r26, r28
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x46>
		
	uint8_t tx_addr[]={'M', 'A', 'S', 'T', 'R'};
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	e7 e0       	ldi	r30, 0x07	; 7
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	de 01       	movw	r26, r28
 132:	18 96       	adiw	r26, 0x08	; 8
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x58>
	uint8_t rx_addr[]={'S', 'L', 'A', 'V', 'E'};
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	ec e0       	ldi	r30, 0x0C	; 12
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	de 01       	movw	r26, r28
 144:	1d 96       	adiw	r26, 0x0d	; 13
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	8a 95       	dec	r24
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x6a>
		
	nrf24_config(tx_addr,rx_addr);
 14e:	be 01       	movw	r22, r28
 150:	63 5f       	subi	r22, 0xF3	; 243
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	ce 01       	movw	r24, r28
 156:	08 96       	adiw	r24, 0x08	; 8
 158:	0e 94 f5 00 	call	0x1ea	; 0x1ea <nrf24_config>
	
	uint8_t tx_result;
	
	uint32_t try=0;

	uart_puts("\r\n");
 15c:	64 ec       	ldi	r22, 0xC4	; 196
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
	
	uint8_t flag=0;
 166:	10 e0       	ldi	r17, 0x00	; 0
		
	nrf24_config(tx_addr,rx_addr);
	
	uint8_t tx_result;
	
	uint32_t try=0;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	dc 01       	movw	r26, r24

	uart_puts("\r\n");
	
	uint8_t flag=0;
	
    while(try++ < 100)
 16e:	14 c0       	rjmp	.+40     	; 0x198 <main+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f e3       	ldi	r18, 0x3F	; 63
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x9a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xa4>
 180:	00 00       	nop
    {
		_delay_ms(1000);
		nrf24_sendData(command, sizeof(command));
 182:	67 e0       	ldi	r22, 0x07	; 7
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	0e 94 7e 01 	call	0x2fc	; 0x2fc <nrf24_sendData>
		
		tx_result=nrf24_wait_tx_result();
 18c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <nrf24_wait_tx_result>
		if(tx_result != NRF24_MESSAGE_SENT)
 190:	81 11       	cpse	r24, r1
			flag=1;
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	d7 01       	movw	r26, r14
 196:	c6 01       	movw	r24, r12

	uart_puts("\r\n");
	
	uint8_t flag=0;
	
    while(try++ < 100)
 198:	6c 01       	movw	r12, r24
 19a:	7d 01       	movw	r14, r26
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	c2 1a       	sub	r12, r18
 1a0:	d2 0a       	sbc	r13, r18
 1a2:	e2 0a       	sbc	r14, r18
 1a4:	f2 0a       	sbc	r15, r18
 1a6:	84 36       	cpi	r24, 0x64	; 100
 1a8:	91 05       	cpc	r25, r1
 1aa:	a1 05       	cpc	r26, r1
 1ac:	b1 05       	cpc	r27, r1
 1ae:	00 f3       	brcs	.-64     	; 0x170 <main+0x94>
		
		tx_result=nrf24_wait_tx_result();
		if(tx_result != NRF24_MESSAGE_SENT)
			flag=1;
    }
	if(flag==1)
 1b0:	11 30       	cpi	r17, 0x01	; 1
 1b2:	31 f4       	brne	.+12     	; 0x1c0 <main+0xe4>
		uart_puts("\r\nfailed");
 1b4:	67 ec       	ldi	r22, 0xC7	; 199
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <main+0xee>
	else
		uart_puts("\r\nno fails");
 1c0:	60 ed       	ldi	r22, 0xD0	; 208
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_puts>
	
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	61 96       	adiw	r28, 0x11	; 17
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

00000450 <nrf24_ce_digitalWrite>:
	nrf24_csn_digitalWrite(HIGH);
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
 450:	88 23       	and	r24, r24
 452:	21 f0       	breq	.+8      	; 0x45c <nrf24_ce_digitalWrite+0xc>
		set_bit(NRF24_PORT,NRF24_CE);
 454:	85 b1       	in	r24, 0x05	; 5
 456:	81 60       	ori	r24, 0x01	; 1
 458:	85 b9       	out	0x05, r24	; 5
 45a:	08 95       	ret
	else
		clr_bit(NRF24_PORT,NRF24_CE);
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	85 b9       	out	0x05, r24	; 5
 462:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000464 <nrf24_csn_digitalWrite>:
}

void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 464:	88 23       	and	r24, r24
 466:	21 f0       	breq	.+8      	; 0x470 <nrf24_csn_digitalWrite+0xc>
		set_bit(NRF24_PORT, NRF24_CS);
 468:	85 b1       	in	r24, 0x05	; 5
 46a:	84 60       	ori	r24, 0x04	; 4
 46c:	85 b9       	out	0x05, r24	; 5
 46e:	08 95       	ret
	else
		clr_bit(NRF24_PORT, NRF24_CS);
 470:	85 b1       	in	r24, 0x05	; 5
 472:	8b 7f       	andi	r24, 0xFB	; 251
 474:	85 b9       	out	0x05, r24	; 5
 476:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

0000041c <nrf24_getStatus>:
		return NRF24_MESSAGE_LOST;
}

/* Get status register data */
uint8_t nrf24_getStatus()
{
 41c:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
	rv = spi_exchange(NOP);
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
 42a:	c8 2f       	mov	r28, r24
	nrf24_csn_digitalWrite(HIGH);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
	return rv;
}
 432:	8c 2f       	mov	r24, r28
 434:	cf 91       	pop	r28
 436:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

000003d2 <nrf24_configRegister>:
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* Write a single byte to register */
void nrf24_configRegister(uint8_t reg, uint8_t data)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	c8 2f       	mov	r28, r24
 3d8:	d6 2f       	mov	r29, r22
	nrf24_csn_digitalWrite(LOW);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
	spi_exchange(W_REGISTER | (REGISTER_MASK & reg));
 3e0:	8c 2f       	mov	r24, r28
 3e2:	8f 71       	andi	r24, 0x1F	; 31
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
	spi_exchange(data);
 3ea:	8d 2f       	mov	r24, r29
 3ec:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
	nrf24_csn_digitalWrite(HIGH);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

Disassembly of section .text.nrf24_powerUpTx:

00000478 <nrf24_powerUpTx>:

/* Set chip as receiver */
void nrf24_powerUpTx()
{
	/* Reset Status register */
	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
 478:	60 e7       	ldi	r22, 0x70	; 112
 47a:	87 e0       	ldi	r24, 0x07	; 7
 47c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>

	/* Config RF24 as Transmitter */
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 480:	6a e0       	ldi	r22, 0x0A	; 10
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 488:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

00000376 <nrf24_powerUpRx>:

/* Set chip as emitter */
void nrf24_powerUpRx()
{
	/* Flush FIFO */
	nrf24_csn_digitalWrite(LOW);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
	spi_exchange(FLUSH_RX);
 37c:	82 ee       	ldi	r24, 0xE2	; 226
 37e:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
	nrf24_csn_digitalWrite(HIGH);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>

	/* Reset Status register */
	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
 388:	60 e7       	ldi	r22, 0x70	; 112
 38a:	87 e0       	ldi	r24, 0x07	; 7
 38c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>

	/* Config RF24 as Emitter */
	nrf24_ce_digitalWrite(LOW); 
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
 396:	6b e0       	ldi	r22, 0x0B	; 11
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
	nrf24_ce_digitalWrite(HIGH);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_ce_digitalWrite>
 3a4:	08 95       	ret

Disassembly of section .text.nrf24_wait_tx_result:

000002b6 <nrf24_wait_tx_result>:
{
	/* Disable chip */
	nrf24_ce_digitalWrite(LOW);
	
	/* Still set base config even in idle */
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	0e 94 0e 02 	call	0x41c	; 0x41c <nrf24_getStatus>
 2c0:	c0 e1       	ldi	r28, 0x10	; 16
 2c2:	d7 e2       	ldi	r29, 0x27	; 39
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <nrf24_wait_tx_result+0x1c>
 2c6:	0e 94 0e 02 	call	0x41c	; 0x41c <nrf24_getStatus>
 2ca:	95 e3       	ldi	r25, 0x35	; 53
 2cc:	9a 95       	dec	r25
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <nrf24_wait_tx_result+0x16>
 2d0:	00 00       	nop
 2d2:	18 2f       	mov	r17, r24
 2d4:	10 72       	andi	r17, 0x20	; 32
 2d6:	85 ff       	sbrs	r24, 5
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <nrf24_wait_tx_result+0x28>
 2da:	80 ff       	sbrs	r24, 0
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <nrf24_wait_tx_result+0x30>
 2de:	84 fd       	sbrc	r24, 4
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <nrf24_wait_tx_result+0x30>
 2e2:	21 97       	sbiw	r28, 0x01	; 1
 2e4:	81 f7       	brne	.-32     	; 0x2c6 <nrf24_wait_tx_result+0x10>
 2e6:	0e 94 bb 01 	call	0x376	; 0x376 <nrf24_powerUpRx>
 2ea:	11 23       	and	r17, r17
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <nrf24_wait_tx_result+0x3c>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <nrf24_wait_tx_result+0x3e>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

Disassembly of section .text.nrf24_sendData:

000002fc <nrf24_sendData>:
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
 304:	16 2f       	mov	r17, r22
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_ce_digitalWrite>
 30c:	0e 94 3c 02 	call	0x478	; 0x478 <nrf24_powerUpTx>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
 316:	80 ea       	ldi	r24, 0xA0	; 160
 318:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
 31c:	41 2f       	mov	r20, r17
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	ce 01       	movw	r24, r28
 324:	0e 94 35 01 	call	0x26a	; 0x26a <spi_exchange_n>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_ce_digitalWrite>
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	08 95       	ret

Disassembly of section .text.nrf24_writeRegister:

0000033c <nrf24_writeRegister>:
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	c8 2f       	mov	r28, r24
 346:	8b 01       	movw	r16, r22
 348:	d4 2f       	mov	r29, r20
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
 350:	8c 2f       	mov	r24, r28
 352:	8f 71       	andi	r24, 0x1F	; 31
 354:	80 62       	ori	r24, 0x20	; 32
 356:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
 35a:	4d 2f       	mov	r20, r29
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	c8 01       	movw	r24, r16
 362:	0e 94 35 01 	call	0x26a	; 0x26a <spi_exchange_n>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

0000048a <nrf24_rx_address>:
}

/* Set the RX address */
void nrf24_rx_address(uint8_t* adr)
{
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_WIDTH);
 48a:	43 e0       	ldi	r20, 0x03	; 3
 48c:	bc 01       	movw	r22, r24
 48e:	8b e0       	ldi	r24, 0x0B	; 11
 490:	0e 94 9e 01 	call	0x33c	; 0x33c <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_ce_digitalWrite>
 49a:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

000003fc <nrf24_tx_address>:
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_WIDTH);
 402:	43 e0       	ldi	r20, 0x03	; 3
 404:	bc 01       	movw	r22, r24
 406:	8a e0       	ldi	r24, 0x0A	; 10
 408:	0e 94 9e 01 	call	0x33c	; 0x33c <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_WIDTH);
 40c:	43 e0       	ldi	r20, 0x03	; 3
 40e:	be 01       	movw	r22, r28
 410:	80 e1       	ldi	r24, 0x10	; 16
 412:	0e 94 9e 01 	call	0x33c	; 0x33c <nrf24_writeRegister>
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

Disassembly of section .text.nrf24_config:

000001ea <nrf24_config>:
{
	/* Disable chip */
	nrf24_ce_digitalWrite(LOW);
	
	/* Still set base config even in idle */
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	8c 01       	movw	r16, r24
 1f4:	eb 01       	movw	r28, r22
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	85 60       	ori	r24, 0x05	; 5
 1fa:	84 b9       	out	0x04, r24	; 4
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 204:	c8 01       	movw	r24, r16
 206:	0e 94 fe 01 	call	0x3fc	; 0x3fc <nrf24_tx_address>
 20a:	ce 01       	movw	r24, r28
 20c:	0e 94 45 02 	call	0x48a	; 0x48a <nrf24_rx_address>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_ce_digitalWrite>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_csn_digitalWrite>
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 224:	63 e0       	ldi	r22, 0x03	; 3
 226:	8c e1       	ldi	r24, 0x1C	; 28
 228:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	8d e1       	ldi	r24, 0x1D	; 29
 230:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 234:	6e e0       	ldi	r22, 0x0E	; 14
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 23c:	68 e0       	ldi	r22, 0x08	; 8
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 244:	63 e0       	ldi	r22, 0x03	; 3
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 24c:	63 e0       	ldi	r22, 0x03	; 3
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 254:	6f e7       	ldi	r22, 0x7F	; 127
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nrf24_configRegister>
 25c:	0e 94 bb 01 	call	0x376	; 0x376 <nrf24_powerUpRx>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

Disassembly of section .text.spi_exchange:

000004aa <spi_exchange>:
#include "spi.h"

/* Send one byte over SPI */
uint8_t spi_exchange(uint8_t data) {

    SPDR = data;
 4aa:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 4ac:	0d b4       	in	r0, 0x2d	; 45
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <spi_exchange+0x2>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 4b2:	8e b5       	in	r24, 0x2e	; 46
}
 4b4:	08 95       	ret

Disassembly of section .text.spi_exchange_n:

0000026a <spi_exchange_n>:

/* Send and receive multiple bytes over SPI */
void spi_exchange_n(uint8_t* dataout,uint8_t* datain,uint8_t len) {
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	7c 01       	movw	r14, r24
 27c:	6b 01       	movw	r12, r22
 27e:	d4 2f       	mov	r29, r20
	for(uint8_t i=0; i<len; i++)
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <spi_exchange_n+0x36>
	{
		datain[i] = spi_exchange(dataout[i]);
 284:	8c 2f       	mov	r24, r28
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	86 01       	movw	r16, r12
 28a:	08 0f       	add	r16, r24
 28c:	19 1f       	adc	r17, r25
 28e:	f7 01       	movw	r30, r14
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	80 81       	ld	r24, Z
 296:	0e 94 55 02 	call	0x4aa	; 0x4aa <spi_exchange>
 29a:	f8 01       	movw	r30, r16
 29c:	80 83       	st	Z, r24
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
}

/* Send and receive multiple bytes over SPI */
void spi_exchange_n(uint8_t* dataout,uint8_t* datain,uint8_t len) {
	for(uint8_t i=0; i<len; i++)
 29e:	cf 5f       	subi	r28, 0xFF	; 255
 2a0:	cd 17       	cp	r28, r29
 2a2:	80 f3       	brcs	.-32     	; 0x284 <spi_exchange_n+0x1a>
	{
		datain[i] = spi_exchange(dataout[i]);
	}
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	08 95       	ret

Disassembly of section .text.spi_init:

000004b6 <spi_init>:

void spi_init(void) {
	SPI_DDR = SPI_DDR | _BV(SPI_SS_NRF24) |_BV(SPI_SS_POT) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 4b6:	84 b1       	in	r24, 0x04	; 4
 4b8:	8e 62       	ori	r24, 0x2E	; 46
 4ba:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | 0 | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 4bc:	80 e5       	ldi	r24, 0x50	; 80
 4be:	8c bd       	out	0x2c, r24	; 44
 4c0:	08 95       	ret

Disassembly of section .text.uart_init:

00000438 <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 438:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 43c:	87 e6       	ldi	r24, 0x67	; 103
 43e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 442:	86 e0       	ldi	r24, 0x06	; 6
 444:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 448:	88 e1       	ldi	r24, 0x18	; 24
 44a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 44e:	08 95       	ret

Disassembly of section .text.uart_putc:

0000049c <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 49c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4a0:	95 ff       	sbrs	r25, 5
 4a2:	fc cf       	rjmp	.-8      	; 0x49c <uart_putc>
	UDR0 = DataByte;
 4a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4a8:	08 95       	ret

Disassembly of section .text.uart_puts:

000003a6 <uart_puts>:
}

void uart_puts(const char *s )
{
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	6b 01       	movw	r12, r22
 3ae:	e8 2e       	mov	r14, r24
	while (*s)
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <uart_puts+0x18>
	uart_putc(*s++);
 3b2:	9f ef       	ldi	r25, 0xFF	; 255
 3b4:	c9 1a       	sub	r12, r25
 3b6:	d9 0a       	sbc	r13, r25
 3b8:	e9 0a       	sbc	r14, r25
 3ba:	0e 94 4e 02 	call	0x49c	; 0x49c <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 3be:	f6 01       	movw	r30, r12
 3c0:	84 91       	lpm	r24, Z
 3c2:	e7 fc       	sbrc	r14, 7
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f4 cf       	rjmp	.-24     	; 0x3b2 <uart_puts+0xc>
	uart_putc(*s++);

	}/* uart_puts */
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	08 95       	ret
