
vlp-firmware_atmel_s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000017aa  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000017aa  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c8b  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001089  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012b2  00000000  00000000  000067a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005fc  00000000  00000000  00007a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001155  00000000  00000000  000083e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00009536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000016a4  000016a4  00001798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009748  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.updateLED 0000004e  00000ec6  00000ec6  00000fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.getBit  00000042  00001102  00001102  000011f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.byteArrayToBits 00000072  00000d9c  00000d9c  00000e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.updateBitstream 0000004c  00000f14  00000f14  00001008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000055  000000da  000000da  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.checkRF 00000174  000005d8  000005d8  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.pos.2260 00000001  00800157  00800157  000017aa  2**0
                  ALLOC
 21 .bss.bit_count 00000001  00800158  00800158  000017aa  2**0
                  ALLOC
 22 .bss.byte_count 00000001  00800159  00800159  000017aa  2**0
                  ALLOC
 23 .bss.bitstream 00000028  0080010c  0080010c  000017aa  2**0
                  ALLOC
 24 .bss.bitstream_byte_array 00000007  0080013e  0080013e  000017aa  2**0
                  ALLOC
 25 .bss.ACK_Array 00000007  00800145  00800145  000017aa  2**0
                  ALLOC
 26 .bss.RX_command_array 00000007  0080014c  0080014c  000017aa  2**0
                  ALLOC
 27 .text.digitalPotWrite 000000ee  00000846  00000846  0000093a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.setLedID 00000006  00001674  00001674  00001768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.setLedState 00000006  0000167a  0000167a  0000176e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.setLedMode 00000006  00001680  00001680  00001774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.setLedIntensity 00000006  00001686  00001686  0000177a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.getLedFrequency 00000008  0000164c  0000164c  00001740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.setLedFrequency 00000008  00001654  00001654  00001748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.getLedDutyCycle 00000006  0000168c  0000168c  00001780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.setLedDutyCycle 00000006  00001692  00001692  00001786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.initLEDObject 0000003c  00001144  00001144  00001238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.setLEDPowerSwitchPin 00000014  00001582  00001582  00001676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.setLEDStatePin 00000014  00001596  00001596  0000168a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.setHWLEDIntensity 00000006  00001698  00001698  0000178c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.updateLEDHW 0000001e  0000151a  0000151a  0000160e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.setLEDIOpins 00000008  0000165c  0000165c  00001750  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.startupLED 00000048  00000f60  00000f60  00001054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_11 0000007c  00000c2e  00000c2e  00000d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__vector_12 00000020  000014da  000014da  000015ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .progmemx.data 0000001d  00000173  00000173  00000267  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .text.main    00000044  00001036  00001036  0000112a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.nrf24_transferSync 00000036  000012da  000012da  000013ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.nrf24_transmitSync 00000022  00001452  00001452  00001546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.nrf24_ce_digitalWrite 00000014  000015aa  000015aa  0000169e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.nrf24_csn_digitalWrite 00000014  000015be  000015be  000016b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.nrf24_getStatus 00000022  00001474  00001474  00001568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.nrf24_isSending 00000010  000015e4  000015e4  000016d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.nrf24_configRegister 00000036  00001310  00001310  00001404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.nrf24_powerUpTx 00000012  000015d2  000015d2  000016c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.nrf24_getData 0000003a  000011f8  000011f8  000012ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.nrf24_powerUpRx 00000038  00001232  00001232  00001326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .progmemx.data 00000044  0000012f  0000012f  00000223  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 58 .text.nrf24_config 0000008c  00000ba2  00000ba2  00000c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.nrf24_send 0000005a  00000e6c  00000e6c  00000f60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.nrf24_readRegister 0000003c  00001180  00001180  00001274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.nrf24_rxFifoEmpty 00000024  0000142e  0000142e  00001522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.nrf24_dataReady 0000001c  00001538  00001538  0000162c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.nrf24_writeRegister 0000003c  000011bc  000011bc  000012b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.nrf24_rx_address 00000022  00001496  00001496  0000158a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.nrf24_tx_address 00000020  000014fa  000014fa  000015ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.nrf24_init 00000038  0000126a  0000126a  0000135e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .data.nrf24_addr 0000000a  00800134  000016a8  0000179c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 68 .text.stopTimer 00000016  0000156c  0000156c  00001660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.setupTimer 000000fa  0000074c  0000074c  00000840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .data.compB   00000004  00800153  000016b2  000017a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 71 .text.uart_init 00000018  00001554  00001554  00001648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart_putc 0000000e  000015f4  000015f4  000016e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart_puts 0000002c  000013b2  000013b2  000014a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.avrlibc.fplib 0000000a  00001638  00001638  0000172c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.avrlibc.fplib 00000008  00001664  00001664  00001758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.avrlibc.fplib 000000de  00000934  00000934  00000a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.avrlibc.fplib 0000005e  00000e0e  00000e0e  00000f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.avrlibc.fplib 0000007a  00000caa  00000caa  00000d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.avrlibc.fplib 00000048  00000fa8  00000fa8  0000109c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.avrlibc.fplib 0000000c  0000162c  0000162c  00001720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.avrlibc.fplib 00000006  0000169e  0000169e  00001792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.avrlibc.fplib 0000000e  00001602  00001602  000016f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.avrlibc.fplib 0000000e  00001610  00001610  00001704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.avrlibc.fplib 00000022  000014b8  000014b8  000015ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.avrlibc.fplib 00000044  0000107a  0000107a  0000116e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.avrlibc.fplib 0000000e  0000161e  0000161e  00001712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.avrlibc.fplib 0000000a  00001642  00001642  00001736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.avrlibc.fplib 00000008  0000166c  0000166c  00001760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.avrlibc.fplib 000000d4  00000a12  00000a12  00000b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc.div 00000028  000013de  000013de  000014d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.libgcc.div 00000044  000010be  000010be  000011b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.libgcc.div 00000028  00001406  00001406  000014fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.avrlibc 00000046  00000ff0  00000ff0  000010e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.avrlibc 00000448  00000190  00000190  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.avrlibc 00000036  00001346  00001346  0000143a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.avrlibc 00000078  00000d24  00000d24  00000e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.avrlibc 000000bc  00000ae6  00000ae6  00000bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.libgcc.prologue 00000038  000012a2  000012a2  00001396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.libgcc.prologue 00000036  0000137c  0000137c  00001470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
   8:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
   c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  10:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  14:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  18:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  1c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  20:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  24:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  28:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  2c:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_11>
  30:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_12>
  34:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  38:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  3c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  40:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  44:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  48:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  4c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  50:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  54:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  58:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  5c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  60:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>
  64:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 34       	cpi	r16, 0x41	; 65
  6c:	80 01       	movw	r16, r0
  6e:	34 01       	movw	r6, r8
  70:	3e 00       	.word	0x003e	; ????
  72:	16 a8       	ldd	r1, Z+54	; 0x36
  74:	01 3e       	cpi	r16, 0xE1	; 225
  76:	01 53       	subi	r16, 0x31	; 49
  78:	80 01       	movw	r16, r0
  7a:	53 01       	movw	r10, r6
  7c:	57 00       	.word	0x0057	; ????
  7e:	16 b2       	in	r1, 0x16	; 22
  80:	01 57       	subi	r16, 0x71	; 113
  82:	01 5a       	subi	r16, 0xA1	; 161
  84:	80 00       	.word	0x0080	; ????

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	e8 e6       	ldi	r30, 0x68	; 104
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e5 38       	cpi	r30, 0x85	; 133
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 1b 08 	call	0x1036	; 0x1036 <main>
  d2:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

000016a4 <__bad_interrupt>:
    16a4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.updateLED:

00000ec6 <updateLED>:
    }
    byteArrayToBits(bitstream_byte_array, bit_count);
}

/* Updates the LED with the new params and does HW changes required */
void updateLED(led_t* ledp) {
 ec6:	0f 93       	push	r16
 ec8:	1f 93       	push	r17
 eca:	cf 93       	push	r28
 ecc:	df 93       	push	r29
 ece:	8c 01       	movw	r16, r24
    /* Update the LED parameters from received command */
    setLedState(ledp, RX_command_array[STATE]);
 ed0:	cc e4       	ldi	r28, 0x4C	; 76
 ed2:	d1 e0       	ldi	r29, 0x01	; 1
 ed4:	69 81       	ldd	r22, Y+1	; 0x01
 ed6:	0e 94 3d 0b 	call	0x167a	; 0x167a <setLedState>
    setLedMode(ledp, RX_command_array[MODE]);
 eda:	6a 81       	ldd	r22, Y+2	; 0x02
 edc:	c8 01       	movw	r24, r16
 ede:	0e 94 40 0b 	call	0x1680	; 0x1680 <setLedMode>
    setLedIntensity(ledp, RX_command_array[INTENSITY]);
 ee2:	6b 81       	ldd	r22, Y+3	; 0x03
 ee4:	c8 01       	movw	r24, r16
 ee6:	0e 94 43 0b 	call	0x1686	; 0x1686 <setLedIntensity>
    setLedFrequency(ledp, ((RX_command_array[FREQUENCY_HB] << 8) | RX_command_array[FREQUENCY_LB]));
 eea:	6d 81       	ldd	r22, Y+5	; 0x05
 eec:	70 e0       	ldi	r23, 0x00	; 0
 eee:	76 2f       	mov	r23, r22
 ef0:	66 27       	eor	r22, r22
 ef2:	8c 81       	ldd	r24, Y+4	; 0x04
 ef4:	68 2b       	or	r22, r24
 ef6:	c8 01       	movw	r24, r16
 ef8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <setLedFrequency>
    setLedDutyCycle(ledp, RX_command_array[DUTYCYCLE]);
 efc:	6e 81       	ldd	r22, Y+6	; 0x06
 efe:	c8 01       	movw	r24, r16
 f00:	0e 94 49 0b 	call	0x1692	; 0x1692 <setLedDutyCycle>
    updateLEDHW(ledp); /* Changes state pin, digpot position and timer behavior */
 f04:	c8 01       	movw	r24, r16
 f06:	0e 94 8d 0a 	call	0x151a	; 0x151a <updateLEDHW>
}
 f0a:	df 91       	pop	r29
 f0c:	cf 91       	pop	r28
 f0e:	1f 91       	pop	r17
 f10:	0f 91       	pop	r16
 f12:	08 95       	ret

Disassembly of section .text.getBit:

00001102 <getBit>:

/* Gets the next bit in the bitstream, according to the mode of operation*/
uint8_t getBit(led_t *ledp) {
    1102:	fc 01       	movw	r30, r24
    static uint8_t pos = 0;

    if (pos >= bit_count)
    1104:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <pos.2260>
    1108:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bit_count>
    110c:	98 17       	cp	r25, r24
    110e:	18 f0       	brcs	.+6      	; 0x1116 <getBit+0x14>
        pos = 0;
    1110:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <pos.2260>
    1114:	03 c0       	rjmp	.+6      	; 0x111c <getBit+0x1a>
    else
        pos++;
    1116:	9f 5f       	subi	r25, 0xFF	; 255
    1118:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <pos.2260>

    if (ledp->ledMode != LED_MODE_VPPM)
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	39 f0       	breq	.+14     	; 0x1130 <getBit+0x2e>
        return bitstream[pos];
    1122:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <pos.2260>
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	e4 5f       	subi	r30, 0xF4	; 244
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	80 81       	ld	r24, Z
    112e:	08 95       	ret
    else
        return !bitstream[pos]; /* In VPPM we want the bit to start at the oposite value and invert at OCR1B */
    1130:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <pos.2260>
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	e4 5f       	subi	r30, 0xF4	; 244
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	90 81       	ld	r25, Z
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	91 11       	cpse	r25, r1
    1140:	80 e0       	ldi	r24, 0x00	; 0
}
    1142:	08 95       	ret

Disassembly of section .text.byteArrayToBits:

00000d9c <byteArrayToBits>:


/* Transforms an array of bytes to an array of bits */
void byteArrayToBits(uint8_t byte_array[], uint8_t bitstreamSize) {
 d9c:	0f 93       	push	r16
 d9e:	1f 93       	push	r17
 da0:	cf 93       	push	r28
 da2:	df 93       	push	r29
 da4:	fc 01       	movw	r30, r24
 da6:	16 2f       	mov	r17, r22

    for (uint8_t index = 0; index < bitstreamSize; index++) {
 da8:	40 e0       	ldi	r20, 0x00	; 0
 daa:	2a c0       	rjmp	.+84     	; 0xe00 <byteArrayToBits+0x64>
        bitstream[index] = ((byte_array[index / 8] & (1 << (7 - (index % (7 + index / 8))))) >> (7 - (index % (7 + index / 8))));
 dac:	64 2f       	mov	r22, r20
 dae:	66 95       	lsr	r22
 db0:	66 95       	lsr	r22
 db2:	66 95       	lsr	r22
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	df 01       	movw	r26, r30
 db8:	a6 0f       	add	r26, r22
 dba:	b7 1f       	adc	r27, r23
 dbc:	0c 91       	ld	r16, X
 dbe:	c4 2f       	mov	r28, r20
 dc0:	d0 e0       	ldi	r29, 0x00	; 0
 dc2:	69 5f       	subi	r22, 0xF9	; 249
 dc4:	7f 4f       	sbci	r23, 0xFF	; 255
 dc6:	ce 01       	movw	r24, r28
 dc8:	0e 94 ef 09 	call	0x13de	; 0x13de <__divmodhi4>
 dcc:	67 e0       	ldi	r22, 0x07	; 7
 dce:	70 e0       	ldi	r23, 0x00	; 0
 dd0:	68 1b       	sub	r22, r24
 dd2:	79 0b       	sbc	r23, r25
 dd4:	21 e0       	ldi	r18, 0x01	; 1
 dd6:	30 e0       	ldi	r19, 0x00	; 0
 dd8:	c9 01       	movw	r24, r18
 dda:	06 2e       	mov	r0, r22
 ddc:	02 c0       	rjmp	.+4      	; 0xde2 <byteArrayToBits+0x46>
 dde:	88 0f       	add	r24, r24
 de0:	99 1f       	adc	r25, r25
 de2:	0a 94       	dec	r0
 de4:	e2 f7       	brpl	.-8      	; 0xdde <byteArrayToBits+0x42>
 de6:	20 2f       	mov	r18, r16
 de8:	30 e0       	ldi	r19, 0x00	; 0
 dea:	28 23       	and	r18, r24
 dec:	39 23       	and	r19, r25
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <byteArrayToBits+0x58>
 df0:	35 95       	asr	r19
 df2:	27 95       	ror	r18
 df4:	6a 95       	dec	r22
 df6:	e2 f7       	brpl	.-8      	; 0xdf0 <byteArrayToBits+0x54>
 df8:	c4 5f       	subi	r28, 0xF4	; 244
 dfa:	de 4f       	sbci	r29, 0xFE	; 254
 dfc:	28 83       	st	Y, r18


/* Transforms an array of bytes to an array of bits */
void byteArrayToBits(uint8_t byte_array[], uint8_t bitstreamSize) {

    for (uint8_t index = 0; index < bitstreamSize; index++) {
 dfe:	4f 5f       	subi	r20, 0xFF	; 255
 e00:	41 17       	cp	r20, r17
 e02:	a0 f2       	brcs	.-88     	; 0xdac <byteArrayToBits+0x10>
        bitstream[index] = ((byte_array[index / 8] & (1 << (7 - (index % (7 + index / 8))))) >> (7 - (index % (7 + index / 8))));
    }
}
 e04:	df 91       	pop	r29
 e06:	cf 91       	pop	r28
 e08:	1f 91       	pop	r17
 e0a:	0f 91       	pop	r16
 e0c:	08 95       	ret

Disassembly of section .text.updateBitstream:

00000f14 <updateBitstream>:
    sei();
}

/* Updates bitstream array with new data from RF */
void updateBitstream() {
    bit_count = RX_command_array[BIT_COUNT];
 f14:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <RX_command_array+0x2>
 f18:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <bit_count>
    byte_count = bit_count / 8;
 f1c:	86 2f       	mov	r24, r22
 f1e:	86 95       	lsr	r24
 f20:	86 95       	lsr	r24
 f22:	86 95       	lsr	r24
 f24:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <byte_count>
    if (bit_count % 8 != 0) byte_count += 1; /* Ceil */
 f28:	96 2f       	mov	r25, r22
 f2a:	97 70       	andi	r25, 0x07	; 7
 f2c:	19 f0       	breq	.+6      	; 0xf34 <updateBitstream+0x20>
 f2e:	8f 5f       	subi	r24, 0xFF	; 255
 f30:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <byte_count>
    }
    sei();
}

/* Updates bitstream array with new data from RF */
void updateBitstream() {
 f34:	20 e0       	ldi	r18, 0x00	; 0
 f36:	0b c0       	rjmp	.+22     	; 0xf4e <updateBitstream+0x3a>
    bit_count = RX_command_array[BIT_COUNT];
    byte_count = bit_count / 8;
    if (bit_count % 8 != 0) byte_count += 1; /* Ceil */

    for (uint8_t i = 0; i < byte_count; i++) {
        bitstream_byte_array[i] = RX_command_array[BITSTREAM + i];
 f38:	82 2f       	mov	r24, r18
 f3a:	90 e0       	ldi	r25, 0x00	; 0
 f3c:	fc 01       	movw	r30, r24
 f3e:	e1 5b       	subi	r30, 0xB1	; 177
 f40:	fe 4f       	sbci	r31, 0xFE	; 254
 f42:	30 81       	ld	r19, Z
 f44:	fc 01       	movw	r30, r24
 f46:	e2 5c       	subi	r30, 0xC2	; 194
 f48:	fe 4f       	sbci	r31, 0xFE	; 254
 f4a:	30 83       	st	Z, r19
void updateBitstream() {
    bit_count = RX_command_array[BIT_COUNT];
    byte_count = bit_count / 8;
    if (bit_count % 8 != 0) byte_count += 1; /* Ceil */

    for (uint8_t i = 0; i < byte_count; i++) {
 f4c:	2f 5f       	subi	r18, 0xFF	; 255
 f4e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <byte_count>
 f52:	28 17       	cp	r18, r24
 f54:	88 f3       	brcs	.-30     	; 0xf38 <updateBitstream+0x24>
        bitstream_byte_array[i] = RX_command_array[BITSTREAM + i];
    }
    byteArrayToBits(bitstream_byte_array, bit_count);
 f56:	8e e3       	ldi	r24, 0x3E	; 62
 f58:	91 e0       	ldi	r25, 0x01	; 1
 f5a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <byteArrayToBits>
 f5e:	08 95       	ret

Disassembly of section .text.checkRF:

000005d8 <checkRF>:
void updateLED(led_t* ledp);
void byteArrayToBits(uint8_t byte_array[], uint8_t bitstreamSize);
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize);

/* Checks the RF module for new data and processes it */
void checkRF(led_t* ledp) {
 5d8:	cf 92       	push	r12
 5da:	df 92       	push	r13
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	00 d0       	rcall	.+0      	; 0x5ea <checkRF+0x12>
 5ea:	00 d0       	rcall	.+0      	; 0x5ec <checkRF+0x14>
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	6c 01       	movw	r12, r24

    while (nrf24_dataReady() == 0); // Wait for message
 5f2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <nrf24_dataReady>
 5f6:	88 23       	and	r24, r24
 5f8:	e1 f3       	breq	.-8      	; 0x5f2 <checkRF+0x1a>
    cli();
 5fa:	f8 94       	cli

    nrf24_getData(RX_command_array); /* Store received bytes into temp array */
 5fc:	8c e4       	ldi	r24, 0x4C	; 76
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <nrf24_getData>
	
	uint8_t buf[4]={0};
 604:	19 82       	std	Y+1, r1	; 0x01
 606:	1a 82       	std	Y+2, r1	; 0x02
 608:	1b 82       	std	Y+3, r1	; 0x03
 60a:	1c 82       	std	Y+4, r1	; 0x04
	uart_puts("\r\n");
 60c:	6a ed       	ldi	r22, 0xDA	; 218
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
	uart_puts("\r\nData Received.\r\n");
 616:	6d ed       	ldi	r22, 0xDD	; 221
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
	for (uint8_t i=0; i<COMMAND_LENGTH; i++)
 620:	f1 2c       	mov	r15, r1
 622:	1e c0       	rjmp	.+60     	; 0x660 <checkRF+0x88>
	{
		sprintf(buf, "%d, ", RX_command_array[i]);
 624:	ef 2d       	mov	r30, r15
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e4 5b       	subi	r30, 0xB4	; 180
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 62c:	80 81       	ld	r24, Z
 62e:	1f 92       	push	r1
 630:	8f 93       	push	r24
 632:	80 ef       	ldi	r24, 0xF0	; 240
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	a0 e0       	ldi	r26, 0x00	; 0
 638:	af 93       	push	r26
 63a:	9f 93       	push	r25
 63c:	8f 93       	push	r24
 63e:	8e 01       	movw	r16, r28
 640:	0f 5f       	subi	r16, 0xFF	; 255
 642:	1f 4f       	sbci	r17, 0xFF	; 255
 644:	1f 93       	push	r17
 646:	0f 93       	push	r16
 648:	0e 94 f8 07 	call	0xff0	; 0xff0 <sprintf>
		uart_puts(buf);
 64c:	b8 01       	movw	r22, r16
 64e:	80 e8       	ldi	r24, 0x80	; 128
 650:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
    nrf24_getData(RX_command_array); /* Store received bytes into temp array */
	
	uint8_t buf[4]={0};
	uart_puts("\r\n");
	uart_puts("\r\nData Received.\r\n");
	for (uint8_t i=0; i<COMMAND_LENGTH; i++)
 654:	f3 94       	inc	r15
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	96 e0       	ldi	r25, 0x06	; 6
 662:	9f 15       	cp	r25, r15
 664:	f8 f6       	brcc	.-66     	; 0x624 <checkRF+0x4c>
	{
		sprintf(buf, "%d, ", RX_command_array[i]);
		uart_puts(buf);
	}
	uart_puts("\r\n");
 666:	6a ed       	ldi	r22, 0xDA	; 218
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
	
	uart_puts("\r\nSending Ack");
 670:	65 ef       	ldi	r22, 0xF5	; 245
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
	memset(ACK_Array, '\0', COMMAND_LENGTH);
 67a:	e5 e4       	ldi	r30, 0x45	; 69
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	87 e0       	ldi	r24, 0x07	; 7
 680:	df 01       	movw	r26, r30
 682:	1d 92       	st	X+, r1
 684:	8a 95       	dec	r24
 686:	e9 f7       	brne	.-6      	; 0x682 <checkRF+0xaa>
	ACK_Array[0]=RX_command_array[ID];
 688:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <RX_command_array>
 68c:	80 83       	st	Z, r24
	ACK_Array[1]='A';
 68e:	81 e4       	ldi	r24, 0x41	; 65
 690:	81 83       	std	Z+1, r24	; 0x01
	
	for(uint16_t i=0; i<65534; i++)
 692:	00 e0       	ldi	r16, 0x00	; 0
 694:	10 e0       	ldi	r17, 0x00	; 0
 696:	0a c0       	rjmp	.+20     	; 0x6ac <checkRF+0xd4>
	{
		nrf24_send(ACK_Array);
 698:	85 e4       	ldi	r24, 0x45	; 69
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	0e 94 36 07 	call	0xe6c	; 0xe6c <nrf24_send>
		while(nrf24_isSending());
 6a0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <nrf24_isSending>
 6a4:	81 11       	cpse	r24, r1
 6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <checkRF+0xc8>
	uart_puts("\r\nSending Ack");
	memset(ACK_Array, '\0', COMMAND_LENGTH);
	ACK_Array[0]=RX_command_array[ID];
	ACK_Array[1]='A';
	
	for(uint16_t i=0; i<65534; i++)
 6a8:	0f 5f       	subi	r16, 0xFF	; 255
 6aa:	1f 4f       	sbci	r17, 0xFF	; 255
 6ac:	0e 3f       	cpi	r16, 0xFE	; 254
 6ae:	bf ef       	ldi	r27, 0xFF	; 255
 6b0:	1b 07       	cpc	r17, r27
 6b2:	90 f3       	brcs	.-28     	; 0x698 <checkRF+0xc0>
		nrf24_send(ACK_Array);
		while(nrf24_isSending());
	}
	
    /* Evaluate data*/
    if (RX_command_array[ID] == ledp->ledID) {
 6b4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <RX_command_array>
 6b8:	f6 01       	movw	r30, r12
 6ba:	80 81       	ld	r24, Z
 6bc:	98 13       	cpse	r25, r24
 6be:	38 c0       	rjmp	.+112    	; 0x730 <checkRF+0x158>
        if (RX_command_array[IDENTIFIER] != 0xFF) /* Command received */ {
 6c0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <RX_command_array+0x1>
 6c4:	8f 3f       	cpi	r24, 0xFF	; 255
 6c6:	49 f0       	breq	.+18     	; 0x6da <checkRF+0x102>
            updateLED(ledp); /* Update LED*/
 6c8:	c6 01       	movw	r24, r12
 6ca:	0e 94 63 07 	call	0xec6	; 0xec6 <updateLED>
			uart_puts("\r\nCommand received.");
 6ce:	63 e0       	ldi	r22, 0x03	; 3
 6d0:	71 e0       	ldi	r23, 0x01	; 1
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
 6d8:	2b c0       	rjmp	.+86     	; 0x730 <checkRF+0x158>
        }
        else /* Bitstream received */ {
            updateBitstream();
 6da:	0e 94 8a 07 	call	0xf14	; 0xf14 <updateBitstream>
			uart_puts("\r\nBitstream received.\r\n");
 6de:	67 e1       	ldi	r22, 0x17	; 23
 6e0:	71 e0       	ldi	r23, 0x01	; 1
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
			for(uint8_t i=0; i<bit_count; i++)
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	1e c0       	rjmp	.+60     	; 0x728 <checkRF+0x150>
			{
				sprintf(buf, "%d, ", bitstream[i]);
 6ec:	e1 2f       	mov	r30, r17
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	e4 5f       	subi	r30, 0xF4	; 244
 6f2:	fe 4f       	sbci	r31, 0xFE	; 254
 6f4:	80 81       	ld	r24, Z
 6f6:	1f 92       	push	r1
 6f8:	8f 93       	push	r24
 6fa:	80 ef       	ldi	r24, 0xF0	; 240
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	a0 e0       	ldi	r26, 0x00	; 0
 700:	af 93       	push	r26
 702:	9f 93       	push	r25
 704:	8f 93       	push	r24
 706:	ce 01       	movw	r24, r28
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	7c 01       	movw	r14, r24
 70c:	9f 93       	push	r25
 70e:	8f 93       	push	r24
 710:	0e 94 f8 07 	call	0xff0	; 0xff0 <sprintf>
				uart_puts(buf);
 714:	b7 01       	movw	r22, r14
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
			uart_puts("\r\nCommand received.");
        }
        else /* Bitstream received */ {
            updateBitstream();
			uart_puts("\r\nBitstream received.\r\n");
			for(uint8_t i=0; i<bit_count; i++)
 71c:	1f 5f       	subi	r17, 0xFF	; 255
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	f8 94       	cli
 722:	de bf       	out	0x3e, r29	; 62
 724:	0f be       	out	0x3f, r0	; 63
 726:	cd bf       	out	0x3d, r28	; 61
 728:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bit_count>
 72c:	18 17       	cp	r17, r24
 72e:	f0 f2       	brcs	.-68     	; 0x6ec <checkRF+0x114>
				sprintf(buf, "%d, ", bitstream[i]);
				uart_puts(buf);
			}
        }
    }
    sei();
 730:	78 94       	sei
}
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	ff 90       	pop	r15
 744:	ef 90       	pop	r14
 746:	df 90       	pop	r13
 748:	cf 90       	pop	r12
 74a:	08 95       	ret

Disassembly of section .text.digitalPotWrite:

00000846 <digitalPotWrite>:

#include "digPot.h"
#include "config.h"
#include "spi.h"

void digitalPotWrite(uint8_t LedIntensity) {
 846:	cf 92       	push	r12
 848:	df 92       	push	r13
 84a:	ef 92       	push	r14
 84c:	ff 92       	push	r15
    float V_WB = LedIntensity * 0.01 * POT_MAX_CURRENT*V_A;
 84e:	68 2f       	mov	r22, r24
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 57 06 	call	0xcae	; 0xcae <__floatsisf>
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	37 ed       	ldi	r19, 0xD7	; 215
 85e:	43 e2       	ldi	r20, 0x23	; 35
 860:	5c e3       	ldi	r21, 0x3C	; 60
 862:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
 866:	24 e1       	ldi	r18, 0x14	; 20
 868:	3e ea       	ldi	r19, 0xAE	; 174
 86a:	47 e0       	ldi	r20, 0x07	; 7
 86c:	5f e3       	ldi	r21, 0x3F	; 63
 86e:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
 872:	20 e0       	ldi	r18, 0x00	; 0
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	40 e2       	ldi	r20, 0x20	; 32
 878:	50 e4       	ldi	r21, 0x40	; 64
 87a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>

    float R_WB = ((V_WB - V_B) / (V_A - V_B)) * R_AB; /*Resistance WB for desired Voltage*/
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	40 e2       	ldi	r20, 0x20	; 32
 884:	50 e4       	ldi	r21, 0x40	; 64
 886:	0e 94 32 0b 	call	0x1664	; 0x1664 <__divsf3>
 88a:	20 e0       	ldi	r18, 0x00	; 0
 88c:	30 e4       	ldi	r19, 0x40	; 64
 88e:	4c e9       	ldi	r20, 0x9C	; 156
 890:	55 e4       	ldi	r21, 0x45	; 69
 892:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    float D = ((R_WB) / R_AB)*(MAX_D + 1); /* Equivalent D for desired voltage V_WB*/
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	30 e4       	ldi	r19, 0x40	; 64
 89a:	4c e9       	ldi	r20, 0x9C	; 156
 89c:	55 e4       	ldi	r21, 0x45	; 69
 89e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__divsf3>
 8a2:	20 e0       	ldi	r18, 0x00	; 0
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	40 e8       	ldi	r20, 0x80	; 128
 8a8:	53 e4       	ldi	r21, 0x43	; 67
 8aa:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
 8ae:	6b 01       	movw	r12, r22
 8b0:	7c 01       	movw	r14, r24

    if (D < 0) D = 0;
 8b2:	20 e0       	ldi	r18, 0x00	; 0
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	a9 01       	movw	r20, r18
 8b8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__cmpsf2>
 8bc:	88 23       	and	r24, r24
 8be:	5c f0       	brlt	.+22     	; 0x8d6 <digitalPotWrite+0x90>
    else if (D > MAX_D) D = MAX_D;
 8c0:	20 e0       	ldi	r18, 0x00	; 0
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	4f e7       	ldi	r20, 0x7F	; 127
 8c6:	53 e4       	ldi	r21, 0x43	; 67
 8c8:	c7 01       	movw	r24, r14
 8ca:	b6 01       	movw	r22, r12
 8cc:	0e 94 21 0b 	call	0x1642	; 0x1642 <__gesf2>
 8d0:	18 16       	cp	r1, r24
 8d2:	2c f0       	brlt	.+10     	; 0x8de <digitalPotWrite+0x98>
 8d4:	0c c0       	rjmp	.+24     	; 0x8ee <digitalPotWrite+0xa8>
    float V_WB = LedIntensity * 0.01 * POT_MAX_CURRENT*V_A;

    float R_WB = ((V_WB - V_B) / (V_A - V_B)) * R_AB; /*Resistance WB for desired Voltage*/
    float D = ((R_WB) / R_AB)*(MAX_D + 1); /* Equivalent D for desired voltage V_WB*/

    if (D < 0) D = 0;
 8d6:	c1 2c       	mov	r12, r1
 8d8:	d1 2c       	mov	r13, r1
 8da:	76 01       	movw	r14, r12
 8dc:	08 c0       	rjmp	.+16     	; 0x8ee <digitalPotWrite+0xa8>
    else if (D > MAX_D) D = MAX_D;
 8de:	0f 2e       	mov	r0, r31
 8e0:	c1 2c       	mov	r12, r1
 8e2:	d1 2c       	mov	r13, r1
 8e4:	ff e7       	ldi	r31, 0x7F	; 127
 8e6:	ef 2e       	mov	r14, r31
 8e8:	f3 e4       	ldi	r31, 0x43	; 67
 8ea:	ff 2e       	mov	r15, r31
 8ec:	f0 2d       	mov	r31, r0

    /* Clear the SS bit to select the slave line */
    clr_bit(SPI_PORT, SPI_SS_DIGPOTSLAVE);
 8ee:	85 b1       	in	r24, 0x05	; 5
 8f0:	8d 7f       	andi	r24, 0xFD	; 253
 8f2:	85 b9       	out	0x05, r24	; 5

    for (int i = 0; i < 5; i++); //NOTE: WHY THE DELAY?
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <digitalPotWrite+0xb6>
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	85 30       	cpi	r24, 0x05	; 5
 8fe:	91 05       	cpc	r25, r1
 900:	e4 f3       	brlt	.-8      	; 0x8fa <digitalPotWrite+0xb4>
    //  send in the address and value via SPI:
    spi_exchange((uint8_t) D);
 902:	c7 01       	movw	r24, r14
 904:	b6 01       	movw	r22, r12
 906:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fixunssfsi>
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

inline static uint8_t spi_exchange(uint8_t data) {
	
	uint8_t spsr_dummy = SPSR; //Dummy-read to clear flags
 90a:	8d b5       	in	r24, 0x2d	; 45

    SPDR = data;
 90c:	6e bd       	out	0x2e, r22	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 90e:	0d b4       	in	r0, 0x2d	; 45
 910:	07 fe       	sbrs	r0, 7
 912:	fd cf       	rjmp	.-6      	; 0x90e <__stack+0xf>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 914:	8e b5       	in	r24, 0x2e	; 46
    for (int i = 0; i < 5; i++);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	01 c0       	rjmp	.+2      	; 0x91e <__stack+0x1f>
 91c:	01 96       	adiw	r24, 0x01	; 1
 91e:	85 30       	cpi	r24, 0x05	; 5
 920:	91 05       	cpc	r25, r1
 922:	e4 f3       	brlt	.-8      	; 0x91c <__stack+0x1d>
    /* Set the SS bit to deselect the slave line */
    set_bit(SPI_PORT, SPI_SS_DIGPOTSLAVE);
 924:	85 b1       	in	r24, 0x05	; 5
 926:	82 60       	ori	r24, 0x02	; 2
 928:	85 b9       	out	0x05, r24	; 5
}
 92a:	ff 90       	pop	r15
 92c:	ef 90       	pop	r14
 92e:	df 90       	pop	r13
 930:	cf 90       	pop	r12
 932:	08 95       	ret

Disassembly of section .text.setLedID:

00001674 <setLedID>:
    ledp->ledMode = ledMode;
}

uint8_t getLedIntensity(led_t *ledp) {
    return ledp->ledIntensity;
}
    1674:	fc 01       	movw	r30, r24
    1676:	60 83       	st	Z, r22
    1678:	08 95       	ret

Disassembly of section .text.setLedState:

0000167a <setLedState>:
    167a:	fc 01       	movw	r30, r24
    167c:	61 83       	std	Z+1, r22	; 0x01
    167e:	08 95       	ret

Disassembly of section .text.setLedMode:

00001680 <setLedMode>:
    1680:	fc 01       	movw	r30, r24
    1682:	62 83       	std	Z+2, r22	; 0x02
    1684:	08 95       	ret

Disassembly of section .text.setLedIntensity:

00001686 <setLedIntensity>:

void setLedIntensity(led_t *ledp, uint8_t ledIntensity) {
    ledp->ledIntensity = ledIntensity;
    1686:	fc 01       	movw	r30, r24
    1688:	63 83       	std	Z+3, r22	; 0x03
    168a:	08 95       	ret

Disassembly of section .text.getLedFrequency:

0000164c <getLedFrequency>:
    ledp->ledMode = ledMode;
}

uint8_t getLedIntensity(led_t *ledp) {
    return ledp->ledIntensity;
}
    164c:	fc 01       	movw	r30, r24
    164e:	84 81       	ldd	r24, Z+4	; 0x04
    1650:	95 81       	ldd	r25, Z+5	; 0x05
    1652:	08 95       	ret

Disassembly of section .text.setLedFrequency:

00001654 <setLedFrequency>:
    1654:	fc 01       	movw	r30, r24
    1656:	75 83       	std	Z+5, r23	; 0x05
    1658:	64 83       	std	Z+4, r22	; 0x04
    165a:	08 95       	ret

Disassembly of section .text.getLedDutyCycle:

0000168c <getLedDutyCycle>:
    ledp->ledFrequency = ledFrequency;
}

uint8_t getLedDutyCycle(led_t *ledp) {
    return ledp->ledDutyCycle;
}
    168c:	fc 01       	movw	r30, r24
    168e:	86 81       	ldd	r24, Z+6	; 0x06
    1690:	08 95       	ret

Disassembly of section .text.setLedDutyCycle:

00001692 <setLedDutyCycle>:

void setLedDutyCycle(led_t *ledp, uint8_t ledDutyCycle) {
    ledp->ledDutyCycle = ledDutyCycle;
    1692:	fc 01       	movw	r30, r24
    1694:	66 83       	std	Z+6, r22	; 0x06
    1696:	08 95       	ret

Disassembly of section .text.initLEDObject:

00001144 <initLEDObject>:
    ledp->ledMode = ledMode;
}

uint8_t getLedIntensity(led_t *ledp) {
    return ledp->ledIntensity;
}
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <setLedID>
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 3d 0b 	call	0x167a	; 0x167a <setLedState>
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 40 0b 	call	0x1680	; 0x1680 <setLedMode>
    1160:	6a e0       	ldi	r22, 0x0A	; 10
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 43 0b 	call	0x1686	; 0x1686 <setLedIntensity>
    1168:	60 e1       	ldi	r22, 0x10	; 16
    116a:	77 e2       	ldi	r23, 0x27	; 39
    116c:	ce 01       	movw	r24, r28
    116e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <setLedFrequency>
    1172:	62 e3       	ldi	r22, 0x32	; 50
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 49 0b 	call	0x1692	; 0x1692 <setLedDutyCycle>
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

Disassembly of section .text.setLEDPowerSwitchPin:

00001582 <setLEDPowerSwitchPin>:
    setHWLEDIntensity(ledp->ledIntensity);
    setupTimer(ledp); /* Changes how the timer behaves, depends on mode*/
}

void setLEDPowerSwitchPin(uint8_t ledPower) {
    if (ledPower) {
    1582:	88 23       	and	r24, r24
    1584:	21 f0       	breq	.+8      	; 0x158e <setLEDPowerSwitchPin+0xc>
        set_bit(LED_PORT, LED_POWERSWITCH);
    1586:	8b b1       	in	r24, 0x0b	; 11
    1588:	80 68       	ori	r24, 0x80	; 128
    158a:	8b b9       	out	0x0b, r24	; 11
    158c:	08 95       	ret
    } else {
        clr_bit(LED_PORT, LED_POWERSWITCH);
    158e:	8b b1       	in	r24, 0x0b	; 11
    1590:	8f 77       	andi	r24, 0x7F	; 127
    1592:	8b b9       	out	0x0b, r24	; 11
    1594:	08 95       	ret

Disassembly of section .text.setLEDStatePin:

00001596 <setLEDStatePin>:
    }
}

void setLEDStatePin(uint8_t ledState) {
    if (ledState) {
    1596:	88 23       	and	r24, r24
    1598:	21 f0       	breq	.+8      	; 0x15a2 <setLEDStatePin+0xc>
        set_bit(LED_PORT, LED_CTL);
    159a:	8b b1       	in	r24, 0x0b	; 11
    159c:	80 64       	ori	r24, 0x40	; 64
    159e:	8b b9       	out	0x0b, r24	; 11
    15a0:	08 95       	ret
    } else {
        clr_bit(LED_PORT, LED_CTL);
    15a2:	8b b1       	in	r24, 0x0b	; 11
    15a4:	8f 7b       	andi	r24, 0xBF	; 191
    15a6:	8b b9       	out	0x0b, r24	; 11
    15a8:	08 95       	ret

Disassembly of section .text.setHWLEDIntensity:

00001698 <setHWLEDIntensity>:
    }
}

void setHWLEDIntensity(uint8_t ledIntensity) {
    digitalPotWrite(ledIntensity);
    1698:	0e 94 23 04 	call	0x846	; 0x846 <digitalPotWrite>
    169c:	08 95       	ret

Disassembly of section .text.updateLEDHW:

0000151a <updateLEDHW>:
        setHWLEDIntensity(intensity);
    }
}

/* Hardware update of LED */
void updateLEDHW(led_t* ledp) {
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    setLEDStatePin(ledp->ledState);
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	0e 94 cb 0a 	call	0x1596	; 0x1596 <setLEDStatePin>
    setHWLEDIntensity(ledp->ledIntensity);
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	0e 94 4c 0b 	call	0x1698	; 0x1698 <setHWLEDIntensity>
    setupTimer(ledp); /* Changes how the timer behaves, depends on mode*/
    152c:	ce 01       	movw	r24, r28
    152e:	0e 94 a6 03 	call	0x74c	; 0x74c <setupTimer>
}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

Disassembly of section .text.setLEDIOpins:

0000165c <setLEDIOpins>:
void setHWLEDIntensity(uint8_t ledIntensity) {
    digitalPotWrite(ledIntensity);
}

void setLEDIOpins() {
    LED_DDR = LED_DDR | _BV(LED_POWERSWITCH) | _BV(LED_CTL);
    165c:	8a b1       	in	r24, 0x0a	; 10
    165e:	80 6c       	ori	r24, 0xC0	; 192
    1660:	8a b9       	out	0x0a, r24	; 10
    1662:	08 95       	ret

Disassembly of section .text.startupLED:

00000f60 <startupLED>:
void setLEDPowerSwitchPin(uint8_t ledPower);
void setLEDStatePin(uint8_t ledState);
void setHWLEDIntensity(uint8_t ledIntensity);

/* LED setup with default parameters */
void startupLED(led_t* ledp) {
 f60:	0f 93       	push	r16
 f62:	1f 93       	push	r17
 f64:	cf 93       	push	r28
 f66:	8c 01       	movw	r16, r24
    setLEDIOpins();
 f68:	0e 94 2e 0b 	call	0x165c	; 0x165c <setLEDIOpins>
	
	setHWLEDIntensity(0); /* Set Intensity to zero before switching on LED to avoid full brightness */
 f6c:	80 e0       	ldi	r24, 0x00	; 0
 f6e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <setHWLEDIntensity>
    setLEDPowerSwitchPin(LED_ON);
 f72:	81 e0       	ldi	r24, 0x01	; 1
 f74:	0e 94 c1 0a 	call	0x1582	; 0x1582 <setLEDPowerSwitchPin>
    setLEDStatePin(ledp->ledState);
 f78:	f8 01       	movw	r30, r16
 f7a:	81 81       	ldd	r24, Z+1	; 0x01
 f7c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <setLEDStatePin>

    /* Incremental increase in intensity to avoid burning people's eyes */
    for (uint8_t intensity = 0; intensity < ledp->ledIntensity; intensity++) {
 f80:	c0 e0       	ldi	r28, 0x00	; 0
 f82:	0a c0       	rjmp	.+20     	; 0xf98 <startupLED+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 f84:	8f e3       	ldi	r24, 0x3F	; 63
 f86:	9c e9       	ldi	r25, 0x9C	; 156
 f88:	01 97       	sbiw	r24, 0x01	; 1
 f8a:	f1 f7       	brne	.-4      	; 0xf88 <startupLED+0x28>
 f8c:	00 c0       	rjmp	.+0      	; 0xf8e <startupLED+0x2e>
 f8e:	00 00       	nop
        _delay_ms(10);
        setHWLEDIntensity(intensity);
 f90:	8c 2f       	mov	r24, r28
 f92:	0e 94 4c 0b 	call	0x1698	; 0x1698 <setHWLEDIntensity>
	setHWLEDIntensity(0); /* Set Intensity to zero before switching on LED to avoid full brightness */
    setLEDPowerSwitchPin(LED_ON);
    setLEDStatePin(ledp->ledState);

    /* Incremental increase in intensity to avoid burning people's eyes */
    for (uint8_t intensity = 0; intensity < ledp->ledIntensity; intensity++) {
 f96:	cf 5f       	subi	r28, 0xFF	; 255
 f98:	f8 01       	movw	r30, r16
 f9a:	83 81       	ldd	r24, Z+3	; 0x03
 f9c:	c8 17       	cp	r28, r24
 f9e:	90 f3       	brcs	.-28     	; 0xf84 <startupLED+0x24>
        _delay_ms(10);
        setHWLEDIntensity(intensity);
    }
}
 fa0:	cf 91       	pop	r28
 fa2:	1f 91       	pop	r17
 fa4:	0f 91       	pop	r16
 fa6:	08 95       	ret

Disassembly of section .text.__vector_11:

00000c2e <__vector_11>:
 * de cada bit. Em VPPM, esta também altera o valor do OCR1B conforme o duty cycle
 * A ISR COMPB muda o bit dentro do periodo OCR1A, de acordo com a codificação
 * VPPM.
 */
ISR(TIMER1_COMPA_vect) // Timer1 ISR COMPA
{
 c2e:	1f 92       	push	r1
 c30:	0f 92       	push	r0
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	0f 92       	push	r0
 c36:	11 24       	eor	r1, r1
 c38:	2f 93       	push	r18
 c3a:	3f 93       	push	r19
 c3c:	4f 93       	push	r20
 c3e:	5f 93       	push	r21
 c40:	6f 93       	push	r22
 c42:	7f 93       	push	r23
 c44:	8f 93       	push	r24
 c46:	9f 93       	push	r25
 c48:	af 93       	push	r26
 c4a:	bf 93       	push	r27
 c4c:	ef 93       	push	r30
 c4e:	ff 93       	push	r31
    uint8_t bit = getBit(&led); /* Get next bit in bitstream */
 c50:	80 e0       	ldi	r24, 0x00	; 0
 c52:	91 e0       	ldi	r25, 0x01	; 1
 c54:	0e 94 81 08 	call	0x1102	; 0x1102 <getBit>
	OCR1B = *compB[bit];
 c58:	e8 2f       	mov	r30, r24
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	ed 5a       	subi	r30, 0xAD	; 173
 c62:	fe 4f       	sbci	r31, 0xFE	; 254
 c64:	01 90       	ld	r0, Z+
 c66:	f0 81       	ld	r31, Z
 c68:	e0 2d       	mov	r30, r0
 c6a:	20 81       	ld	r18, Z
 c6c:	31 81       	ldd	r19, Z+1	; 0x01
 c6e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 c72:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	if (bit) {
 c76:	88 23       	and	r24, r24
 c78:	21 f0       	breq	.+8      	; 0xc82 <__vector_11+0x54>
        set_bit(LED_PORT, LED_CTL); /* Turn on */
 c7a:	8b b1       	in	r24, 0x0b	; 11
 c7c:	80 64       	ori	r24, 0x40	; 64
 c7e:	8b b9       	out	0x0b, r24	; 11
 c80:	03 c0       	rjmp	.+6      	; 0xc88 <__vector_11+0x5a>
	} else {
        clr_bit(LED_PORT, LED_CTL); /* Turn off */
 c82:	8b b1       	in	r24, 0x0b	; 11
 c84:	8f 7b       	andi	r24, 0xBF	; 191
 c86:	8b b9       	out	0x0b, r24	; 11
	}
}
 c88:	ff 91       	pop	r31
 c8a:	ef 91       	pop	r30
 c8c:	bf 91       	pop	r27
 c8e:	af 91       	pop	r26
 c90:	9f 91       	pop	r25
 c92:	8f 91       	pop	r24
 c94:	7f 91       	pop	r23
 c96:	6f 91       	pop	r22
 c98:	5f 91       	pop	r21
 c9a:	4f 91       	pop	r20
 c9c:	3f 91       	pop	r19
 c9e:	2f 91       	pop	r18
 ca0:	0f 90       	pop	r0
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	0f 90       	pop	r0
 ca6:	1f 90       	pop	r1
 ca8:	18 95       	reti

Disassembly of section .text.__vector_12:

000014da <__vector_12>:

/* If using VPPM, the bit inverts at OCR1B */
ISR(TIMER1_COMPB_vect) // Timer1 ISR COMPB
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	8f 93       	push	r24
    /* Invert state */
	if (!check_bit(LED_PORT, LED_CTL)) {
    14e6:	8b b1       	in	r24, 0x0b	; 11
        set_bit(LED_PORT, LED_CTL); /* Turn on */
	} else {
        clr_bit(LED_PORT, LED_CTL); /* Turn off */
    14e8:	8b b1       	in	r24, 0x0b	; 11
    14ea:	8f 7b       	andi	r24, 0xBF	; 191
    14ec:	8b b9       	out	0x0b, r24	; 11
	}
}
    14ee:	8f 91       	pop	r24
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

Disassembly of section .text.main:

00001036 <main>:

int main() {

    /* Initialize common modules */
	uart_init();
    1036:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_init>
	uart_puts("\n\x1b[2J\r"); //Clear screen
    103a:	63 e7       	ldi	r22, 0x73	; 115
    103c:	71 e0       	ldi	r23, 0x01	; 1
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
	uart_puts("\r\nInitializing SLAVE.");
    1044:	6a e7       	ldi	r22, 0x7A	; 122
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
}

inline static void spi_master_init(void) {
	SPI_DDR = SPI_DDR | _BV(SPI_SS_NRF24L01) |_BV(SPI_SS_DIGPOTSLAVE) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
    104e:	84 b1       	in	r24, 0x04	; 4
    1050:	8e 62       	ori	r24, 0x2E	; 46
    1052:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | 0 | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
    1054:	80 e5       	ldi	r24, 0x50	; 80
    1056:	8c bd       	out	0x2c, r24	; 44
	
	spi_master_init();
	nrf24_init();
    1058:	0e 94 35 09 	call	0x126a	; 0x126a <nrf24_init>
	nrf24_config(NRF24_CHANNEL,NRF24_PAYLENGTH);
    105c:	67 e0       	ldi	r22, 0x07	; 7
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	0e 94 d1 05 	call	0xba2	; 0xba2 <nrf24_config>
	
    initLEDObject(&led); /* Initialize LED object with default parameters */
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 a2 08 	call	0x1144	; 0x1144 <initLEDObject>
	startupLED(&led);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 b0 07 	call	0xf60	; 0xf60 <startupLED>
			
	while (1) {
		checkRF(); /* Checks for incoming messages and updates LED */
    1074:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <checkRF>
    1078:	fd cf       	rjmp	.-6      	; 0x1074 <main+0x3e>

Disassembly of section .text.nrf24_transferSync:

000012da <nrf24_transferSync>:
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(R_RX_PL_WID);
	status = spi_exchange(0x00);
	nrf24_csn_digitalWrite(HIGH);
	return status;
}
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	dc 01       	movw	r26, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	11 c0       	rjmp	.+34     	; 0x1306 <nrf24_transferSync+0x2c>
    12e4:	29 2f       	mov	r18, r25
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	fb 01       	movw	r30, r22
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	ed 01       	movw	r28, r26
    12f0:	c2 0f       	add	r28, r18
    12f2:	d3 1f       	adc	r29, r19
    12f4:	28 81       	ld	r18, Y
    12f6:	8d b5       	in	r24, 0x2d	; 45
    12f8:	2e bd       	out	0x2e, r18	; 46
    12fa:	0d b4       	in	r0, 0x2d	; 45
    12fc:	07 fe       	sbrs	r0, 7
    12fe:	fd cf       	rjmp	.-6      	; 0x12fa <nrf24_transferSync+0x20>
    1300:	2e b5       	in	r18, 0x2e	; 46
    1302:	20 83       	st	Z, r18
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	94 17       	cp	r25, r20
    1308:	68 f3       	brcs	.-38     	; 0x12e4 <nrf24_transferSync+0xa>
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

Disassembly of section .text.nrf24_transmitSync:

00001452 <nrf24_transmitSync>:
    1452:	ac 01       	movw	r20, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0b c0       	rjmp	.+22     	; 0x146e <nrf24_transmitSync+0x1c>
    1458:	fa 01       	movw	r30, r20
    145a:	e9 0f       	add	r30, r25
    145c:	f1 1d       	adc	r31, r1
    145e:	20 81       	ld	r18, Z
    1460:	8d b5       	in	r24, 0x2d	; 45
    1462:	2e bd       	out	0x2e, r18	; 46
    1464:	0d b4       	in	r0, 0x2d	; 45
    1466:	07 fe       	sbrs	r0, 7
    1468:	fd cf       	rjmp	.-6      	; 0x1464 <nrf24_transmitSync+0x12>
    146a:	8e b5       	in	r24, 0x2e	; 46
    146c:	9f 5f       	subi	r25, 0xFF	; 255
    146e:	96 17       	cp	r25, r22
    1470:	98 f3       	brcs	.-26     	; 0x1458 <nrf24_transmitSync+0x6>
    1472:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

000015aa <nrf24_ce_digitalWrite>:
	nrf24_csn_digitalWrite(HIGH);
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
    15aa:	88 23       	and	r24, r24
    15ac:	21 f0       	breq	.+8      	; 0x15b6 <nrf24_ce_digitalWrite+0xc>
	{
		set_bit(NRF24_PORT,NRF24_CE);
    15ae:	85 b1       	in	r24, 0x05	; 5
    15b0:	81 60       	ori	r24, 0x01	; 1
    15b2:	85 b9       	out	0x05, r24	; 5
    15b4:	08 95       	ret
	}
	else
	{
		clr_bit(NRF24_PORT,NRF24_CE);
    15b6:	85 b1       	in	r24, 0x05	; 5
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	85 b9       	out	0x05, r24	; 5
    15bc:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

000015be <nrf24_csn_digitalWrite>:

// MOVE THESE TO SPI FILE
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
    15be:	88 23       	and	r24, r24
    15c0:	21 f0       	breq	.+8      	; 0x15ca <nrf24_csn_digitalWrite+0xc>
	{
		set_bit(SPI_PORT,SPI_SS_NRF24L01);
    15c2:	85 b1       	in	r24, 0x05	; 5
    15c4:	84 60       	ori	r24, 0x04	; 4
    15c6:	85 b9       	out	0x05, r24	; 5
    15c8:	08 95       	ret
	}
	else
	{
		clr_bit(SPI_PORT,SPI_SS_NRF24L01);
    15ca:	85 b1       	in	r24, 0x05	; 5
    15cc:	8b 7f       	andi	r24, 0xFB	; 251
    15ce:	85 b9       	out	0x05, r24	; 5
    15d0:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00001474 <nrf24_getStatus>:
	return 1; /* true */

}

uint8_t nrf24_getStatus()
{
    1474:	cf 93       	push	r28
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

inline static uint8_t spi_exchange(uint8_t data) {
	
	uint8_t spsr_dummy = SPSR; //Dummy-read to clear flags
    147c:	8d b5       	in	r24, 0x2d	; 45

    SPDR = data;
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    1482:	0d b4       	in	r0, 0x2d	; 45
    1484:	07 fe       	sbrs	r0, 7
    1486:	fd cf       	rjmp	.-6      	; 0x1482 <nrf24_getStatus+0xe>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
    1488:	ce b5       	in	r28, 0x2e	; 46
	rv = spi_exchange(NOP);
	nrf24_csn_digitalWrite(HIGH);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
	return rv;
}
    1490:	8c 2f       	mov	r24, r28
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

Disassembly of section .text.nrf24_isSending:

000015e4 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
    15e4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <nrf24_getStatus>
	
	/* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
	if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    15e8:	80 73       	andi	r24, 0x30	; 48
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <nrf24_isSending+0xc>
	{
		return 0; /* false */
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	08 95       	ret
	}

	return 1; /* true */
    15f0:	81 e0       	ldi	r24, 0x01	; 1

}
    15f2:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

00001310 <nrf24_configRegister>:
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(R_RX_PL_WID);
	status = spi_exchange(0x00);
	nrf24_csn_digitalWrite(HIGH);
	return status;
}
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	c8 2f       	mov	r28, r24
    1316:	d6 2f       	mov	r29, r22
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    131e:	cf 71       	andi	r28, 0x1F	; 31
    1320:	c0 62       	ori	r28, 0x20	; 32
    1322:	8d b5       	in	r24, 0x2d	; 45
    1324:	ce bd       	out	0x2e, r28	; 46
    1326:	0d b4       	in	r0, 0x2d	; 45
    1328:	07 fe       	sbrs	r0, 7
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <nrf24_configRegister+0x16>
    132c:	8e b5       	in	r24, 0x2e	; 46
    132e:	8d b5       	in	r24, 0x2d	; 45
    1330:	de bd       	out	0x2e, r29	; 46
    1332:	0d b4       	in	r0, 0x2d	; 45
    1334:	07 fe       	sbrs	r0, 7
    1336:	fd cf       	rjmp	.-6      	; 0x1332 <nrf24_configRegister+0x22>
    1338:	8e b5       	in	r24, 0x2e	; 46
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

Disassembly of section .text.nrf24_powerUpTx:

000015d2 <nrf24_powerUpTx>:
	nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
    15d2:	60 e7       	ldi	r22, 0x70	; 112
    15d4:	87 e0       	ldi	r24, 0x07	; 7
    15d6:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>

	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
    15da:	6a e0       	ldi	r22, 0x0A	; 10
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
    15e2:	08 95       	ret

Disassembly of section .text.nrf24_getData:

000011f8 <nrf24_getData>:
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(R_RX_PL_WID);
	status = spi_exchange(0x00);
	nrf24_csn_digitalWrite(HIGH);
	return status;
}
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    1204:	8d b5       	in	r24, 0x2d	; 45
    1206:	81 e6       	ldi	r24, 0x61	; 97
    1208:	8e bd       	out	0x2e, r24	; 46
    120a:	0d b4       	in	r0, 0x2d	; 45
    120c:	07 fe       	sbrs	r0, 7
    120e:	fd cf       	rjmp	.-6      	; 0x120a <nrf24_getData+0x12>
    1210:	8e b5       	in	r24, 0x2e	; 46
    1212:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <payload_len>
    1216:	be 01       	movw	r22, r28
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 6d 09 	call	0x12da	; 0x12da <nrf24_transferSync>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    1224:	60 e4       	ldi	r22, 0x40	; 64
    1226:	87 e0       	ldi	r24, 0x07	; 7
    1228:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

00001232 <nrf24_powerUpRx>:
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    1238:	8d b5       	in	r24, 0x2d	; 45
    123a:	82 ee       	ldi	r24, 0xE2	; 226
    123c:	8e bd       	out	0x2e, r24	; 46
    123e:	0d b4       	in	r0, 0x2d	; 45
    1240:	07 fe       	sbrs	r0, 7
    1242:	fd cf       	rjmp	.-6      	; 0x123e <nrf24_powerUpRx+0xc>
    1244:	8e b5       	in	r24, 0x2e	; 46
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    124c:	60 e7       	ldi	r22, 0x70	; 112
    124e:	87 e0       	ldi	r24, 0x07	; 7
    1250:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
    125a:	6b e0       	ldi	r22, 0x0B	; 11
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
    1268:	08 95       	ret

Disassembly of section .text.nrf24_config:

00000ba2 <nrf24_config>:
 ba2:	cf 93       	push	r28
 ba4:	df 93       	push	r29
 ba6:	c8 2f       	mov	r28, r24
 ba8:	d6 2f       	mov	r29, r22
 baa:	6f e2       	ldi	r22, 0x2F	; 47
 bac:	71 e0       	ldi	r23, 0x01	; 1
 bae:	80 e0       	ldi	r24, 0x00	; 0
 bb0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
 bb4:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <payload_len>
 bb8:	6c 2f       	mov	r22, r28
 bba:	85 e0       	ldi	r24, 0x05	; 5
 bbc:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	81 e1       	ldi	r24, 0x11	; 17
 bc4:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bc8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <payload_len>
 bcc:	82 e1       	ldi	r24, 0x12	; 18
 bce:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	83 e1       	ldi	r24, 0x13	; 19
 bd6:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	84 e1       	ldi	r24, 0x14	; 20
 bde:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	85 e1       	ldi	r24, 0x15	; 21
 be6:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bea:	60 e0       	ldi	r22, 0x00	; 0
 bec:	86 e1       	ldi	r24, 0x16	; 22
 bee:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bf2:	6e e0       	ldi	r22, 0x0E	; 14
 bf4:	86 e0       	ldi	r24, 0x06	; 6
 bf6:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 bfa:	68 e0       	ldi	r22, 0x08	; 8
 bfc:	80 e0       	ldi	r24, 0x00	; 0
 bfe:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 c0a:	63 e0       	ldi	r22, 0x03	; 3
 c0c:	82 e0       	ldi	r24, 0x02	; 2
 c0e:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 c12:	60 e0       	ldi	r22, 0x00	; 0
 c14:	8c e1       	ldi	r24, 0x1C	; 28
 c16:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_configRegister>
 c1a:	0e 94 19 09 	call	0x1232	; 0x1232 <nrf24_powerUpRx>
 c1e:	6d e4       	ldi	r22, 0x4D	; 77
 c20:	71 e0       	ldi	r23, 0x01	; 1
 c22:	80 e0       	ldi	r24, 0x00	; 0
 c24:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	08 95       	ret

Disassembly of section .text.nrf24_send:

00000e6c <nrf24_send>:
 e6c:	cf 93       	push	r28
 e6e:	df 93       	push	r29
 e70:	ec 01       	movw	r28, r24
 e72:	80 e0       	ldi	r24, 0x00	; 0
 e74:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
 e78:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <nrf24_powerUpTx>
 e7c:	80 e0       	ldi	r24, 0x00	; 0
 e7e:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
 e82:	8d b5       	in	r24, 0x2d	; 45
 e84:	81 ee       	ldi	r24, 0xE1	; 225
 e86:	8e bd       	out	0x2e, r24	; 46
 e88:	0d b4       	in	r0, 0x2d	; 45
 e8a:	07 fe       	sbrs	r0, 7
 e8c:	fd cf       	rjmp	.-6      	; 0xe88 <nrf24_send+0x1c>
 e8e:	8e b5       	in	r24, 0x2e	; 46
 e90:	81 e0       	ldi	r24, 0x01	; 1
 e92:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
 e96:	80 e0       	ldi	r24, 0x00	; 0
 e98:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
 e9c:	8d b5       	in	r24, 0x2d	; 45
 e9e:	80 ea       	ldi	r24, 0xA0	; 160
 ea0:	8e bd       	out	0x2e, r24	; 46
 ea2:	0d b4       	in	r0, 0x2d	; 45
 ea4:	07 fe       	sbrs	r0, 7
 ea6:	fd cf       	rjmp	.-6      	; 0xea2 <nrf24_send+0x36>
 ea8:	8e b5       	in	r24, 0x2e	; 46
 eaa:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <payload_len>
 eae:	ce 01       	movw	r24, r28
 eb0:	0e 94 29 0a 	call	0x1452	; 0x1452 <nrf24_transmitSync>
 eb4:	81 e0       	ldi	r24, 0x01	; 1
 eb6:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
 eba:	81 e0       	ldi	r24, 0x01	; 1
 ebc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
 ec0:	df 91       	pop	r29
 ec2:	cf 91       	pop	r28
 ec4:	08 95       	ret

Disassembly of section .text.nrf24_readRegister:

00001180 <nrf24_readRegister>:
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	c8 2f       	mov	r28, r24
    118a:	8b 01       	movw	r16, r22
    118c:	d4 2f       	mov	r29, r20
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    1194:	cf 71       	andi	r28, 0x1F	; 31
    1196:	8d b5       	in	r24, 0x2d	; 45
    1198:	ce bd       	out	0x2e, r28	; 46
    119a:	0d b4       	in	r0, 0x2d	; 45
    119c:	07 fe       	sbrs	r0, 7
    119e:	fd cf       	rjmp	.-6      	; 0x119a <nrf24_readRegister+0x1a>
    11a0:	8e b5       	in	r24, 0x2e	; 46
    11a2:	4d 2f       	mov	r20, r29
    11a4:	b8 01       	movw	r22, r16
    11a6:	c8 01       	movw	r24, r16
    11a8:	0e 94 6d 09 	call	0x12da	; 0x12da <nrf24_transferSync>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

Disassembly of section .text.nrf24_rxFifoEmpty:

0000142e <nrf24_rxFifoEmpty>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	1f 92       	push	r1
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	be 01       	movw	r22, r28
    143c:	6f 5f       	subi	r22, 0xFF	; 255
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	87 e1       	ldi	r24, 0x17	; 23
    1442:	0e 94 c0 08 	call	0x1180	; 0x1180 <nrf24_readRegister>
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

Disassembly of section .text.nrf24_dataReady:

00001538 <nrf24_dataReady>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady()
{
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
    1538:	0e 94 3a 0a 	call	0x1474	; 0x1474 <nrf24_getStatus>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) )
    153c:	86 fd       	sbrc	r24, 6
    153e:	07 c0       	rjmp	.+14     	; 0x154e <nrf24_dataReady+0x16>
    {
	    return 1;
    }

    return !nrf24_rxFifoEmpty();
    1540:	0e 94 17 0a 	call	0x142e	; 0x142e <nrf24_rxFifoEmpty>
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	88 23       	and	r24, r24
    1548:	19 f0       	breq	.+6      	; 0x1550 <nrf24_dataReady+0x18>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <nrf24_dataReady+0x18>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) )
    {
	    return 1;
    154e:	91 e0       	ldi	r25, 0x01	; 1
    }

    return !nrf24_rxFifoEmpty();
}
    1550:	89 2f       	mov	r24, r25
    1552:	08 95       	ret

Disassembly of section .text.nrf24_writeRegister:

000011bc <nrf24_writeRegister>:
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(R_RX_PL_WID);
	status = spi_exchange(0x00);
	nrf24_csn_digitalWrite(HIGH);
	return status;
}
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	c8 2f       	mov	r28, r24
    11c6:	8b 01       	movw	r16, r22
    11c8:	d4 2f       	mov	r29, r20
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    11d0:	cf 71       	andi	r28, 0x1F	; 31
    11d2:	c0 62       	ori	r28, 0x20	; 32
    11d4:	8d b5       	in	r24, 0x2d	; 45
    11d6:	ce bd       	out	0x2e, r28	; 46
    11d8:	0d b4       	in	r0, 0x2d	; 45
    11da:	07 fe       	sbrs	r0, 7
    11dc:	fd cf       	rjmp	.-6      	; 0x11d8 <nrf24_writeRegister+0x1c>
    11de:	8e b5       	in	r24, 0x2e	; 46
    11e0:	6d 2f       	mov	r22, r29
    11e2:	c8 01       	movw	r24, r16
    11e4:	0e 94 29 0a 	call	0x1452	; 0x1452 <nrf24_transmitSync>
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

00001496 <nrf24_rx_address>:
	uart_puts(" Done!");
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	ec 01       	movw	r28, r24
	nrf24_ce_digitalWrite(LOW);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    14a2:	45 e0       	ldi	r20, 0x05	; 5
    14a4:	be 01       	movw	r22, r28
    14a6:	8b e0       	ldi	r24, 0x0B	; 11
    14a8:	0e 94 de 08 	call	0x11bc	; 0x11bc <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

000014fa <nrf24_tx_address>:
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    1500:	45 e0       	ldi	r20, 0x05	; 5
    1502:	bc 01       	movw	r22, r24
    1504:	8a e0       	ldi	r24, 0x0A	; 10
    1506:	0e 94 de 08 	call	0x11bc	; 0x11bc <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    150a:	45 e0       	ldi	r20, 0x05	; 5
    150c:	be 01       	movw	r22, r28
    150e:	80 e1       	ldi	r24, 0x10	; 16
    1510:	0e 94 de 08 	call	0x11bc	; 0x11bc <nrf24_writeRegister>
}
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

Disassembly of section .text.nrf24_init:

0000126a <nrf24_init>:
	nrf24_csn_digitalWrite(LOW);
	spi_exchange(R_RX_PL_WID);
	status = spi_exchange(0x00);
	nrf24_csn_digitalWrite(HIGH);
	return status;
}
    126a:	64 e5       	ldi	r22, 0x54	; 84
    126c:	71 e0       	ldi	r23, 0x01	; 1
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
    1274:	84 b1       	in	r24, 0x04	; 4
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	84 b9       	out	0x04, r24	; 4
    127a:	89 e3       	ldi	r24, 0x39	; 57
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <nrf24_tx_address>
    1282:	84 e3       	ldi	r24, 0x34	; 52
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 4b 0a 	call	0x1496	; 0x1496 <nrf24_rx_address>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_ce_digitalWrite>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	0e 94 df 0a 	call	0x15be	; 0x15be <nrf24_csn_digitalWrite>
    1296:	6d e4       	ldi	r22, 0x4D	; 77
    1298:	71 e0       	ldi	r23, 0x01	; 1
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <uart_puts>
    12a0:	08 95       	ret

Disassembly of section .text.stopTimer:

0000156c <stopTimer>:
    TCCR1B = (1 << WGM12) | (1 << CS10); /* "Clear Timer on Compare Match with OCR1A" and "Clock with no prescaling" */
    sei(); /* Enable global interrupts */
}

void stopTimer() {
    cli();
    156c:	f8 94       	cli
    TCCR1A = 0x00; /* Clear control registers */
    156e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0x00;
    1572:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCNT1 = 0; /* Clear timer counter */
    1576:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    157a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    sei();
    157e:	78 94       	sei
    1580:	08 95       	ret

Disassembly of section .text.setupTimer:

0000074c <setupTimer>:
/*
 * 
 */
void stopTimer();

void setupTimer(led_t *ledp) {
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
    cli(); /* Disable global interrupts */
 756:	f8 94       	cli

    TCCR1A = 0x00; /* COM1A1 | COM1A0 | COM1B1 | COM1B0 | - | - | WGM 11 | WGM10 */
 758:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0x00; /* ICNC1 | ICES1 | - | WGM13 | WGM12 | CS12 | CS 11 | CS 10   */
 75c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCNT1 = 0; /* Timer1 Counter */
 760:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 764:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

    uint16_t compA; /* Timer compare  */

    switch (ledp->ledMode) {
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	39 f0       	breq	.+14     	; 0x77c <setupTimer+0x30>
 76e:	18 f0       	brcs	.+6      	; 0x776 <setupTimer+0x2a>
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	d1 f0       	breq	.+52     	; 0x7a8 <setupTimer+0x5c>
 774:	5f c0       	rjmp	.+190    	; 0x834 <__DATA_REGION_LENGTH__+0x34>

        case LED_MODE_DC:
            stopTimer();
 776:	0e 94 b6 0a 	call	0x156c	; 0x156c <stopTimer>
            break;
 77a:	5c c0       	rjmp	.+184    	; 0x834 <__DATA_REGION_LENGTH__+0x34>

        case LED_MODE_ARBITRARY:
            compA = ((F_CPU / getLedFrequency(ledp)) - 1); /* Define o periodo de um bit */
 77c:	ce 01       	movw	r24, r28
 77e:	0e 94 26 0b 	call	0x164c	; 0x164c <getLedFrequency>
 782:	9c 01       	movw	r18, r24
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	74 e2       	ldi	r23, 0x24	; 36
 78c:	84 ef       	ldi	r24, 0xF4	; 244
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 5f 08 	call	0x10be	; 0x10be <__udivmodsi4>
 794:	21 50       	subi	r18, 0x01	; 1
 796:	31 09       	sbc	r19, r1
            OCR1A = compA; /* Timer1A compare register */
 798:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 79c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
            TIMSK1 = (1 << OCIE1A); /* Enable timer1A Interrupts*/
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            break;
 7a6:	46 c0       	rjmp	.+140    	; 0x834 <__DATA_REGION_LENGTH__+0x34>

        case LED_MODE_VPPM:
            compA = (F_CPU / getLedFrequency(ledp)) - 1; /* Define o periodo de um bit */
 7a8:	ce 01       	movw	r24, r28
 7aa:	0e 94 26 0b 	call	0x164c	; 0x164c <getLedFrequency>
 7ae:	9c 01       	movw	r18, r24
 7b0:	40 e0       	ldi	r20, 0x00	; 0
 7b2:	50 e0       	ldi	r21, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	74 e2       	ldi	r23, 0x24	; 36
 7b8:	84 ef       	ldi	r24, 0xF4	; 244
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 5f 08 	call	0x10be	; 0x10be <__udivmodsi4>
 7c0:	89 01       	movw	r16, r18
 7c2:	01 50       	subi	r16, 0x01	; 1
 7c4:	11 09       	sbc	r17, r1
            OCR1A = compA; /* Timer1A compare register */
 7c6:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7ca:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

            compB1_0 = (uint16_t) compA * (getLedDutyCycle(ledp) / LED_MAX_DUTYCYCLE);
 7ce:	ce 01       	movw	r24, r28
 7d0:	0e 94 46 0b 	call	0x168c	; 0x168c <getLedDutyCycle>
 7d4:	99 e2       	ldi	r25, 0x29	; 41
 7d6:	89 9f       	mul	r24, r25
 7d8:	81 2d       	mov	r24, r1
 7da:	11 24       	eor	r1, r1
 7dc:	82 95       	swap	r24
 7de:	8f 70       	andi	r24, 0x0F	; 15
 7e0:	80 9f       	mul	r24, r16
 7e2:	90 01       	movw	r18, r0
 7e4:	81 9f       	mul	r24, r17
 7e6:	30 0d       	add	r19, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <compB1_0+0x1>
 7ee:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <compB1_0>
            compB0_1 = (uint16_t) compA * ((LED_MAX_DUTYCYCLE - getLedDutyCycle(ledp)) / LED_MAX_DUTYCYCLE);
 7f2:	ce 01       	movw	r24, r28
 7f4:	0e 94 46 0b 	call	0x168c	; 0x168c <getLedDutyCycle>
 7f8:	64 e6       	ldi	r22, 0x64	; 100
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	9b 01       	movw	r18, r22
 7fe:	28 1b       	sub	r18, r24
 800:	31 09       	sbc	r19, r1
 802:	c9 01       	movw	r24, r18
 804:	0e 94 ef 09 	call	0x13de	; 0x13de <__divmodhi4>
 808:	60 9f       	mul	r22, r16
 80a:	c0 01       	movw	r24, r0
 80c:	61 9f       	mul	r22, r17
 80e:	90 0d       	add	r25, r0
 810:	70 9f       	mul	r23, r16
 812:	90 0d       	add	r25, r0
 814:	11 24       	eor	r1, r1
 816:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <compB0_1+0x1>
 81a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <compB0_1>
            OCR1B = compB0_1; /* First interrupt will be useless, so any value is ok */
 81e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <compB0_1>
 822:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <compB0_1+0x1>
 826:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 82a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

            TIMSK1 = (1 << OCIE1A) | (1 << OCIE1B); /* Enable interrupts on output compare for OCR1A and OCR1B */
 82e:	86 e0       	ldi	r24, 0x06	; 6
 830:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            break;

        default:
            break;
    }
    TCCR1B = (1 << WGM12) | (1 << CS10); /* "Clear Timer on Compare Match with OCR1A" and "Clock with no prescaling" */
 834:	89 e0       	ldi	r24, 0x09	; 9
 836:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    sei(); /* Enable global interrupts */
 83a:	78 94       	sei
}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	08 95       	ret

Disassembly of section .text.uart_init:

00001554 <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
    1554:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
    1558:	87 e6       	ldi	r24, 0x67	; 103
    155a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
    155e:	86 e0       	ldi	r24, 0x06	; 6
    1560:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    156a:	08 95       	ret

Disassembly of section .text.uart_putc:

000015f4 <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
    15f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    15f8:	95 ff       	sbrs	r25, 5
    15fa:	fc cf       	rjmp	.-8      	; 0x15f4 <uart_putc>
	UDR0 = DataByte;
    15fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1600:	08 95       	ret

Disassembly of section .text.uart_puts:

000013b2 <uart_puts>:
}

void uart_puts(const char *s )
{
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	6b 01       	movw	r12, r22
    13ba:	e8 2e       	mov	r14, r24
	while (*s)
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <uart_puts+0x18>
	uart_putc(*s++);
    13be:	9f ef       	ldi	r25, 0xFF	; 255
    13c0:	c9 1a       	sub	r12, r25
    13c2:	d9 0a       	sbc	r13, r25
    13c4:	e9 0a       	sbc	r14, r25
    13c6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
    13ca:	f6 01       	movw	r30, r12
    13cc:	84 91       	lpm	r24, Z
    13ce:	e7 fc       	sbrc	r14, 7
    13d0:	80 81       	ld	r24, Z
    13d2:	81 11       	cpse	r24, r1
    13d4:	f4 cf       	rjmp	.-24     	; 0x13be <uart_puts+0xc>
	uart_putc(*s++);

	}/* uart_puts */
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001638 <__cmpsf2>:
    1638:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_cmp>
    163c:	08 f4       	brcc	.+2      	; 0x1640 <__cmpsf2+0x8>
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001664 <__divsf3>:
    1664:	0e 94 9a 04 	call	0x934	; 0x934 <__divsf3x>
    1668:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000934 <__divsf3x>:
 934:	10 c0       	rjmp	.+32     	; 0x956 <__divsf3x+0x22>
 936:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
 93a:	58 f0       	brcs	.+22     	; 0x952 <__divsf3x+0x1e>
 93c:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
 940:	40 f0       	brcs	.+16     	; 0x952 <__divsf3x+0x1e>
 942:	29 f4       	brne	.+10     	; 0x94e <__divsf3x+0x1a>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	29 f0       	breq	.+10     	; 0x952 <__divsf3x+0x1e>
 948:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
 94c:	51 11       	cpse	r21, r1
 94e:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
 952:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>
 956:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_split3>
 95a:	68 f3       	brcs	.-38     	; 0x936 <__divsf3x+0x2>

0000095c <__divsf3_pse>:
 95c:	99 23       	and	r25, r25
 95e:	b1 f3       	breq	.-20     	; 0x94c <__divsf3x+0x18>
 960:	55 23       	and	r21, r21
 962:	91 f3       	breq	.-28     	; 0x948 <__divsf3x+0x14>
 964:	95 1b       	sub	r25, r21
 966:	55 0b       	sbc	r21, r21
 968:	bb 27       	eor	r27, r27
 96a:	aa 27       	eor	r26, r26
 96c:	62 17       	cp	r22, r18
 96e:	73 07       	cpc	r23, r19
 970:	84 07       	cpc	r24, r20
 972:	38 f0       	brcs	.+14     	; 0x982 <__divsf3_pse+0x26>
 974:	9f 5f       	subi	r25, 0xFF	; 255
 976:	5f 4f       	sbci	r21, 0xFF	; 255
 978:	22 0f       	add	r18, r18
 97a:	33 1f       	adc	r19, r19
 97c:	44 1f       	adc	r20, r20
 97e:	aa 1f       	adc	r26, r26
 980:	a9 f3       	breq	.-22     	; 0x96c <__divsf3_pse+0x10>
 982:	35 d0       	rcall	.+106    	; 0x9ee <__divsf3_pse+0x92>
 984:	0e 2e       	mov	r0, r30
 986:	3a f0       	brmi	.+14     	; 0x996 <__divsf3_pse+0x3a>
 988:	e0 e8       	ldi	r30, 0x80	; 128
 98a:	32 d0       	rcall	.+100    	; 0x9f0 <__divsf3_pse+0x94>
 98c:	91 50       	subi	r25, 0x01	; 1
 98e:	50 40       	sbci	r21, 0x00	; 0
 990:	e6 95       	lsr	r30
 992:	00 1c       	adc	r0, r0
 994:	ca f7       	brpl	.-14     	; 0x988 <__divsf3_pse+0x2c>
 996:	2b d0       	rcall	.+86     	; 0x9ee <__divsf3_pse+0x92>
 998:	fe 2f       	mov	r31, r30
 99a:	29 d0       	rcall	.+82     	; 0x9ee <__divsf3_pse+0x92>
 99c:	66 0f       	add	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	bb 1f       	adc	r27, r27
 9a4:	26 17       	cp	r18, r22
 9a6:	37 07       	cpc	r19, r23
 9a8:	48 07       	cpc	r20, r24
 9aa:	ab 07       	cpc	r26, r27
 9ac:	b0 e8       	ldi	r27, 0x80	; 128
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__divsf3_pse+0x56>
 9b0:	bb 0b       	sbc	r27, r27
 9b2:	80 2d       	mov	r24, r0
 9b4:	bf 01       	movw	r22, r30
 9b6:	ff 27       	eor	r31, r31
 9b8:	93 58       	subi	r25, 0x83	; 131
 9ba:	5f 4f       	sbci	r21, 0xFF	; 255
 9bc:	3a f0       	brmi	.+14     	; 0x9cc <__divsf3_pse+0x70>
 9be:	9e 3f       	cpi	r25, 0xFE	; 254
 9c0:	51 05       	cpc	r21, r1
 9c2:	78 f0       	brcs	.+30     	; 0x9e2 <__divsf3_pse+0x86>
 9c4:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
 9c8:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
 9cc:	5f 3f       	cpi	r21, 0xFF	; 255
 9ce:	e4 f3       	brlt	.-8      	; 0x9c8 <__divsf3_pse+0x6c>
 9d0:	98 3e       	cpi	r25, 0xE8	; 232
 9d2:	d4 f3       	brlt	.-12     	; 0x9c8 <__divsf3_pse+0x6c>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b7 95       	ror	r27
 9dc:	f7 95       	ror	r31
 9de:	9f 5f       	subi	r25, 0xFF	; 255
 9e0:	c9 f7       	brne	.-14     	; 0x9d4 <__divsf3_pse+0x78>
 9e2:	88 0f       	add	r24, r24
 9e4:	91 1d       	adc	r25, r1
 9e6:	96 95       	lsr	r25
 9e8:	87 95       	ror	r24
 9ea:	97 f9       	bld	r25, 7
 9ec:	08 95       	ret
 9ee:	e1 e0       	ldi	r30, 0x01	; 1
 9f0:	66 0f       	add	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	bb 1f       	adc	r27, r27
 9f8:	62 17       	cp	r22, r18
 9fa:	73 07       	cpc	r23, r19
 9fc:	84 07       	cpc	r24, r20
 9fe:	ba 07       	cpc	r27, r26
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__divsf3_pse+0xae>
 a02:	62 1b       	sub	r22, r18
 a04:	73 0b       	sbc	r23, r19
 a06:	84 0b       	sbc	r24, r20
 a08:	ba 0b       	sbc	r27, r26
 a0a:	ee 1f       	adc	r30, r30
 a0c:	88 f7       	brcc	.-30     	; 0x9f0 <__divsf3_pse+0x94>
 a0e:	e0 95       	com	r30
 a10:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e0e <__fixunssfsi>:
 e0e:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_splitA>
 e12:	88 f0       	brcs	.+34     	; 0xe36 <__fixunssfsi+0x28>
 e14:	9f 57       	subi	r25, 0x7F	; 127
 e16:	98 f0       	brcs	.+38     	; 0xe3e <__fixunssfsi+0x30>
 e18:	b9 2f       	mov	r27, r25
 e1a:	99 27       	eor	r25, r25
 e1c:	b7 51       	subi	r27, 0x17	; 23
 e1e:	b0 f0       	brcs	.+44     	; 0xe4c <__fixunssfsi+0x3e>
 e20:	e1 f0       	breq	.+56     	; 0xe5a <__fixunssfsi+0x4c>
 e22:	66 0f       	add	r22, r22
 e24:	77 1f       	adc	r23, r23
 e26:	88 1f       	adc	r24, r24
 e28:	99 1f       	adc	r25, r25
 e2a:	1a f0       	brmi	.+6      	; 0xe32 <__fixunssfsi+0x24>
 e2c:	ba 95       	dec	r27
 e2e:	c9 f7       	brne	.-14     	; 0xe22 <__fixunssfsi+0x14>
 e30:	14 c0       	rjmp	.+40     	; 0xe5a <__fixunssfsi+0x4c>
 e32:	b1 30       	cpi	r27, 0x01	; 1
 e34:	91 f0       	breq	.+36     	; 0xe5a <__fixunssfsi+0x4c>
 e36:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_zero>
 e3a:	b1 e0       	ldi	r27, 0x01	; 1
 e3c:	08 95       	ret
 e3e:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_zero>
 e42:	67 2f       	mov	r22, r23
 e44:	78 2f       	mov	r23, r24
 e46:	88 27       	eor	r24, r24
 e48:	b8 5f       	subi	r27, 0xF8	; 248
 e4a:	39 f0       	breq	.+14     	; 0xe5a <__fixunssfsi+0x4c>
 e4c:	b9 3f       	cpi	r27, 0xF9	; 249
 e4e:	cc f3       	brlt	.-14     	; 0xe42 <__fixunssfsi+0x34>
 e50:	86 95       	lsr	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	b3 95       	inc	r27
 e58:	d9 f7       	brne	.-10     	; 0xe50 <__fixunssfsi+0x42>
 e5a:	3e f4       	brtc	.+14     	; 0xe6a <__fixunssfsi+0x5c>
 e5c:	90 95       	com	r25
 e5e:	80 95       	com	r24
 e60:	70 95       	com	r23
 e62:	61 95       	neg	r22
 e64:	7f 4f       	sbci	r23, 0xFF	; 255
 e66:	8f 4f       	sbci	r24, 0xFF	; 255
 e68:	9f 4f       	sbci	r25, 0xFF	; 255
 e6a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000caa <__floatunsisf>:
 caa:	e8 94       	clt
 cac:	09 c0       	rjmp	.+18     	; 0xcc0 <__floatsisf+0x12>

00000cae <__floatsisf>:
 cae:	97 fb       	bst	r25, 7
 cb0:	3e f4       	brtc	.+14     	; 0xcc0 <__floatsisf+0x12>
 cb2:	90 95       	com	r25
 cb4:	80 95       	com	r24
 cb6:	70 95       	com	r23
 cb8:	61 95       	neg	r22
 cba:	7f 4f       	sbci	r23, 0xFF	; 255
 cbc:	8f 4f       	sbci	r24, 0xFF	; 255
 cbe:	9f 4f       	sbci	r25, 0xFF	; 255
 cc0:	99 23       	and	r25, r25
 cc2:	a9 f0       	breq	.+42     	; 0xcee <__floatsisf+0x40>
 cc4:	f9 2f       	mov	r31, r25
 cc6:	96 e9       	ldi	r25, 0x96	; 150
 cc8:	bb 27       	eor	r27, r27
 cca:	93 95       	inc	r25
 ccc:	f6 95       	lsr	r31
 cce:	87 95       	ror	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	b7 95       	ror	r27
 cd6:	f1 11       	cpse	r31, r1
 cd8:	f8 cf       	rjmp	.-16     	; 0xcca <__floatsisf+0x1c>
 cda:	fa f4       	brpl	.+62     	; 0xd1a <__floatsisf+0x6c>
 cdc:	bb 0f       	add	r27, r27
 cde:	11 f4       	brne	.+4      	; 0xce4 <__floatsisf+0x36>
 ce0:	60 ff       	sbrs	r22, 0
 ce2:	1b c0       	rjmp	.+54     	; 0xd1a <__floatsisf+0x6c>
 ce4:	6f 5f       	subi	r22, 0xFF	; 255
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	16 c0       	rjmp	.+44     	; 0xd1a <__floatsisf+0x6c>
 cee:	88 23       	and	r24, r24
 cf0:	11 f0       	breq	.+4      	; 0xcf6 <__floatsisf+0x48>
 cf2:	96 e9       	ldi	r25, 0x96	; 150
 cf4:	11 c0       	rjmp	.+34     	; 0xd18 <__floatsisf+0x6a>
 cf6:	77 23       	and	r23, r23
 cf8:	21 f0       	breq	.+8      	; 0xd02 <__floatsisf+0x54>
 cfa:	9e e8       	ldi	r25, 0x8E	; 142
 cfc:	87 2f       	mov	r24, r23
 cfe:	76 2f       	mov	r23, r22
 d00:	05 c0       	rjmp	.+10     	; 0xd0c <__floatsisf+0x5e>
 d02:	66 23       	and	r22, r22
 d04:	71 f0       	breq	.+28     	; 0xd22 <__floatsisf+0x74>
 d06:	96 e8       	ldi	r25, 0x86	; 134
 d08:	86 2f       	mov	r24, r22
 d0a:	70 e0       	ldi	r23, 0x00	; 0
 d0c:	60 e0       	ldi	r22, 0x00	; 0
 d0e:	2a f0       	brmi	.+10     	; 0xd1a <__floatsisf+0x6c>
 d10:	9a 95       	dec	r25
 d12:	66 0f       	add	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	da f7       	brpl	.-10     	; 0xd10 <__floatsisf+0x62>
 d1a:	88 0f       	add	r24, r24
 d1c:	96 95       	lsr	r25
 d1e:	87 95       	ror	r24
 d20:	97 f9       	bld	r25, 7
 d22:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000fa8 <__fp_cmp>:
 fa8:	99 0f       	add	r25, r25
 faa:	00 08       	sbc	r0, r0
 fac:	55 0f       	add	r21, r21
 fae:	aa 0b       	sbc	r26, r26
 fb0:	e0 e8       	ldi	r30, 0x80	; 128
 fb2:	fe ef       	ldi	r31, 0xFE	; 254
 fb4:	16 16       	cp	r1, r22
 fb6:	17 06       	cpc	r1, r23
 fb8:	e8 07       	cpc	r30, r24
 fba:	f9 07       	cpc	r31, r25
 fbc:	c0 f0       	brcs	.+48     	; 0xfee <__fp_cmp+0x46>
 fbe:	12 16       	cp	r1, r18
 fc0:	13 06       	cpc	r1, r19
 fc2:	e4 07       	cpc	r30, r20
 fc4:	f5 07       	cpc	r31, r21
 fc6:	98 f0       	brcs	.+38     	; 0xfee <__fp_cmp+0x46>
 fc8:	62 1b       	sub	r22, r18
 fca:	73 0b       	sbc	r23, r19
 fcc:	84 0b       	sbc	r24, r20
 fce:	95 0b       	sbc	r25, r21
 fd0:	39 f4       	brne	.+14     	; 0xfe0 <__fp_cmp+0x38>
 fd2:	0a 26       	eor	r0, r26
 fd4:	61 f0       	breq	.+24     	; 0xfee <__fp_cmp+0x46>
 fd6:	23 2b       	or	r18, r19
 fd8:	24 2b       	or	r18, r20
 fda:	25 2b       	or	r18, r21
 fdc:	21 f4       	brne	.+8      	; 0xfe6 <__fp_cmp+0x3e>
 fde:	08 95       	ret
 fe0:	0a 26       	eor	r0, r26
 fe2:	09 f4       	brne	.+2      	; 0xfe6 <__fp_cmp+0x3e>
 fe4:	a1 40       	sbci	r26, 0x01	; 1
 fe6:	a6 95       	lsr	r26
 fe8:	8f ef       	ldi	r24, 0xFF	; 255
 fea:	81 1d       	adc	r24, r1
 fec:	81 1d       	adc	r24, r1
 fee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000162c <__fp_inf>:
    162c:	97 f9       	bld	r25, 7
    162e:	9f 67       	ori	r25, 0x7F	; 127
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000169e <__fp_nan>:
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	80 ec       	ldi	r24, 0xC0	; 192
    16a2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001602 <__fp_pscA>:
    1602:	00 24       	eor	r0, r0
    1604:	0a 94       	dec	r0
    1606:	16 16       	cp	r1, r22
    1608:	17 06       	cpc	r1, r23
    160a:	18 06       	cpc	r1, r24
    160c:	09 06       	cpc	r0, r25
    160e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001610 <__fp_pscB>:
    1610:	00 24       	eor	r0, r0
    1612:	0a 94       	dec	r0
    1614:	12 16       	cp	r1, r18
    1616:	13 06       	cpc	r1, r19
    1618:	14 06       	cpc	r1, r20
    161a:	05 06       	cpc	r0, r21
    161c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014b8 <__fp_round>:
    14b8:	09 2e       	mov	r0, r25
    14ba:	03 94       	inc	r0
    14bc:	00 0c       	add	r0, r0
    14be:	11 f4       	brne	.+4      	; 0x14c4 <__fp_round+0xc>
    14c0:	88 23       	and	r24, r24
    14c2:	52 f0       	brmi	.+20     	; 0x14d8 <__fp_round+0x20>
    14c4:	bb 0f       	add	r27, r27
    14c6:	40 f4       	brcc	.+16     	; 0x14d8 <__fp_round+0x20>
    14c8:	bf 2b       	or	r27, r31
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <__fp_round+0x18>
    14cc:	60 ff       	sbrs	r22, 0
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__fp_round+0x20>
    14d0:	6f 5f       	subi	r22, 0xFF	; 255
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	8f 4f       	sbci	r24, 0xFF	; 255
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000107a <__fp_split3>:
    107a:	57 fd       	sbrc	r21, 7
    107c:	90 58       	subi	r25, 0x80	; 128
    107e:	44 0f       	add	r20, r20
    1080:	55 1f       	adc	r21, r21
    1082:	59 f0       	breq	.+22     	; 0x109a <__fp_splitA+0x10>
    1084:	5f 3f       	cpi	r21, 0xFF	; 255
    1086:	71 f0       	breq	.+28     	; 0x10a4 <__fp_splitA+0x1a>
    1088:	47 95       	ror	r20

0000108a <__fp_splitA>:
    108a:	88 0f       	add	r24, r24
    108c:	97 fb       	bst	r25, 7
    108e:	99 1f       	adc	r25, r25
    1090:	61 f0       	breq	.+24     	; 0x10aa <__fp_splitA+0x20>
    1092:	9f 3f       	cpi	r25, 0xFF	; 255
    1094:	79 f0       	breq	.+30     	; 0x10b4 <__fp_splitA+0x2a>
    1096:	87 95       	ror	r24
    1098:	08 95       	ret
    109a:	12 16       	cp	r1, r18
    109c:	13 06       	cpc	r1, r19
    109e:	14 06       	cpc	r1, r20
    10a0:	55 1f       	adc	r21, r21
    10a2:	f2 cf       	rjmp	.-28     	; 0x1088 <__fp_split3+0xe>
    10a4:	46 95       	lsr	r20
    10a6:	f1 df       	rcall	.-30     	; 0x108a <__fp_splitA>
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <__fp_splitA+0x30>
    10aa:	16 16       	cp	r1, r22
    10ac:	17 06       	cpc	r1, r23
    10ae:	18 06       	cpc	r1, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	f1 cf       	rjmp	.-30     	; 0x1096 <__fp_splitA+0xc>
    10b4:	86 95       	lsr	r24
    10b6:	71 05       	cpc	r23, r1
    10b8:	61 05       	cpc	r22, r1
    10ba:	08 94       	sec
    10bc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000161e <__fp_zero>:
    161e:	e8 94       	clt

00001620 <__fp_szero>:
    1620:	bb 27       	eor	r27, r27
    1622:	66 27       	eor	r22, r22
    1624:	77 27       	eor	r23, r23
    1626:	cb 01       	movw	r24, r22
    1628:	97 f9       	bld	r25, 7
    162a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001642 <__gesf2>:
    1642:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_cmp>
    1646:	08 f4       	brcc	.+2      	; 0x164a <__gesf2+0x8>
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000166c <__mulsf3>:
    166c:	0e 94 09 05 	call	0xa12	; 0xa12 <__mulsf3x>
    1670:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000a12 <__mulsf3x>:
 a12:	0f c0       	rjmp	.+30     	; 0xa32 <__mulsf3x+0x20>
 a14:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
 a18:	38 f0       	brcs	.+14     	; 0xa28 <__mulsf3x+0x16>
 a1a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
 a1e:	20 f0       	brcs	.+8      	; 0xa28 <__mulsf3x+0x16>
 a20:	95 23       	and	r25, r21
 a22:	11 f0       	breq	.+4      	; 0xa28 <__mulsf3x+0x16>
 a24:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
 a28:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>
 a2c:	11 24       	eor	r1, r1
 a2e:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
 a32:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_split3>
 a36:	70 f3       	brcs	.-36     	; 0xa14 <__mulsf3x+0x2>

00000a38 <__mulsf3_pse>:
 a38:	95 9f       	mul	r25, r21
 a3a:	c1 f3       	breq	.-16     	; 0xa2c <__mulsf3x+0x1a>
 a3c:	95 0f       	add	r25, r21
 a3e:	50 e0       	ldi	r21, 0x00	; 0
 a40:	55 1f       	adc	r21, r21
 a42:	62 9f       	mul	r22, r18
 a44:	f0 01       	movw	r30, r0
 a46:	72 9f       	mul	r23, r18
 a48:	bb 27       	eor	r27, r27
 a4a:	f0 0d       	add	r31, r0
 a4c:	b1 1d       	adc	r27, r1
 a4e:	63 9f       	mul	r22, r19
 a50:	aa 27       	eor	r26, r26
 a52:	f0 0d       	add	r31, r0
 a54:	b1 1d       	adc	r27, r1
 a56:	aa 1f       	adc	r26, r26
 a58:	64 9f       	mul	r22, r20
 a5a:	66 27       	eor	r22, r22
 a5c:	b0 0d       	add	r27, r0
 a5e:	a1 1d       	adc	r26, r1
 a60:	66 1f       	adc	r22, r22
 a62:	82 9f       	mul	r24, r18
 a64:	22 27       	eor	r18, r18
 a66:	b0 0d       	add	r27, r0
 a68:	a1 1d       	adc	r26, r1
 a6a:	62 1f       	adc	r22, r18
 a6c:	73 9f       	mul	r23, r19
 a6e:	b0 0d       	add	r27, r0
 a70:	a1 1d       	adc	r26, r1
 a72:	62 1f       	adc	r22, r18
 a74:	83 9f       	mul	r24, r19
 a76:	a0 0d       	add	r26, r0
 a78:	61 1d       	adc	r22, r1
 a7a:	22 1f       	adc	r18, r18
 a7c:	74 9f       	mul	r23, r20
 a7e:	33 27       	eor	r19, r19
 a80:	a0 0d       	add	r26, r0
 a82:	61 1d       	adc	r22, r1
 a84:	23 1f       	adc	r18, r19
 a86:	84 9f       	mul	r24, r20
 a88:	60 0d       	add	r22, r0
 a8a:	21 1d       	adc	r18, r1
 a8c:	82 2f       	mov	r24, r18
 a8e:	76 2f       	mov	r23, r22
 a90:	6a 2f       	mov	r22, r26
 a92:	11 24       	eor	r1, r1
 a94:	9f 57       	subi	r25, 0x7F	; 127
 a96:	50 40       	sbci	r21, 0x00	; 0
 a98:	9a f0       	brmi	.+38     	; 0xac0 <__mulsf3_pse+0x88>
 a9a:	f1 f0       	breq	.+60     	; 0xad8 <__mulsf3_pse+0xa0>
 a9c:	88 23       	and	r24, r24
 a9e:	4a f0       	brmi	.+18     	; 0xab2 <__mulsf3_pse+0x7a>
 aa0:	ee 0f       	add	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	bb 1f       	adc	r27, r27
 aa6:	66 1f       	adc	r22, r22
 aa8:	77 1f       	adc	r23, r23
 aaa:	88 1f       	adc	r24, r24
 aac:	91 50       	subi	r25, 0x01	; 1
 aae:	50 40       	sbci	r21, 0x00	; 0
 ab0:	a9 f7       	brne	.-22     	; 0xa9c <__mulsf3_pse+0x64>
 ab2:	9e 3f       	cpi	r25, 0xFE	; 254
 ab4:	51 05       	cpc	r21, r1
 ab6:	80 f0       	brcs	.+32     	; 0xad8 <__mulsf3_pse+0xa0>
 ab8:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
 abc:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
 ac0:	5f 3f       	cpi	r21, 0xFF	; 255
 ac2:	e4 f3       	brlt	.-8      	; 0xabc <__mulsf3_pse+0x84>
 ac4:	98 3e       	cpi	r25, 0xE8	; 232
 ac6:	d4 f3       	brlt	.-12     	; 0xabc <__mulsf3_pse+0x84>
 ac8:	86 95       	lsr	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	b7 95       	ror	r27
 ad0:	f7 95       	ror	r31
 ad2:	e7 95       	ror	r30
 ad4:	9f 5f       	subi	r25, 0xFF	; 255
 ad6:	c1 f7       	brne	.-16     	; 0xac8 <__mulsf3_pse+0x90>
 ad8:	fe 2b       	or	r31, r30
 ada:	88 0f       	add	r24, r24
 adc:	91 1d       	adc	r25, r1
 ade:	96 95       	lsr	r25
 ae0:	87 95       	ror	r24
 ae2:	97 f9       	bld	r25, 7
 ae4:	08 95       	ret

Disassembly of section .text.libgcc.div:

000013de <__divmodhi4>:
    13de:	97 fb       	bst	r25, 7
    13e0:	07 2e       	mov	r0, r23
    13e2:	16 f4       	brtc	.+4      	; 0x13e8 <__divmodhi4+0xa>
    13e4:	00 94       	com	r0
    13e6:	07 d0       	rcall	.+14     	; 0x13f6 <__divmodhi4_neg1>
    13e8:	77 fd       	sbrc	r23, 7
    13ea:	09 d0       	rcall	.+18     	; 0x13fe <__divmodhi4_neg2>
    13ec:	0e 94 03 0a 	call	0x1406	; 0x1406 <__udivmodhi4>
    13f0:	07 fc       	sbrc	r0, 7
    13f2:	05 d0       	rcall	.+10     	; 0x13fe <__divmodhi4_neg2>
    13f4:	3e f4       	brtc	.+14     	; 0x1404 <__divmodhi4_exit>

000013f6 <__divmodhi4_neg1>:
    13f6:	90 95       	com	r25
    13f8:	81 95       	neg	r24
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	08 95       	ret

000013fe <__divmodhi4_neg2>:
    13fe:	70 95       	com	r23
    1400:	61 95       	neg	r22
    1402:	7f 4f       	sbci	r23, 0xFF	; 255

00001404 <__divmodhi4_exit>:
    1404:	08 95       	ret

Disassembly of section .text.libgcc.div:

000010be <__udivmodsi4>:
    10be:	a1 e2       	ldi	r26, 0x21	; 33
    10c0:	1a 2e       	mov	r1, r26
    10c2:	aa 1b       	sub	r26, r26
    10c4:	bb 1b       	sub	r27, r27
    10c6:	fd 01       	movw	r30, r26
    10c8:	0d c0       	rjmp	.+26     	; 0x10e4 <__udivmodsi4_ep>

000010ca <__udivmodsi4_loop>:
    10ca:	aa 1f       	adc	r26, r26
    10cc:	bb 1f       	adc	r27, r27
    10ce:	ee 1f       	adc	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	a2 17       	cp	r26, r18
    10d4:	b3 07       	cpc	r27, r19
    10d6:	e4 07       	cpc	r30, r20
    10d8:	f5 07       	cpc	r31, r21
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__udivmodsi4_ep>
    10dc:	a2 1b       	sub	r26, r18
    10de:	b3 0b       	sbc	r27, r19
    10e0:	e4 0b       	sbc	r30, r20
    10e2:	f5 0b       	sbc	r31, r21

000010e4 <__udivmodsi4_ep>:
    10e4:	66 1f       	adc	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	1a 94       	dec	r1
    10ee:	69 f7       	brne	.-38     	; 0x10ca <__udivmodsi4_loop>
    10f0:	60 95       	com	r22
    10f2:	70 95       	com	r23
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	9b 01       	movw	r18, r22
    10fa:	ac 01       	movw	r20, r24
    10fc:	bd 01       	movw	r22, r26
    10fe:	cf 01       	movw	r24, r30
    1100:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001406 <__udivmodhi4>:
    1406:	aa 1b       	sub	r26, r26
    1408:	bb 1b       	sub	r27, r27
    140a:	51 e1       	ldi	r21, 0x11	; 17
    140c:	07 c0       	rjmp	.+14     	; 0x141c <__udivmodhi4_ep>

0000140e <__udivmodhi4_loop>:
    140e:	aa 1f       	adc	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	a6 17       	cp	r26, r22
    1414:	b7 07       	cpc	r27, r23
    1416:	10 f0       	brcs	.+4      	; 0x141c <__udivmodhi4_ep>
    1418:	a6 1b       	sub	r26, r22
    141a:	b7 0b       	sbc	r27, r23

0000141c <__udivmodhi4_ep>:
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	5a 95       	dec	r21
    1422:	a9 f7       	brne	.-22     	; 0x140e <__udivmodhi4_loop>
    1424:	80 95       	com	r24
    1426:	90 95       	com	r25
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ff0 <sprintf>:
     ff0:	af e0       	ldi	r26, 0x0F	; 15
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee ef       	ldi	r30, 0xFE	; 254
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__prologue_saves__+0x1c>
     ffc:	0e 89       	ldd	r16, Y+22	; 0x16
     ffe:	1f 89       	ldd	r17, Y+23	; 0x17
    1000:	86 e0       	ldi	r24, 0x06	; 6
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	1a 83       	std	Y+2, r17	; 0x02
    1006:	09 83       	std	Y+1, r16	; 0x01
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	9f e7       	ldi	r25, 0x7F	; 127
    100c:	9f 83       	std	Y+7, r25	; 0x07
    100e:	8e 83       	std	Y+6, r24	; 0x06
    1010:	9e 01       	movw	r18, r28
    1012:	25 5e       	subi	r18, 0xE5	; 229
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	48 8d       	ldd	r20, Y+24	; 0x18
    1018:	59 8d       	ldd	r21, Y+25	; 0x19
    101a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	0e 94 c8 00 	call	0x190	; 0x190 <vfprintf>
    1024:	e8 85       	ldd	r30, Y+8	; 0x08
    1026:	f9 85       	ldd	r31, Y+9	; 0x09
    1028:	e0 0f       	add	r30, r16
    102a:	f1 1f       	adc	r31, r17
    102c:	10 82       	st	Z, r1
    102e:	2f 96       	adiw	r28, 0x0f	; 15
    1030:	e4 e0       	ldi	r30, 0x04	; 4
    1032:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000190 <vfprintf>:
 190:	2f 92       	push	r2
 192:	3f 92       	push	r3
 194:	4f 92       	push	r4
 196:	6f 92       	push	r6
 198:	7f 92       	push	r7
 19a:	8f 92       	push	r8
 19c:	9f 92       	push	r9
 19e:	af 92       	push	r10
 1a0:	bf 92       	push	r11
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	62 97       	sbiw	r28, 0x12	; 18
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	6c 01       	movw	r12, r24
 1c4:	3a 01       	movw	r6, r20
 1c6:	86 2e       	mov	r8, r22
 1c8:	79 01       	movw	r14, r18
 1ca:	fc 01       	movw	r30, r24
 1cc:	10 86       	std	Z+8, r1	; 0x08
 1ce:	17 82       	std	Z+7, r1	; 0x07
 1d0:	84 81       	ldd	r24, Z+4	; 0x04
 1d2:	81 ff       	sbrs	r24, 1
 1d4:	e7 c1       	rjmp	.+974    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 1d6:	9e 01       	movw	r18, r28
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	3d 87       	std	Y+13, r19	; 0x0d
 1de:	2c 87       	std	Y+12, r18	; 0x0c
 1e0:	c9 01       	movw	r24, r18
 1e2:	a0 e8       	ldi	r26, 0x80	; 128
 1e4:	88 8b       	std	Y+16, r24	; 0x10
 1e6:	99 8b       	std	Y+17, r25	; 0x11
 1e8:	aa 8b       	std	Y+18, r26	; 0x12
 1ea:	9f e3       	ldi	r25, 0x3F	; 63
 1ec:	99 2e       	mov	r9, r25
 1ee:	f3 01       	movw	r30, r6
 1f0:	84 91       	lpm	r24, Z
 1f2:	87 fc       	sbrc	r8, 7
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	09 f4       	brne	.+2      	; 0x1fc <vfprintf+0x6c>
 1fa:	d0 c1       	rjmp	.+928    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 1fc:	48 2d       	mov	r20, r8
 1fe:	93 01       	movw	r18, r6
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	4f 4f       	sbci	r20, 0xFF	; 255
 206:	85 32       	cpi	r24, 0x25	; 37
 208:	19 f0       	breq	.+6      	; 0x210 <vfprintf+0x80>
 20a:	39 01       	movw	r6, r18
 20c:	84 2e       	mov	r8, r20
 20e:	0a c0       	rjmp	.+20     	; 0x224 <vfprintf+0x94>
 210:	f9 01       	movw	r30, r18
 212:	84 91       	lpm	r24, Z
 214:	47 fd       	sbrc	r20, 7
 216:	80 81       	ld	r24, Z
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	69 0e       	add	r6, r25
 21c:	71 1c       	adc	r7, r1
 21e:	81 1c       	adc	r8, r1
 220:	85 32       	cpi	r24, 0x25	; 37
 222:	29 f4       	brne	.+10     	; 0x22e <vfprintf+0x9e>
 224:	b6 01       	movw	r22, r12
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 22c:	e0 cf       	rjmp	.-64     	; 0x1ee <vfprintf+0x5e>
 22e:	b1 2c       	mov	r11, r1
 230:	00 e0       	ldi	r16, 0x00	; 0
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	10 32       	cpi	r17, 0x20	; 32
 236:	a0 f4       	brcc	.+40     	; 0x260 <vfprintf+0xd0>
 238:	8b 32       	cpi	r24, 0x2B	; 43
 23a:	69 f0       	breq	.+26     	; 0x256 <vfprintf+0xc6>
 23c:	30 f4       	brcc	.+12     	; 0x24a <vfprintf+0xba>
 23e:	80 32       	cpi	r24, 0x20	; 32
 240:	59 f0       	breq	.+22     	; 0x258 <vfprintf+0xc8>
 242:	83 32       	cpi	r24, 0x23	; 35
 244:	69 f4       	brne	.+26     	; 0x260 <vfprintf+0xd0>
 246:	10 61       	ori	r17, 0x10	; 16
 248:	2c c0       	rjmp	.+88     	; 0x2a2 <vfprintf+0x112>
 24a:	8d 32       	cpi	r24, 0x2D	; 45
 24c:	39 f0       	breq	.+14     	; 0x25c <vfprintf+0xcc>
 24e:	80 33       	cpi	r24, 0x30	; 48
 250:	39 f4       	brne	.+14     	; 0x260 <vfprintf+0xd0>
 252:	11 60       	ori	r17, 0x01	; 1
 254:	26 c0       	rjmp	.+76     	; 0x2a2 <vfprintf+0x112>
 256:	12 60       	ori	r17, 0x02	; 2
 258:	14 60       	ori	r17, 0x04	; 4
 25a:	23 c0       	rjmp	.+70     	; 0x2a2 <vfprintf+0x112>
 25c:	18 60       	ori	r17, 0x08	; 8
 25e:	21 c0       	rjmp	.+66     	; 0x2a2 <vfprintf+0x112>
 260:	17 fd       	sbrc	r17, 7
 262:	29 c0       	rjmp	.+82     	; 0x2b6 <vfprintf+0x126>
 264:	90 ed       	ldi	r25, 0xD0	; 208
 266:	98 0f       	add	r25, r24
 268:	9a 30       	cpi	r25, 0x0A	; 10
 26a:	78 f4       	brcc	.+30     	; 0x28a <vfprintf+0xfa>
 26c:	16 ff       	sbrs	r17, 6
 26e:	06 c0       	rjmp	.+12     	; 0x27c <vfprintf+0xec>
 270:	aa e0       	ldi	r26, 0x0A	; 10
 272:	ba 9e       	mul	r11, r26
 274:	90 0d       	add	r25, r0
 276:	11 24       	eor	r1, r1
 278:	b9 2e       	mov	r11, r25
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <vfprintf+0x112>
 27c:	ea e0       	ldi	r30, 0x0A	; 10
 27e:	0e 9f       	mul	r16, r30
 280:	90 0d       	add	r25, r0
 282:	11 24       	eor	r1, r1
 284:	09 2f       	mov	r16, r25
 286:	10 62       	ori	r17, 0x20	; 32
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <vfprintf+0x112>
 28a:	8e 32       	cpi	r24, 0x2E	; 46
 28c:	21 f4       	brne	.+8      	; 0x296 <vfprintf+0x106>
 28e:	16 fd       	sbrc	r17, 6
 290:	85 c1       	rjmp	.+778    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 292:	10 64       	ori	r17, 0x40	; 64
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <vfprintf+0x112>
 296:	8c 36       	cpi	r24, 0x6C	; 108
 298:	11 f4       	brne	.+4      	; 0x29e <vfprintf+0x10e>
 29a:	10 68       	ori	r17, 0x80	; 128
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <vfprintf+0x112>
 29e:	88 36       	cpi	r24, 0x68	; 104
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <vfprintf+0x126>
 2a2:	f3 01       	movw	r30, r6
 2a4:	84 91       	lpm	r24, Z
 2a6:	87 fc       	sbrc	r8, 7
 2a8:	80 81       	ld	r24, Z
 2aa:	ff ef       	ldi	r31, 0xFF	; 255
 2ac:	6f 1a       	sub	r6, r31
 2ae:	7f 0a       	sbc	r7, r31
 2b0:	8f 0a       	sbc	r8, r31
 2b2:	81 11       	cpse	r24, r1
 2b4:	bf cf       	rjmp	.-130    	; 0x234 <vfprintf+0xa4>
 2b6:	98 2f       	mov	r25, r24
 2b8:	9f 7d       	andi	r25, 0xDF	; 223
 2ba:	95 54       	subi	r25, 0x45	; 69
 2bc:	93 30       	cpi	r25, 0x03	; 3
 2be:	28 f4       	brcc	.+10     	; 0x2ca <vfprintf+0x13a>
 2c0:	24 e0       	ldi	r18, 0x04	; 4
 2c2:	e2 0e       	add	r14, r18
 2c4:	f1 1c       	adc	r15, r1
 2c6:	99 82       	std	Y+1, r9	; 0x01
 2c8:	0f c0       	rjmp	.+30     	; 0x2e8 <vfprintf+0x158>
 2ca:	83 36       	cpi	r24, 0x63	; 99
 2cc:	31 f0       	breq	.+12     	; 0x2da <vfprintf+0x14a>
 2ce:	83 37       	cpi	r24, 0x73	; 115
 2d0:	91 f0       	breq	.+36     	; 0x2f6 <vfprintf+0x166>
 2d2:	83 35       	cpi	r24, 0x53	; 83
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <vfprintf+0x148>
 2d6:	63 c0       	rjmp	.+198    	; 0x39e <vfprintf+0x20e>
 2d8:	27 c0       	rjmp	.+78     	; 0x328 <vfprintf+0x198>
 2da:	f7 01       	movw	r30, r14
 2dc:	80 81       	ld	r24, Z
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	97 01       	movw	r18, r14
 2e2:	2e 5f       	subi	r18, 0xFE	; 254
 2e4:	3f 4f       	sbci	r19, 0xFF	; 255
 2e6:	79 01       	movw	r14, r18
 2e8:	28 88       	ldd	r2, Y+16	; 0x10
 2ea:	39 88       	ldd	r3, Y+17	; 0x11
 2ec:	4a 88       	ldd	r4, Y+18	; 0x12
 2ee:	aa 24       	eor	r10, r10
 2f0:	a3 94       	inc	r10
 2f2:	b1 2c       	mov	r11, r1
 2f4:	17 c0       	rjmp	.+46     	; 0x324 <vfprintf+0x194>
 2f6:	a7 01       	movw	r20, r14
 2f8:	4d 5f       	subi	r20, 0xFD	; 253
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	5f 87       	std	Y+15, r21	; 0x0f
 2fe:	4e 87       	std	Y+14, r20	; 0x0e
 300:	f7 01       	movw	r30, r14
 302:	20 80       	ld	r2, Z
 304:	31 80       	ldd	r3, Z+1	; 0x01
 306:	42 80       	ldd	r4, Z+2	; 0x02
 308:	16 ff       	sbrs	r17, 6
 30a:	03 c0       	rjmp	.+6      	; 0x312 <vfprintf+0x182>
 30c:	4b 2d       	mov	r20, r11
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <vfprintf+0x186>
 312:	4f ef       	ldi	r20, 0xFF	; 255
 314:	5f ef       	ldi	r21, 0xFF	; 255
 316:	84 2d       	mov	r24, r4
 318:	b1 01       	movw	r22, r2
 31a:	0e 94 a3 09 	call	0x1346	; 0x1346 <strnlen>
 31e:	5c 01       	movw	r10, r24
 320:	ee 84       	ldd	r14, Y+14	; 0x0e
 322:	ff 84       	ldd	r15, Y+15	; 0x0f
 324:	1f 77       	andi	r17, 0x7F	; 127
 326:	18 c0       	rjmp	.+48     	; 0x358 <vfprintf+0x1c8>
 328:	97 01       	movw	r18, r14
 32a:	2d 5f       	subi	r18, 0xFD	; 253
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	3f 87       	std	Y+15, r19	; 0x0f
 330:	2e 87       	std	Y+14, r18	; 0x0e
 332:	f7 01       	movw	r30, r14
 334:	20 80       	ld	r2, Z
 336:	31 80       	ldd	r3, Z+1	; 0x01
 338:	42 80       	ldd	r4, Z+2	; 0x02
 33a:	16 ff       	sbrs	r17, 6
 33c:	03 c0       	rjmp	.+6      	; 0x344 <vfprintf+0x1b4>
 33e:	4b 2d       	mov	r20, r11
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <vfprintf+0x1b8>
 344:	4f ef       	ldi	r20, 0xFF	; 255
 346:	5f ef       	ldi	r21, 0xFF	; 255
 348:	84 2d       	mov	r24, r4
 34a:	b1 01       	movw	r22, r2
 34c:	0e 94 a3 09 	call	0x1346	; 0x1346 <strnlen>
 350:	5c 01       	movw	r10, r24
 352:	10 68       	ori	r17, 0x80	; 128
 354:	ee 84       	ldd	r14, Y+14	; 0x0e
 356:	ff 84       	ldd	r15, Y+15	; 0x0f
 358:	13 fd       	sbrc	r17, 3
 35a:	1d c0       	rjmp	.+58     	; 0x396 <vfprintf+0x206>
 35c:	80 2f       	mov	r24, r16
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	a8 16       	cp	r10, r24
 362:	b9 06       	cpc	r11, r25
 364:	c0 f4       	brcc	.+48     	; 0x396 <vfprintf+0x206>
 366:	b6 01       	movw	r22, r12
 368:	80 e2       	ldi	r24, 0x20	; 32
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 370:	01 50       	subi	r16, 0x01	; 1
 372:	f4 cf       	rjmp	.-24     	; 0x35c <vfprintf+0x1cc>
 374:	f1 01       	movw	r30, r2
 376:	84 91       	lpm	r24, Z
 378:	47 fc       	sbrc	r4, 7
 37a:	80 81       	ld	r24, Z
 37c:	ff ef       	ldi	r31, 0xFF	; 255
 37e:	2f 1a       	sub	r2, r31
 380:	3f 0a       	sbc	r3, r31
 382:	4f 0a       	sbc	r4, r31
 384:	b6 01       	movw	r22, r12
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 38c:	01 11       	cpse	r16, r1
 38e:	01 50       	subi	r16, 0x01	; 1
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	a2 1a       	sub	r10, r18
 394:	b1 08       	sbc	r11, r1
 396:	a1 14       	cp	r10, r1
 398:	b1 04       	cpc	r11, r1
 39a:	61 f7       	brne	.-40     	; 0x374 <vfprintf+0x1e4>
 39c:	f5 c0       	rjmp	.+490    	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <vfprintf+0x216>
 3a2:	89 36       	cpi	r24, 0x69	; 105
 3a4:	71 f5       	brne	.+92     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3a6:	f7 01       	movw	r30, r14
 3a8:	17 ff       	sbrs	r17, 7
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <vfprintf+0x22c>
 3ac:	60 81       	ld	r22, Z
 3ae:	71 81       	ldd	r23, Z+1	; 0x01
 3b0:	82 81       	ldd	r24, Z+2	; 0x02
 3b2:	93 81       	ldd	r25, Z+3	; 0x03
 3b4:	97 01       	movw	r18, r14
 3b6:	2c 5f       	subi	r18, 0xFC	; 252
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <vfprintf+0x23e>
 3bc:	60 81       	ld	r22, Z
 3be:	71 81       	ldd	r23, Z+1	; 0x01
 3c0:	07 2e       	mov	r0, r23
 3c2:	00 0c       	add	r0, r0
 3c4:	88 0b       	sbc	r24, r24
 3c6:	99 0b       	sbc	r25, r25
 3c8:	97 01       	movw	r18, r14
 3ca:	2e 5f       	subi	r18, 0xFE	; 254
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	79 01       	movw	r14, r18
 3d0:	1f 76       	andi	r17, 0x6F	; 111
 3d2:	31 2e       	mov	r3, r17
 3d4:	97 ff       	sbrs	r25, 7
 3d6:	0a c0       	rjmp	.+20     	; 0x3ec <vfprintf+0x25c>
 3d8:	90 95       	com	r25
 3da:	80 95       	com	r24
 3dc:	70 95       	com	r23
 3de:	61 95       	neg	r22
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	31 2f       	mov	r19, r17
 3e8:	30 68       	ori	r19, 0x80	; 128
 3ea:	33 2e       	mov	r3, r19
 3ec:	2a e0       	ldi	r18, 0x0A	; 10
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	ae 01       	movw	r20, r28
 3f2:	4f 5f       	subi	r20, 0xFF	; 255
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	0e 94 73 05 	call	0xae6	; 0xae6 <__ultoa_invert>
 3fa:	48 2e       	mov	r4, r24
 3fc:	4c 85       	ldd	r20, Y+12	; 0x0c
 3fe:	44 1a       	sub	r4, r20
 400:	4a c0       	rjmp	.+148    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 402:	85 37       	cpi	r24, 0x75	; 117
 404:	29 f4       	brne	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 406:	1f 7e       	andi	r17, 0xEF	; 239
 408:	a1 2e       	mov	r10, r17
 40a:	2a e0       	ldi	r18, 0x0A	; 10
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	25 c0       	rjmp	.+74     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 410:	51 2f       	mov	r21, r17
 412:	59 7f       	andi	r21, 0xF9	; 249
 414:	a5 2e       	mov	r10, r21
 416:	8f 36       	cpi	r24, 0x6F	; 111
 418:	c1 f0       	breq	.+48     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 41a:	18 f4       	brcc	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	88 35       	cpi	r24, 0x58	; 88
 41e:	79 f0       	breq	.+30     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 420:	bd c0       	rjmp	.+378    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 422:	80 37       	cpi	r24, 0x70	; 112
 424:	19 f0       	breq	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 426:	88 37       	cpi	r24, 0x78	; 120
 428:	21 f0       	breq	.+8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42a:	b8 c0       	rjmp	.+368    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 42c:	85 2f       	mov	r24, r21
 42e:	80 61       	ori	r24, 0x10	; 16
 430:	a8 2e       	mov	r10, r24
 432:	a4 fe       	sbrs	r10, 4
 434:	0d c0       	rjmp	.+26     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 436:	9a 2d       	mov	r25, r10
 438:	94 60       	ori	r25, 0x04	; 4
 43a:	a9 2e       	mov	r10, r25
 43c:	09 c0       	rjmp	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43e:	14 ff       	sbrs	r17, 4
 440:	0a c0       	rjmp	.+20     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 442:	a5 2f       	mov	r26, r21
 444:	a6 60       	ori	r26, 0x06	; 6
 446:	aa 2e       	mov	r10, r26
 448:	06 c0       	rjmp	.+12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44a:	28 e0       	ldi	r18, 0x08	; 8
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	05 c0       	rjmp	.+10     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 450:	20 e1       	ldi	r18, 0x10	; 16
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	20 e1       	ldi	r18, 0x10	; 16
 458:	32 e0       	ldi	r19, 0x02	; 2
 45a:	f7 01       	movw	r30, r14
 45c:	a7 fe       	sbrs	r10, 7
 45e:	08 c0       	rjmp	.+16     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 460:	60 81       	ld	r22, Z
 462:	71 81       	ldd	r23, Z+1	; 0x01
 464:	82 81       	ldd	r24, Z+2	; 0x02
 466:	93 81       	ldd	r25, Z+3	; 0x03
 468:	a7 01       	movw	r20, r14
 46a:	4c 5f       	subi	r20, 0xFC	; 252
 46c:	5f 4f       	sbci	r21, 0xFF	; 255
 46e:	07 c0       	rjmp	.+14     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 470:	60 81       	ld	r22, Z
 472:	71 81       	ldd	r23, Z+1	; 0x01
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	a7 01       	movw	r20, r14
 47a:	4e 5f       	subi	r20, 0xFE	; 254
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	7a 01       	movw	r14, r20
 480:	ae 01       	movw	r20, r28
 482:	4f 5f       	subi	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	0e 94 73 05 	call	0xae6	; 0xae6 <__ultoa_invert>
 48a:	48 2e       	mov	r4, r24
 48c:	5c 85       	ldd	r21, Y+12	; 0x0c
 48e:	45 1a       	sub	r4, r21
 490:	8a 2d       	mov	r24, r10
 492:	8f 77       	andi	r24, 0x7F	; 127
 494:	38 2e       	mov	r3, r24
 496:	36 fe       	sbrs	r3, 6
 498:	0d c0       	rjmp	.+26     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 49a:	93 2d       	mov	r25, r3
 49c:	9e 7f       	andi	r25, 0xFE	; 254
 49e:	a9 2e       	mov	r10, r25
 4a0:	4b 14       	cp	r4, r11
 4a2:	58 f4       	brcc	.+22     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4a4:	34 fe       	sbrs	r3, 4
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4a8:	32 fc       	sbrc	r3, 2
 4aa:	09 c0       	rjmp	.+18     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ac:	a3 2d       	mov	r26, r3
 4ae:	ae 7e       	andi	r26, 0xEE	; 238
 4b0:	aa 2e       	mov	r10, r26
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	14 2d       	mov	r17, r4
 4b6:	a3 2c       	mov	r10, r3
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4ba:	14 2d       	mov	r17, r4
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4be:	1b 2d       	mov	r17, r11
 4c0:	a4 fe       	sbrs	r10, 4
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4c4:	fe 01       	movw	r30, r28
 4c6:	e4 0d       	add	r30, r4
 4c8:	f1 1d       	adc	r31, r1
 4ca:	80 81       	ld	r24, Z
 4cc:	80 33       	cpi	r24, 0x30	; 48
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d0:	ea 2d       	mov	r30, r10
 4d2:	e9 7e       	andi	r30, 0xE9	; 233
 4d4:	ae 2e       	mov	r10, r30
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4d8:	a2 fe       	sbrs	r10, 2
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4dc:	1e 5f       	subi	r17, 0xFE	; 254
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e0:	8a 2d       	mov	r24, r10
 4e2:	86 78       	andi	r24, 0x86	; 134
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e6:	1f 5f       	subi	r17, 0xFF	; 255
 4e8:	a3 fc       	sbrc	r10, 3
 4ea:	11 c0       	rjmp	.+34     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 4ec:	a0 fe       	sbrs	r10, 0
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4f0:	10 17       	cp	r17, r16
 4f2:	88 f4       	brcc	.+34     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 4f4:	04 0d       	add	r16, r4
 4f6:	b0 2e       	mov	r11, r16
 4f8:	b1 1a       	sub	r11, r17
 4fa:	0e c0       	rjmp	.+28     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 4fc:	10 17       	cp	r17, r16
 4fe:	60 f4       	brcc	.+24     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 500:	b6 01       	movw	r22, r12
 502:	80 e2       	ldi	r24, 0x20	; 32
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 50a:	1f 5f       	subi	r17, 0xFF	; 255
 50c:	f7 cf       	rjmp	.-18     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 50e:	10 17       	cp	r17, r16
 510:	18 f4       	brcc	.+6      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 512:	01 1b       	sub	r16, r17
 514:	02 c0       	rjmp	.+4      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 516:	b4 2c       	mov	r11, r4
 518:	00 e0       	ldi	r16, 0x00	; 0
 51a:	a4 fe       	sbrs	r10, 4
 51c:	10 c0       	rjmp	.+32     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 51e:	b6 01       	movw	r22, r12
 520:	80 e3       	ldi	r24, 0x30	; 48
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 528:	a2 fe       	sbrs	r10, 2
 52a:	17 c0       	rjmp	.+46     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 52c:	a1 fc       	sbrc	r10, 1
 52e:	03 c0       	rjmp	.+6      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 530:	88 e7       	ldi	r24, 0x78	; 120
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 536:	88 e5       	ldi	r24, 0x58	; 88
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	b6 01       	movw	r22, r12
 53c:	0c c0       	rjmp	.+24     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 53e:	8a 2d       	mov	r24, r10
 540:	86 78       	andi	r24, 0x86	; 134
 542:	59 f0       	breq	.+22     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 544:	a1 fe       	sbrs	r10, 1
 546:	02 c0       	rjmp	.+4      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 548:	8b e2       	ldi	r24, 0x2B	; 43
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	a7 fc       	sbrc	r10, 7
 550:	8d e2       	ldi	r24, 0x2D	; 45
 552:	b6 01       	movw	r22, r12
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 55a:	4b 14       	cp	r4, r11
 55c:	38 f4       	brcc	.+14     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 55e:	b6 01       	movw	r22, r12
 560:	80 e3       	ldi	r24, 0x30	; 48
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 568:	ba 94       	dec	r11
 56a:	f7 cf       	rjmp	.-18     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 56c:	4a 94       	dec	r4
 56e:	e1 e0       	ldi	r30, 0x01	; 1
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	ec 0f       	add	r30, r28
 574:	fd 1f       	adc	r31, r29
 576:	e4 0d       	add	r30, r4
 578:	f1 1d       	adc	r31, r1
 57a:	80 81       	ld	r24, Z
 57c:	b6 01       	movw	r22, r12
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 584:	41 10       	cpse	r4, r1
 586:	f2 cf       	rjmp	.-28     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 588:	00 23       	and	r16, r16
 58a:	09 f4       	brne	.+2      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 58c:	30 ce       	rjmp	.-928    	; 0x1ee <vfprintf+0x5e>
 58e:	b6 01       	movw	r22, r12
 590:	80 e2       	ldi	r24, 0x20	; 32
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 92 06 	call	0xd24	; 0xd24 <fputc>
 598:	01 50       	subi	r16, 0x01	; 1
 59a:	f6 cf       	rjmp	.-20     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 59c:	f6 01       	movw	r30, r12
 59e:	87 81       	ldd	r24, Z+7	; 0x07
 5a0:	90 85       	ldd	r25, Z+8	; 0x08
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	62 96       	adiw	r28, 0x12	; 18
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	8f 90       	pop	r8
 5cc:	7f 90       	pop	r7
 5ce:	6f 90       	pop	r6
 5d0:	4f 90       	pop	r4
 5d2:	3f 90       	pop	r3
 5d4:	2f 90       	pop	r2
 5d6:	08 95       	ret

Disassembly of section .text.avrlibc:

00001346 <strnlen>:
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	6b 01       	movw	r12, r22
    134e:	e8 2e       	mov	r14, r24
    1350:	a8 2f       	mov	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	41 15       	cp	r20, r1
    1356:	51 05       	cpc	r21, r1
    1358:	31 f4       	brne	.+12     	; 0x1366 <strnlen+0x20>
    135a:	8c 19       	sub	r24, r12
    135c:	9d 09       	sbc	r25, r13
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	08 95       	ret
    1366:	fc 01       	movw	r30, r24
    1368:	24 91       	lpm	r18, Z
    136a:	a7 fd       	sbrc	r26, 7
    136c:	20 81       	ld	r18, Z
    136e:	22 23       	and	r18, r18
    1370:	a1 f3       	breq	.-24     	; 0x135a <strnlen+0x14>
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	a1 1d       	adc	r26, r1
    1376:	41 50       	subi	r20, 0x01	; 1
    1378:	51 09       	sbc	r21, r1
    137a:	ec cf       	rjmp	.-40     	; 0x1354 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000d24 <fputc>:
 d24:	0f 93       	push	r16
 d26:	1f 93       	push	r17
 d28:	cf 93       	push	r28
 d2a:	df 93       	push	r29
 d2c:	fb 01       	movw	r30, r22
 d2e:	24 81       	ldd	r18, Z+4	; 0x04
 d30:	21 fd       	sbrc	r18, 1
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <fputc+0x16>
 d34:	8f ef       	ldi	r24, 0xFF	; 255
 d36:	9f ef       	ldi	r25, 0xFF	; 255
 d38:	2c c0       	rjmp	.+88     	; 0xd92 <fputc+0x6e>
 d3a:	22 ff       	sbrs	r18, 2
 d3c:	16 c0       	rjmp	.+44     	; 0xd6a <fputc+0x46>
 d3e:	47 81       	ldd	r20, Z+7	; 0x07
 d40:	50 85       	ldd	r21, Z+8	; 0x08
 d42:	25 81       	ldd	r18, Z+5	; 0x05
 d44:	36 81       	ldd	r19, Z+6	; 0x06
 d46:	42 17       	cp	r20, r18
 d48:	53 07       	cpc	r21, r19
 d4a:	44 f4       	brge	.+16     	; 0xd5c <fputc+0x38>
 d4c:	a0 81       	ld	r26, Z
 d4e:	b1 81       	ldd	r27, Z+1	; 0x01
 d50:	9d 01       	movw	r18, r26
 d52:	2f 5f       	subi	r18, 0xFF	; 255
 d54:	3f 4f       	sbci	r19, 0xFF	; 255
 d56:	31 83       	std	Z+1, r19	; 0x01
 d58:	20 83       	st	Z, r18
 d5a:	8c 93       	st	X, r24
 d5c:	27 81       	ldd	r18, Z+7	; 0x07
 d5e:	30 85       	ldd	r19, Z+8	; 0x08
 d60:	2f 5f       	subi	r18, 0xFF	; 255
 d62:	3f 4f       	sbci	r19, 0xFF	; 255
 d64:	30 87       	std	Z+8, r19	; 0x08
 d66:	27 83       	std	Z+7, r18	; 0x07
 d68:	14 c0       	rjmp	.+40     	; 0xd92 <fputc+0x6e>
 d6a:	8b 01       	movw	r16, r22
 d6c:	ec 01       	movw	r28, r24
 d6e:	fb 01       	movw	r30, r22
 d70:	01 84       	ldd	r0, Z+9	; 0x09
 d72:	f2 85       	ldd	r31, Z+10	; 0x0a
 d74:	e0 2d       	mov	r30, r0
 d76:	09 95       	icall
 d78:	89 2b       	or	r24, r25
 d7a:	e1 f6       	brne	.-72     	; 0xd34 <fputc+0x10>
 d7c:	d8 01       	movw	r26, r16
 d7e:	17 96       	adiw	r26, 0x07	; 7
 d80:	8d 91       	ld	r24, X+
 d82:	9c 91       	ld	r25, X
 d84:	18 97       	sbiw	r26, 0x08	; 8
 d86:	01 96       	adiw	r24, 0x01	; 1
 d88:	18 96       	adiw	r26, 0x08	; 8
 d8a:	9c 93       	st	X, r25
 d8c:	8e 93       	st	-X, r24
 d8e:	17 97       	sbiw	r26, 0x07	; 7
 d90:	ce 01       	movw	r24, r28
 d92:	df 91       	pop	r29
 d94:	cf 91       	pop	r28
 d96:	1f 91       	pop	r17
 d98:	0f 91       	pop	r16
 d9a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ae6 <__ultoa_invert>:
 ae6:	fa 01       	movw	r30, r20
 ae8:	aa 27       	eor	r26, r26
 aea:	28 30       	cpi	r18, 0x08	; 8
 aec:	51 f1       	breq	.+84     	; 0xb42 <__ultoa_invert+0x5c>
 aee:	20 31       	cpi	r18, 0x10	; 16
 af0:	81 f1       	breq	.+96     	; 0xb52 <__ultoa_invert+0x6c>
 af2:	e8 94       	clt
 af4:	6f 93       	push	r22
 af6:	6e 7f       	andi	r22, 0xFE	; 254
 af8:	6e 5f       	subi	r22, 0xFE	; 254
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	8f 4f       	sbci	r24, 0xFF	; 255
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	af 4f       	sbci	r26, 0xFF	; 255
 b02:	b1 e0       	ldi	r27, 0x01	; 1
 b04:	3e d0       	rcall	.+124    	; 0xb82 <__ultoa_invert+0x9c>
 b06:	b4 e0       	ldi	r27, 0x04	; 4
 b08:	3c d0       	rcall	.+120    	; 0xb82 <__ultoa_invert+0x9c>
 b0a:	67 0f       	add	r22, r23
 b0c:	78 1f       	adc	r23, r24
 b0e:	89 1f       	adc	r24, r25
 b10:	9a 1f       	adc	r25, r26
 b12:	a1 1d       	adc	r26, r1
 b14:	68 0f       	add	r22, r24
 b16:	79 1f       	adc	r23, r25
 b18:	8a 1f       	adc	r24, r26
 b1a:	91 1d       	adc	r25, r1
 b1c:	a1 1d       	adc	r26, r1
 b1e:	6a 0f       	add	r22, r26
 b20:	71 1d       	adc	r23, r1
 b22:	81 1d       	adc	r24, r1
 b24:	91 1d       	adc	r25, r1
 b26:	a1 1d       	adc	r26, r1
 b28:	20 d0       	rcall	.+64     	; 0xb6a <__ultoa_invert+0x84>
 b2a:	09 f4       	brne	.+2      	; 0xb2e <__ultoa_invert+0x48>
 b2c:	68 94       	set
 b2e:	3f 91       	pop	r19
 b30:	2a e0       	ldi	r18, 0x0A	; 10
 b32:	26 9f       	mul	r18, r22
 b34:	11 24       	eor	r1, r1
 b36:	30 19       	sub	r19, r0
 b38:	30 5d       	subi	r19, 0xD0	; 208
 b3a:	31 93       	st	Z+, r19
 b3c:	de f6       	brtc	.-74     	; 0xaf4 <__ultoa_invert+0xe>
 b3e:	cf 01       	movw	r24, r30
 b40:	08 95       	ret
 b42:	46 2f       	mov	r20, r22
 b44:	47 70       	andi	r20, 0x07	; 7
 b46:	40 5d       	subi	r20, 0xD0	; 208
 b48:	41 93       	st	Z+, r20
 b4a:	b3 e0       	ldi	r27, 0x03	; 3
 b4c:	0f d0       	rcall	.+30     	; 0xb6c <__ultoa_invert+0x86>
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__ultoa_invert+0x5c>
 b50:	f6 cf       	rjmp	.-20     	; 0xb3e <__ultoa_invert+0x58>
 b52:	46 2f       	mov	r20, r22
 b54:	4f 70       	andi	r20, 0x0F	; 15
 b56:	40 5d       	subi	r20, 0xD0	; 208
 b58:	4a 33       	cpi	r20, 0x3A	; 58
 b5a:	18 f0       	brcs	.+6      	; 0xb62 <__ultoa_invert+0x7c>
 b5c:	49 5d       	subi	r20, 0xD9	; 217
 b5e:	31 fd       	sbrc	r19, 1
 b60:	40 52       	subi	r20, 0x20	; 32
 b62:	41 93       	st	Z+, r20
 b64:	02 d0       	rcall	.+4      	; 0xb6a <__ultoa_invert+0x84>
 b66:	a9 f7       	brne	.-22     	; 0xb52 <__ultoa_invert+0x6c>
 b68:	ea cf       	rjmp	.-44     	; 0xb3e <__ultoa_invert+0x58>
 b6a:	b4 e0       	ldi	r27, 0x04	; 4
 b6c:	a6 95       	lsr	r26
 b6e:	97 95       	ror	r25
 b70:	87 95       	ror	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0x86>
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	61 05       	cpc	r22, r1
 b7e:	71 05       	cpc	r23, r1
 b80:	08 95       	ret
 b82:	9b 01       	movw	r18, r22
 b84:	ac 01       	movw	r20, r24
 b86:	0a 2e       	mov	r0, r26
 b88:	06 94       	lsr	r0
 b8a:	57 95       	ror	r21
 b8c:	47 95       	ror	r20
 b8e:	37 95       	ror	r19
 b90:	27 95       	ror	r18
 b92:	ba 95       	dec	r27
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__ultoa_invert+0xa2>
 b96:	62 0f       	add	r22, r18
 b98:	73 1f       	adc	r23, r19
 b9a:	84 1f       	adc	r24, r20
 b9c:	95 1f       	adc	r25, r21
 b9e:	a0 1d       	adc	r26, r0
 ba0:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000012a2 <__prologue_saves__>:
    12a2:	2f 92       	push	r2
    12a4:	3f 92       	push	r3
    12a6:	4f 92       	push	r4
    12a8:	5f 92       	push	r5
    12aa:	6f 92       	push	r6
    12ac:	7f 92       	push	r7
    12ae:	8f 92       	push	r8
    12b0:	9f 92       	push	r9
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	ca 1b       	sub	r28, r26
    12cc:	db 0b       	sbc	r29, r27
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000137c <__epilogue_restores__>:
    137c:	2a 88       	ldd	r2, Y+18	; 0x12
    137e:	39 88       	ldd	r3, Y+17	; 0x11
    1380:	48 88       	ldd	r4, Y+16	; 0x10
    1382:	5f 84       	ldd	r5, Y+15	; 0x0f
    1384:	6e 84       	ldd	r6, Y+14	; 0x0e
    1386:	7d 84       	ldd	r7, Y+13	; 0x0d
    1388:	8c 84       	ldd	r8, Y+12	; 0x0c
    138a:	9b 84       	ldd	r9, Y+11	; 0x0b
    138c:	aa 84       	ldd	r10, Y+10	; 0x0a
    138e:	b9 84       	ldd	r11, Y+9	; 0x09
    1390:	c8 84       	ldd	r12, Y+8	; 0x08
    1392:	df 80       	ldd	r13, Y+7	; 0x07
    1394:	ee 80       	ldd	r14, Y+6	; 0x06
    1396:	fd 80       	ldd	r15, Y+5	; 0x05
    1398:	0c 81       	ldd	r16, Y+4	; 0x04
    139a:	1b 81       	ldd	r17, Y+3	; 0x03
    139c:	aa 81       	ldd	r26, Y+2	; 0x02
    139e:	b9 81       	ldd	r27, Y+1	; 0x01
    13a0:	ce 0f       	add	r28, r30
    13a2:	d1 1d       	adc	r29, r1
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	ed 01       	movw	r28, r26
    13b0:	08 95       	ret
