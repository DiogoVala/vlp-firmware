
vlp-firmware_atmel_m.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ce8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000ce8  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f93  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ca4  00000000  00000000  00003ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e78  00000000  00000000  00004b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000458  00000000  00000000  000059dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  00005e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dec  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00006fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000c26  00000c26  00000cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000714c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.buildLEDCommand 0000005a  0000080e  0000080e  000008c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 00000033  00000179  00000179  0000022d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.sendCommand 00000040  00000906  00000906  000009ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.bitsToByteArray 000000b0  00000650  00000650  00000704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendBitStream 00000082  0000078c  0000078c  00000840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.byte_count 00000001  00800222  00800222  00000ce8  2**0
                  ALLOC
 20 .bss.bitstream 000000f0  00800103  00800103  00000ce8  2**0
                  ALLOC
 21 .bss.bitstream_byte_array 0000001e  008001f3  008001f3  00000ce8  2**0
                  ALLOC
 22 .bss.TX_command_array 00000007  0080021b  0080021b  00000ce8  2**0
                  ALLOC
 23 .text.getLedID 00000006  00000be4  00000be4  00000c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.setLedID 00000006  00000bea  00000bea  00000c9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.getLedState 00000006  00000bf0  00000bf0  00000ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.setLedState 00000006  00000bf6  00000bf6  00000caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.getLedMode 00000006  00000bfc  00000bfc  00000cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.setLedMode 00000006  00000c02  00000c02  00000cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.getLedIntensity 00000006  00000c08  00000c08  00000cbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.setLedIntensity 00000006  00000c0e  00000c0e  00000cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.getLedFrequency 00000008  00000bcc  00000bcc  00000c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.setLedFrequency 00000008  00000bd4  00000bd4  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.getLedDutyCycle 00000006  00000c14  00000c14  00000cc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.setLedDutyCycle 00000006  00000c1a  00000c1a  00000cce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 00000067  000000ce  000000ce  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.main    000001c8  00000488  00000488  0000053c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.nrf24_transmitSync 00000022  00000a54  00000a54  00000b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.nrf24_ce_digitalWrite 00000014  00000b46  00000b46  00000bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.nrf24_csn_digitalWrite 00000014  00000b5a  00000b5a  00000c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.nrf24_getStatus 00000022  00000a76  00000a76  00000b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.nrf24_isSending 00000010  00000b92  00000b92  00000c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.nrf24_configRegister 00000036  000009f2  000009f2  00000aa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.nrf24_powerUpTx 00000012  00000b6e  00000b6e  00000c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.nrf24_powerUpRx 00000038  00000982  00000982  00000a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .progmemx.data 00000044  00000135  00000135  000001e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .text.nrf24_config 0000008c  00000700  00000700  000007b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.nrf24_send 0000005a  00000868  00000868  0000091c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.nrf24_writeRegister 0000003c  00000946  00000946  000009fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.nrf24_rx_address 00000022  00000a98  00000a98  00000b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.nrf24_tx_address 00000020  00000aba  00000aba  00000b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.nrf24_init 00000038  000009ba  000009ba  00000a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .data.nrf24_addr 0000000a  00800211  00000c2a  00000cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 53 .text.uart_init 00000018  00000b18  00000b18  00000bcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart_putc 0000000e  00000ba2  00000ba2  00000c56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart_puts 0000002c  00000a28  00000a28  00000adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.uart_getc 0000000e  00000bb0  00000bb0  00000c64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.avrlibc 00000008  00000bdc  00000bdc  00000c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.avrlibc 0000000e  00000bbe  00000bbe  00000c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc 000002dc  000001ac  000001ac  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc 00000012  00000b80  00000b80  00000c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc 00000006  00000c20  00000c20  00000cd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.libgcc.mul 00000020  00000ada  00000ada  00000b8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.div 00000044  000008c2  000008c2  00000976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.mul 00000016  00000b30  00000b30  00000be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc.mul 0000001e  00000afa  00000afa  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
   8:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
   c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  10:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  14:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  18:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  1c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  20:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  24:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  28:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  2c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  30:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  34:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  38:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  3c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  40:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  44:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  48:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  4c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  50:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  54:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  58:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  5c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  60:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>
  64:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 11       	cpse	r16, r2
  6c:	80 02       	muls	r24, r16
  6e:	11 02       	muls	r17, r17
  70:	1b 00       	.word	0x001b	; ????
  72:	0c 2a       	or	r0, r28
  74:	02 1b       	sub	r16, r18
  76:	02 23       	and	r16, r18
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 44 02 	call	0x488	; 0x488 <main>
  c6:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000c26 <__bad_interrupt>:
 c26:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.buildLEDCommand:

0000080e <buildLEDCommand>:
	}
	uart_puts("Sent!\r\n");
}

/* Builds the command array with the led params to send via RF */
void buildLEDCommand(led_t* ledp) {
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	8c 01       	movw	r16, r24
	
	memset(TX_command_array, '\0', COMMAND_LENGTH);
 818:	cb e1       	ldi	r28, 0x1B	; 27
 81a:	d2 e0       	ldi	r29, 0x02	; 2
 81c:	87 e0       	ldi	r24, 0x07	; 7
 81e:	fe 01       	movw	r30, r28
 820:	11 92       	st	Z+, r1
 822:	8a 95       	dec	r24
 824:	e9 f7       	brne	.-6      	; 0x820 <buildLEDCommand+0x12>
	
    /* Array of bytes to send to RF module */
	
    TX_command_array[ID] = getLedID(ledp);
 826:	c8 01       	movw	r24, r16
 828:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <getLedID>
 82c:	88 83       	st	Y, r24
    TX_command_array[STATE] = getLedState(ledp);
 82e:	c8 01       	movw	r24, r16
 830:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <getLedState>
 834:	89 83       	std	Y+1, r24	; 0x01
    TX_command_array[MODE] = getLedMode(ledp);
 836:	c8 01       	movw	r24, r16
 838:	0e 94 fe 05 	call	0xbfc	; 0xbfc <getLedMode>
 83c:	8a 83       	std	Y+2, r24	; 0x02
    TX_command_array[INTENSITY] = getLedIntensity(ledp);
 83e:	c8 01       	movw	r24, r16
 840:	0e 94 04 06 	call	0xc08	; 0xc08 <getLedIntensity>
 844:	8b 83       	std	Y+3, r24	; 0x03
    TX_command_array[FREQUENCY_LB] = (uint8_t) (getLedFrequency(ledp) & 0x00FF);
 846:	c8 01       	movw	r24, r16
 848:	0e 94 e6 05 	call	0xbcc	; 0xbcc <getLedFrequency>
 84c:	8c 83       	std	Y+4, r24	; 0x04
    TX_command_array[FREQUENCY_HB] = (uint8_t) ((getLedFrequency(ledp) >> 8 ) & 0x00FF);
 84e:	c8 01       	movw	r24, r16
 850:	0e 94 e6 05 	call	0xbcc	; 0xbcc <getLedFrequency>
 854:	9d 83       	std	Y+5, r25	; 0x05
    TX_command_array[DUTYCYCLE] = getLedDutyCycle(ledp);	
 856:	c8 01       	movw	r24, r16
 858:	0e 94 0a 06 	call	0xc14	; 0xc14 <getLedDutyCycle>
 85c:	8e 83       	std	Y+6, r24	; 0x06
}
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

Disassembly of section .text.sendCommand:

00000906 <sendCommand>:
    nrf24_send(TX_command_array);
	while(nrf24_isSending());
}

/* Builds and sends command with led params */
void sendCommand(led_t* ledp) {
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	ec 01       	movw	r28, r24
	uart_puts("\r\nSending Command... ");
 90c:	69 e7       	ldi	r22, 0x79	; 121
 90e:	71 e0       	ldi	r23, 0x01	; 1
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
    buildLEDCommand(ledp);
 916:	ce 01       	movw	r24, r28
 918:	0e 94 07 04 	call	0x80e	; 0x80e <buildLEDCommand>

	for(uint8_t i=0; i<10; i++)
 91c:	c0 e0       	ldi	r28, 0x00	; 0
 91e:	09 c0       	rjmp	.+18     	; 0x932 <sendCommand+0x2c>
	{
		nrf24_send(TX_command_array);
 920:	8b e1       	ldi	r24, 0x1B	; 27
 922:	92 e0       	ldi	r25, 0x02	; 2
 924:	0e 94 34 04 	call	0x868	; 0x868 <nrf24_send>
		while(nrf24_isSending());
 928:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_isSending>
 92c:	81 11       	cpse	r24, r1
 92e:	fc cf       	rjmp	.-8      	; 0x928 <sendCommand+0x22>
/* Builds and sends command with led params */
void sendCommand(led_t* ledp) {
	uart_puts("\r\nSending Command... ");
    buildLEDCommand(ledp);

	for(uint8_t i=0; i<10; i++)
 930:	cf 5f       	subi	r28, 0xFF	; 255
 932:	ca 30       	cpi	r28, 0x0A	; 10
 934:	a8 f3       	brcs	.-22     	; 0x920 <sendCommand+0x1a>
	{
		nrf24_send(TX_command_array);
		while(nrf24_isSending());
	}
	uart_puts("Sent!\r\n");
 936:	6f e8       	ldi	r22, 0x8F	; 143
 938:	71 e0       	ldi	r23, 0x01	; 1
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
}
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	08 95       	ret

Disassembly of section .text.bitsToByteArray:

00000650 <bitsToByteArray>:
    TX_command_array[FREQUENCY_HB] = (uint8_t) ((getLedFrequency(ledp) >> 8 ) & 0x00FF);
    TX_command_array[DUTYCYCLE] = getLedDutyCycle(ledp);	
}

/* Transforms an array of bits to an array of bytes */
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize) {
 650:	fc 01       	movw	r30, r24

    uint8_t index = 0;
    uint8_t newByte = 0;
 652:	40 e0       	ldi	r20, 0x00	; 0

    for (index = 0; index < bitstreamSize; index++) {
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	2a c0       	rjmp	.+84     	; 0x6ac <bitsToByteArray+0x5c>
        newByte = newByte << 1 | bitstream[index];
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	df 01       	movw	r26, r30
 660:	a2 0f       	add	r26, r18
 662:	b1 1d       	adc	r27, r1
 664:	8c 91       	ld	r24, X
 666:	48 2b       	or	r20, r24
        if (index % 7 == 0 && index != 0) {
 668:	95 e2       	ldi	r25, 0x25	; 37
 66a:	29 9f       	mul	r18, r25
 66c:	31 2d       	mov	r19, r1
 66e:	11 24       	eor	r1, r1
 670:	92 2f       	mov	r25, r18
 672:	93 1b       	sub	r25, r19
 674:	96 95       	lsr	r25
 676:	93 0f       	add	r25, r19
 678:	96 95       	lsr	r25
 67a:	96 95       	lsr	r25
 67c:	39 2f       	mov	r19, r25
 67e:	33 0f       	add	r19, r19
 680:	33 0f       	add	r19, r19
 682:	33 0f       	add	r19, r19
 684:	39 1b       	sub	r19, r25
 686:	23 13       	cpse	r18, r19
 688:	10 c0       	rjmp	.+32     	; 0x6aa <bitsToByteArray+0x5a>
 68a:	22 23       	and	r18, r18
 68c:	71 f0       	breq	.+28     	; 0x6aa <bitsToByteArray+0x5a>
            bitstream_byte_array[index / 8] = newByte;
 68e:	a2 2f       	mov	r26, r18
 690:	a6 95       	lsr	r26
 692:	a6 95       	lsr	r26
 694:	a6 95       	lsr	r26
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	ad 50       	subi	r26, 0x0D	; 13
 69a:	be 4f       	sbci	r27, 0xFE	; 254
 69c:	4c 93       	st	X, r20
            byte_count++;
 69e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <byte_count>
 6a2:	8f 5f       	subi	r24, 0xFF	; 255
 6a4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <byte_count>
            newByte = 0;
 6a8:	40 e0       	ldi	r20, 0x00	; 0
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize) {

    uint8_t index = 0;
    uint8_t newByte = 0;

    for (index = 0; index < bitstreamSize; index++) {
 6aa:	2f 5f       	subi	r18, 0xFF	; 255
 6ac:	26 17       	cp	r18, r22
 6ae:	a0 f2       	brcs	.-88     	; 0x658 <bitsToByteArray+0x8>
            bitstream_byte_array[index / 8] = newByte;
            byte_count++;
            newByte = 0;
        }
    }
    if (index % 7 != 0) {
 6b0:	85 e2       	ldi	r24, 0x25	; 37
 6b2:	28 9f       	mul	r18, r24
 6b4:	91 2d       	mov	r25, r1
 6b6:	11 24       	eor	r1, r1
 6b8:	82 2f       	mov	r24, r18
 6ba:	89 1b       	sub	r24, r25
 6bc:	86 95       	lsr	r24
 6be:	89 0f       	add	r24, r25
 6c0:	86 95       	lsr	r24
 6c2:	86 95       	lsr	r24
 6c4:	98 2f       	mov	r25, r24
 6c6:	99 0f       	add	r25, r25
 6c8:	99 0f       	add	r25, r25
 6ca:	99 0f       	add	r25, r25
 6cc:	98 1b       	sub	r25, r24
 6ce:	29 17       	cp	r18, r25
 6d0:	b1 f0       	breq	.+44     	; 0x6fe <bitsToByteArray+0xae>
        /* Shift remaining bits to the left */
        bitstream_byte_array[index / 8] = newByte << (8 - (index % 8));
 6d2:	e2 2f       	mov	r30, r18
 6d4:	e6 95       	lsr	r30
 6d6:	e6 95       	lsr	r30
 6d8:	e6 95       	lsr	r30
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	27 70       	andi	r18, 0x07	; 7
 6de:	88 e0       	ldi	r24, 0x08	; 8
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	82 1b       	sub	r24, r18
 6e4:	91 09       	sbc	r25, r1
 6e6:	ed 50       	subi	r30, 0x0D	; 13
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <bitsToByteArray+0x9e>
 6ec:	44 0f       	add	r20, r20
 6ee:	8a 95       	dec	r24
 6f0:	ea f7       	brpl	.-6      	; 0x6ec <bitsToByteArray+0x9c>
 6f2:	40 83       	st	Z, r20
        byte_count++;
 6f4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <byte_count>
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <byte_count>
 6fe:	08 95       	ret

Disassembly of section .text.sendBitStream:

0000078c <sendBitStream>:
void updateLED(led_t* ledp);
void byteArrayToBits(uint8_t byte_array[], uint8_t bitstreamSize);
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize);

/* Builds and sends the bitstream via RF*/
void sendBitStream(uint8_t bitstream[], uint8_t bitstreamSize, led_t* ledp) {
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	7c 01       	movw	r14, r24
 798:	c6 2f       	mov	r28, r22
 79a:	8a 01       	movw	r16, r20
	uart_puts("\r\nSending bitstream.");
 79c:	67 e9       	ldi	r22, 0x97	; 151
 79e:	71 e0       	ldi	r23, 0x01	; 1
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
    bitsToByteArray(bitstream, bitstreamSize);
 7a6:	6c 2f       	mov	r22, r28
 7a8:	c7 01       	movw	r24, r14
 7aa:	0e 94 28 03 	call	0x650	; 0x650 <bitsToByteArray>
    memset(TX_command_array, '\0', sizeof (TX_command_array));
 7ae:	eb e1       	ldi	r30, 0x1B	; 27
 7b0:	f2 e0       	ldi	r31, 0x02	; 2
 7b2:	87 e0       	ldi	r24, 0x07	; 7
 7b4:	df 01       	movw	r26, r30
 7b6:	1d 92       	st	X+, r1
 7b8:	8a 95       	dec	r24
 7ba:	e9 f7       	brne	.-6      	; 0x7b6 <sendBitStream+0x2a>
    TX_command_array[ID] = ledp->ledID;
 7bc:	d8 01       	movw	r26, r16
 7be:	8c 91       	ld	r24, X
 7c0:	80 83       	st	Z, r24
    TX_command_array[IDENTIFIER] = 0xFF; /* To indicate bitstream */
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	81 83       	std	Z+1, r24	; 0x01
    TX_command_array[BIT_COUNT] = bitstreamSize;
 7c6:	c2 83       	std	Z+2, r28	; 0x02
    for (uint8_t i = BITSTREAM; i < (byte_count + byte_count); i++) {
 7c8:	43 e0       	ldi	r20, 0x03	; 3
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <sendBitStream+0x52>
        TX_command_array[i] = bitstream_byte_array[i - BITSTREAM];
 7cc:	f9 01       	movw	r30, r18
 7ce:	e0 51       	subi	r30, 0x10	; 16
 7d0:	fe 4f       	sbci	r31, 0xFE	; 254
 7d2:	80 81       	ld	r24, Z
 7d4:	f9 01       	movw	r30, r18
 7d6:	e5 5e       	subi	r30, 0xE5	; 229
 7d8:	fd 4f       	sbci	r31, 0xFD	; 253
 7da:	80 83       	st	Z, r24
    bitsToByteArray(bitstream, bitstreamSize);
    memset(TX_command_array, '\0', sizeof (TX_command_array));
    TX_command_array[ID] = ledp->ledID;
    TX_command_array[IDENTIFIER] = 0xFF; /* To indicate bitstream */
    TX_command_array[BIT_COUNT] = bitstreamSize;
    for (uint8_t i = BITSTREAM; i < (byte_count + byte_count); i++) {
 7dc:	4f 5f       	subi	r20, 0xFF	; 255
 7de:	24 2f       	mov	r18, r20
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <byte_count>
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	6c f3       	brlt	.-38     	; 0x7cc <sendBitStream+0x40>
        TX_command_array[i] = bitstream_byte_array[i - BITSTREAM];
    }
    nrf24_send(TX_command_array);
 7f2:	8b e1       	ldi	r24, 0x1B	; 27
 7f4:	92 e0       	ldi	r25, 0x02	; 2
 7f6:	0e 94 34 04 	call	0x868	; 0x868 <nrf24_send>
	while(nrf24_isSending());
 7fa:	0e 94 c9 05 	call	0xb92	; 0xb92 <nrf24_isSending>
 7fe:	81 11       	cpse	r24, r1
 800:	fc cf       	rjmp	.-8      	; 0x7fa <sendBitStream+0x6e>
}
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	08 95       	ret

Disassembly of section .text.getLedID:

00000be4 <getLedID>:
    setLedDutyCycle(ledp, LED_DFLT_DUTYCYCLE);
}

uint8_t getLedID(led_t *ledp) {
    return ledp->ledID;
}
 be4:	fc 01       	movw	r30, r24
 be6:	80 81       	ld	r24, Z
 be8:	08 95       	ret

Disassembly of section .text.setLedID:

00000bea <setLedID>:

void setLedID(led_t *ledp, uint8_t ledID) {
    ledp->ledID = ledID;
 bea:	fc 01       	movw	r30, r24
 bec:	60 83       	st	Z, r22
 bee:	08 95       	ret

Disassembly of section .text.getLedState:

00000bf0 <getLedState>:
}

uint8_t getLedState(led_t *ledp) {
    return ledp->ledState;
}
 bf0:	fc 01       	movw	r30, r24
 bf2:	81 81       	ldd	r24, Z+1	; 0x01
 bf4:	08 95       	ret

Disassembly of section .text.setLedState:

00000bf6 <setLedState>:

void setLedState(led_t *ledp, uint8_t ledState) {
    ledp->ledState = ledState;
 bf6:	fc 01       	movw	r30, r24
 bf8:	61 83       	std	Z+1, r22	; 0x01
 bfa:	08 95       	ret

Disassembly of section .text.getLedMode:

00000bfc <getLedMode>:
}

uint8_t getLedMode(led_t *ledp) {
    return ledp->ledMode;
}
 bfc:	fc 01       	movw	r30, r24
 bfe:	82 81       	ldd	r24, Z+2	; 0x02
 c00:	08 95       	ret

Disassembly of section .text.setLedMode:

00000c02 <setLedMode>:

void setLedMode(led_t *ledp, led_mode_t ledMode) {
    ledp->ledMode = ledMode;
 c02:	fc 01       	movw	r30, r24
 c04:	62 83       	std	Z+2, r22	; 0x02
 c06:	08 95       	ret

Disassembly of section .text.getLedIntensity:

00000c08 <getLedIntensity>:
}

uint8_t getLedIntensity(led_t *ledp) {
    return ledp->ledIntensity;
}
 c08:	fc 01       	movw	r30, r24
 c0a:	83 81       	ldd	r24, Z+3	; 0x03
 c0c:	08 95       	ret

Disassembly of section .text.setLedIntensity:

00000c0e <setLedIntensity>:

void setLedIntensity(led_t *ledp, uint8_t ledIntensity) {
    ledp->ledIntensity = ledIntensity;
 c0e:	fc 01       	movw	r30, r24
 c10:	63 83       	std	Z+3, r22	; 0x03
 c12:	08 95       	ret

Disassembly of section .text.getLedFrequency:

00000bcc <getLedFrequency>:
}

uint16_t getLedFrequency(led_t *ledp) {
    return ledp->ledFrequency;
}
 bcc:	fc 01       	movw	r30, r24
 bce:	84 81       	ldd	r24, Z+4	; 0x04
 bd0:	95 81       	ldd	r25, Z+5	; 0x05
 bd2:	08 95       	ret

Disassembly of section .text.setLedFrequency:

00000bd4 <setLedFrequency>:

void setLedFrequency(led_t *ledp, uint16_t ledFrequency) {
    ledp->ledFrequency = ledFrequency;
 bd4:	fc 01       	movw	r30, r24
 bd6:	75 83       	std	Z+5, r23	; 0x05
 bd8:	64 83       	std	Z+4, r22	; 0x04
 bda:	08 95       	ret

Disassembly of section .text.getLedDutyCycle:

00000c14 <getLedDutyCycle>:
}

uint8_t getLedDutyCycle(led_t *ledp) {
    return ledp->ledDutyCycle;
}
 c14:	fc 01       	movw	r30, r24
 c16:	86 81       	ldd	r24, Z+6	; 0x06
 c18:	08 95       	ret

Disassembly of section .text.setLedDutyCycle:

00000c1a <setLedDutyCycle>:

void setLedDutyCycle(led_t *ledp, uint8_t ledDutyCycle) {
    ledp->ledDutyCycle = ledDutyCycle;
 c1a:	fc 01       	movw	r30, r24
 c1c:	66 83       	std	Z+6, r22	; 0x06
 c1e:	08 95       	ret

Disassembly of section .text.main:

00000488 <main>:

extern uint8_t bitstream[BITSTREAM_MAX_BITS];



int main() {
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	2f 97       	sbiw	r28, 0x0f	; 15
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
	
	led_t led; /* LED object */

    /* Initialize common modules */
    uart_init();
 49c:	0e 94 8c 05 	call	0xb18	; 0xb18 <uart_init>
    uart_puts("\n\x1b[2J\r"); //Clear screen
 4a0:	6e ec       	ldi	r22, 0xCE	; 206
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
    uart_puts("\r\nInitializing MASTER.");
 4aa:	65 ed       	ldi	r22, 0xD5	; 213
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
}

inline static void spi_master_init(void) {
	SPI_DDR = SPI_DDR | _BV(SPI_SS_NRF24L01) |_BV(SPI_SS_DIGPOTSLAVE) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 4b4:	84 b1       	in	r24, 0x04	; 4
 4b6:	8e 62       	ori	r24, 0x2E	; 46
 4b8:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | 0 | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 4ba:	80 e5       	ldi	r24, 0x50	; 80
 4bc:	8c bd       	out	0x2c, r24	; 44

    spi_master_init();
    nrf24_init();
 4be:	0e 94 dd 04 	call	0x9ba	; 0x9ba <nrf24_init>
    nrf24_config(NRF24_CHANNEL, NRF24_PAYLENGTH);
 4c2:	67 e0       	ldi	r22, 0x07	; 7
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	0e 94 80 03 	call	0x700	; 0x700 <nrf24_config>
    uint8_t bitstreamSize = 0; /* Dynamic size of bitstream */

    uint8_t uart_char;

    bool input_type = false; /* false = normal command ; true = bitstream */
    uart_puts("\r\n\nWaiting command input.");
 4ca:	6c ee       	ldi	r22, 0xEC	; 236
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
	uart_puts("\r\n($ID,State,Mode,Intensity,Freq,Duty,*)\r\n\n");
 4d4:	66 e0       	ldi	r22, 0x06	; 6
 4d6:	71 e0       	ldi	r23, 0x01	; 1
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>

    sei();
 4de:	78 94       	sei
    uint8_t bitstreamIdx = 0;
    uint8_t bitstreamSize = 0; /* Dynamic size of bitstream */

    uint8_t uart_char;

    bool input_type = false; /* false = normal command ; true = bitstream */
 4e0:	f1 2c       	mov	r15, r1

    uint8_t msgBuffer[INPUT_BUFFER_SIZE]; /* Command buffer */
    uint8_t msgbufferIdx = 0; /* Current buffer index */
    uint8_t command_pos = 0; /* What command is being read */

    uint8_t bitstreamIdx = 0;
 4e2:	d1 2c       	mov	r13, r1
    nrf24_config(NRF24_CHANNEL, NRF24_PAYLENGTH);
	

    uint8_t msgBuffer[INPUT_BUFFER_SIZE]; /* Command buffer */
    uint8_t msgbufferIdx = 0; /* Current buffer index */
    uint8_t command_pos = 0; /* What command is being read */
 4e4:	00 e0       	ldi	r16, 0x00	; 0
    nrf24_init();
    nrf24_config(NRF24_CHANNEL, NRF24_PAYLENGTH);
	

    uint8_t msgBuffer[INPUT_BUFFER_SIZE]; /* Command buffer */
    uint8_t msgbufferIdx = 0; /* Current buffer index */
 4e6:	e1 2c       	mov	r14, r1
	uart_puts("\r\n($ID,State,Mode,Intensity,Freq,Duty,*)\r\n\n");

    sei();

    while (1) {
        uart_char = uart_getc();
 4e8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <uart_getc>
 4ec:	18 2f       	mov	r17, r24
        uart_putc(uart_char);
 4ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <uart_putc>
        switch (uart_char) {
 4f2:	1a 32       	cpi	r17, 0x2A	; 42
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <main+0x70>
 4f6:	83 c0       	rjmp	.+262    	; 0x5fe <main+0x176>
 4f8:	30 f4       	brcc	.+12     	; 0x506 <main+0x7e>
 4fa:	1d 30       	cpi	r17, 0x0D	; 13
 4fc:	09 f4       	brne	.+2      	; 0x500 <main+0x78>
 4fe:	8f c0       	rjmp	.+286    	; 0x61e <main+0x196>
 500:	14 32       	cpi	r17, 0x24	; 36
 502:	91 f0       	breq	.+36     	; 0x528 <main+0xa0>
 504:	92 c0       	rjmp	.+292    	; 0x62a <main+0x1a2>
 506:	12 34       	cpi	r17, 0x42	; 66
 508:	29 f0       	breq	.+10     	; 0x514 <main+0x8c>
 50a:	12 36       	cpi	r17, 0x62	; 98
 50c:	19 f0       	breq	.+6      	; 0x514 <main+0x8c>
 50e:	1c 32       	cpi	r17, 0x2C	; 44
 510:	b9 f0       	breq	.+46     	; 0x540 <main+0xb8>
 512:	8b c0       	rjmp	.+278    	; 0x62a <main+0x1a2>

            case 'b': /* Start of bitstream input */
            case 'B':
                memset(bitstream, '\0', BITSTREAM_MAX_BITS);
 514:	80 ef       	ldi	r24, 0xF0	; 240
 516:	e3 e0       	ldi	r30, 0x03	; 3
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	df 01       	movw	r26, r30
 51c:	1d 92       	st	X+, r1
 51e:	8a 95       	dec	r24
 520:	e9 f7       	brne	.-6      	; 0x51c <main+0x94>
                bitstreamIdx = 0;
                input_type = BITSTREAM;
 522:	f1 2c       	mov	r15, r1
        switch (uart_char) {

            case 'b': /* Start of bitstream input */
            case 'B':
                memset(bitstream, '\0', BITSTREAM_MAX_BITS);
                bitstreamIdx = 0;
 524:	d1 2c       	mov	r13, r1
                input_type = BITSTREAM;
                break;
 526:	e0 cf       	rjmp	.-64     	; 0x4e8 <main+0x60>

            case '$': /* Start of command message */
                msgbufferIdx = 0;
                command_pos = 0;
                memset(msgBuffer, 0, INPUT_BUFFER_SIZE);
 528:	fe 01       	movw	r30, r28
 52a:	38 96       	adiw	r30, 0x08	; 8
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	df 01       	movw	r26, r30
 530:	1d 92       	st	X+, r1
 532:	8a 95       	dec	r24
 534:	e9 f7       	brne	.-6      	; 0x530 <main+0xa8>
                input_type = COMMAND;
 536:	ff 24       	eor	r15, r15
 538:	f3 94       	inc	r15
                input_type = BITSTREAM;
                break;

            case '$': /* Start of command message */
                msgbufferIdx = 0;
                command_pos = 0;
 53a:	00 e0       	ldi	r16, 0x00	; 0
                bitstreamIdx = 0;
                input_type = BITSTREAM;
                break;

            case '$': /* Start of command message */
                msgbufferIdx = 0;
 53c:	e1 2c       	mov	r14, r1
                command_pos = 0;
                memset(msgBuffer, 0, INPUT_BUFFER_SIZE);
                input_type = COMMAND;
                break;
 53e:	d4 cf       	rjmp	.-88     	; 0x4e8 <main+0x60>

            case ',': /* Command delimiter*/
                switch (command_pos) {
 540:	02 30       	cpi	r16, 0x02	; 2
 542:	21 f1       	breq	.+72     	; 0x58c <main+0x104>
 544:	28 f4       	brcc	.+10     	; 0x550 <main+0xc8>
 546:	00 23       	and	r16, r16
 548:	49 f0       	breq	.+18     	; 0x55c <main+0xd4>
 54a:	01 30       	cpi	r16, 0x01	; 1
 54c:	99 f0       	breq	.+38     	; 0x574 <main+0xec>
 54e:	4d c0       	rjmp	.+154    	; 0x5ea <main+0x162>
 550:	04 30       	cpi	r16, 0x04	; 4
 552:	a1 f1       	breq	.+104    	; 0x5bc <main+0x134>
 554:	38 f1       	brcs	.+78     	; 0x5a4 <main+0x11c>
 556:	05 30       	cpi	r16, 0x05	; 5
 558:	e9 f1       	breq	.+122    	; 0x5d4 <main+0x14c>
 55a:	47 c0       	rjmp	.+142    	; 0x5ea <main+0x162>
                        /*NOTE: THERE IS NO VERIFICATION OF INPUTS */
                    case 0:
                        setLedID(&led, (uint8_t) atoi((char*) msgBuffer));
 55c:	be 01       	movw	r22, r28
 55e:	68 5f       	subi	r22, 0xF8	; 248
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 568:	68 2f       	mov	r22, r24
 56a:	ce 01       	movw	r24, r28
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	0e 94 f5 05 	call	0xbea	; 0xbea <setLedID>
                        break;
 572:	3b c0       	rjmp	.+118    	; 0x5ea <main+0x162>
                    case 1:
                        setLedState(&led, (uint8_t) atoi((char*) msgBuffer));
 574:	be 01       	movw	r22, r28
 576:	68 5f       	subi	r22, 0xF8	; 248
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	80 e8       	ldi	r24, 0x80	; 128
 57c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 580:	68 2f       	mov	r22, r24
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <setLedState>
                        break;
 58a:	2f c0       	rjmp	.+94     	; 0x5ea <main+0x162>
                    case 2:
                        setLedMode(&led, (uint8_t) atoi((char*) msgBuffer));
 58c:	be 01       	movw	r22, r28
 58e:	68 5f       	subi	r22, 0xF8	; 248
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	80 e8       	ldi	r24, 0x80	; 128
 594:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 598:	68 2f       	mov	r22, r24
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	0e 94 01 06 	call	0xc02	; 0xc02 <setLedMode>
                        break;
 5a2:	23 c0       	rjmp	.+70     	; 0x5ea <main+0x162>
                    case 3:
                        setLedIntensity(&led, (uint8_t) atoi((char*) msgBuffer));
 5a4:	be 01       	movw	r22, r28
 5a6:	68 5f       	subi	r22, 0xF8	; 248
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	80 e8       	ldi	r24, 0x80	; 128
 5ac:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 5b0:	68 2f       	mov	r22, r24
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	0e 94 07 06 	call	0xc0e	; 0xc0e <setLedIntensity>
                        break;
 5ba:	17 c0       	rjmp	.+46     	; 0x5ea <main+0x162>
                    case 4:
                        setLedFrequency(&led, (uint16_t) atoi((char*) msgBuffer));
 5bc:	be 01       	movw	r22, r28
 5be:	68 5f       	subi	r22, 0xF8	; 248
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 5c8:	bc 01       	movw	r22, r24
 5ca:	ce 01       	movw	r24, r28
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <setLedFrequency>
                        break;
 5d2:	0b c0       	rjmp	.+22     	; 0x5ea <main+0x162>
                    case 5:
                        setLedDutyCycle(&led, (uint8_t) atoi((char*) msgBuffer));
 5d4:	be 01       	movw	r22, r28
 5d6:	68 5f       	subi	r22, 0xF8	; 248
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 5e0:	68 2f       	mov	r22, r24
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <setLedDutyCycle>
                        break;
                    default:
                        break;
                }
                memset(msgBuffer, '\0', INPUT_BUFFER_SIZE);
 5ea:	fe 01       	movw	r30, r28
 5ec:	38 96       	adiw	r30, 0x08	; 8
 5ee:	88 e0       	ldi	r24, 0x08	; 8
 5f0:	df 01       	movw	r26, r30
 5f2:	1d 92       	st	X+, r1
 5f4:	8a 95       	dec	r24
 5f6:	e9 f7       	brne	.-6      	; 0x5f2 <main+0x16a>
                command_pos++;
 5f8:	0f 5f       	subi	r16, 0xFF	; 255
                msgbufferIdx = 0;
 5fa:	e1 2c       	mov	r14, r1
                break;
 5fc:	75 cf       	rjmp	.-278    	; 0x4e8 <main+0x60>
            case '*': /* End of message */
                if (input_type == BITSTREAM) {
 5fe:	f1 10       	cpse	r15, r1
 600:	09 c0       	rjmp	.+18     	; 0x614 <main+0x18c>
                    bitstreamSize = bitstreamIdx;
                    sendBitStream(bitstream, bitstreamSize, &led);
 602:	ae 01       	movw	r20, r28
 604:	4f 5f       	subi	r20, 0xFF	; 255
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	6d 2d       	mov	r22, r13
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 c6 03 	call	0x78c	; 0x78c <sendBitStream>
 612:	6a cf       	rjmp	.-300    	; 0x4e8 <main+0x60>
                }
                else {
                    sendCommand(&led); /* Generate array of bytes to send to RF module*/
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	0e 94 83 04 	call	0x906	; 0x906 <sendCommand>
 61c:	65 cf       	rjmp	.-310    	; 0x4e8 <main+0x60>
                }
                break;

            case '\r':
                uart_puts("\r\n"); //Clear screen/
 61e:	62 e3       	ldi	r22, 0x32	; 50
 620:	71 e0       	ldi	r23, 0x01	; 1
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
                break;
 628:	5f cf       	rjmp	.-322    	; 0x4e8 <main+0x60>

            default: /* Add character to buffer */
                if (input_type == BITSTREAM) {
 62a:	f1 10       	cpse	r15, r1
 62c:	08 c0       	rjmp	.+16     	; 0x63e <main+0x1b6>
                    bitstream[bitstreamIdx] = uart_char - '0'; /* char to int */
 62e:	ed 2d       	mov	r30, r13
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	ed 5f       	subi	r30, 0xFD	; 253
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	10 53       	subi	r17, 0x30	; 48
 638:	10 83       	st	Z, r17
                    bitstreamIdx++;
 63a:	d3 94       	inc	r13
 63c:	55 cf       	rjmp	.-342    	; 0x4e8 <main+0x60>
                } else {
                    msgBuffer[msgbufferIdx] = uart_char;
 63e:	e8 e0       	ldi	r30, 0x08	; 8
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	ec 0f       	add	r30, r28
 644:	fd 1f       	adc	r31, r29
 646:	ee 0d       	add	r30, r14
 648:	f1 1d       	adc	r31, r1
 64a:	10 83       	st	Z, r17
                    msgbufferIdx++;
 64c:	e3 94       	inc	r14
 64e:	4c cf       	rjmp	.-360    	; 0x4e8 <main+0x60>

Disassembly of section .text.nrf24_transmitSync:

00000a54 <nrf24_transmitSync>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 a54:	ac 01       	movw	r20, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0b c0       	rjmp	.+22     	; 0xa70 <nrf24_transmitSync+0x1c>
 a5a:	fa 01       	movw	r30, r20
 a5c:	e9 0f       	add	r30, r25
 a5e:	f1 1d       	adc	r31, r1
 a60:	20 81       	ld	r18, Z
 a62:	8d b5       	in	r24, 0x2d	; 45
 a64:	2e bd       	out	0x2e, r18	; 46
 a66:	0d b4       	in	r0, 0x2d	; 45
 a68:	07 fe       	sbrs	r0, 7
 a6a:	fd cf       	rjmp	.-6      	; 0xa66 <nrf24_transmitSync+0x12>
 a6c:	8e b5       	in	r24, 0x2e	; 46
 a6e:	9f 5f       	subi	r25, 0xFF	; 255
 a70:	96 17       	cp	r25, r22
 a72:	98 f3       	brcs	.-26     	; 0xa5a <nrf24_transmitSync+0x6>
 a74:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

00000b46 <nrf24_ce_digitalWrite>:
    nrf24_csn_digitalWrite(HIGH);
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
 b46:	88 23       	and	r24, r24
 b48:	21 f0       	breq	.+8      	; 0xb52 <nrf24_ce_digitalWrite+0xc>
	{
		set_bit(NRF24_PORT,NRF24_CE);
 b4a:	85 b1       	in	r24, 0x05	; 5
 b4c:	81 60       	ori	r24, 0x01	; 1
 b4e:	85 b9       	out	0x05, r24	; 5
 b50:	08 95       	ret
	}
	else
	{
		clr_bit(NRF24_PORT,NRF24_CE);
 b52:	85 b1       	in	r24, 0x05	; 5
 b54:	8e 7f       	andi	r24, 0xFE	; 254
 b56:	85 b9       	out	0x05, r24	; 5
 b58:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000b5a <nrf24_csn_digitalWrite>:

// MOVE THESE TO SPI FILE
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 b5a:	88 23       	and	r24, r24
 b5c:	21 f0       	breq	.+8      	; 0xb66 <nrf24_csn_digitalWrite+0xc>
	{
		set_bit(SPI_PORT,SPI_SS_NRF24L01);
 b5e:	85 b1       	in	r24, 0x05	; 5
 b60:	84 60       	ori	r24, 0x04	; 4
 b62:	85 b9       	out	0x05, r24	; 5
 b64:	08 95       	ret
	}
	else
	{
		clr_bit(SPI_PORT,SPI_SS_NRF24L01);
 b66:	85 b1       	in	r24, 0x05	; 5
 b68:	8b 7f       	andi	r24, 0xFB	; 251
 b6a:	85 b9       	out	0x05, r24	; 5
 b6c:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00000a76 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 a76:	cf 93       	push	r28
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

inline static uint8_t spi_exchange(uint8_t data) {
	
	uint8_t spsr_dummy = SPSR; //Dummy-read to clear flags
 a7e:	8d b5       	in	r24, 0x2d	; 45

    SPDR = data;
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 a84:	0d b4       	in	r0, 0x2d	; 45
 a86:	07 fe       	sbrs	r0, 7
 a88:	fd cf       	rjmp	.-6      	; 0xa84 <nrf24_getStatus+0xe>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 a8a:	ce b5       	in	r28, 0x2e	; 46
    rv = spi_exchange(NOP);
    nrf24_csn_digitalWrite(HIGH);
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
    return rv;
}
 a92:	8c 2f       	mov	r24, r28
 a94:	cf 91       	pop	r28
 a96:	08 95       	ret

Disassembly of section .text.nrf24_isSending:

00000b92 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 b92:	0e 94 3b 05 	call	0xa76	; 0xa76 <nrf24_getStatus>
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 b96:	80 73       	andi	r24, 0x30	; 48
 b98:	11 f0       	breq	.+4      	; 0xb9e <nrf24_isSending+0xc>
    {        
        return 0; /* false */
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	08 95       	ret
    }

    return 1; /* true */
 b9e:	81 e0       	ldi	r24, 0x01	; 1

}
 ba0:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

000009f2 <nrf24_configRegister>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	c8 2f       	mov	r28, r24
 9f8:	d6 2f       	mov	r29, r22
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 a00:	cf 71       	andi	r28, 0x1F	; 31
 a02:	c0 62       	ori	r28, 0x20	; 32
 a04:	8d b5       	in	r24, 0x2d	; 45
 a06:	ce bd       	out	0x2e, r28	; 46
 a08:	0d b4       	in	r0, 0x2d	; 45
 a0a:	07 fe       	sbrs	r0, 7
 a0c:	fd cf       	rjmp	.-6      	; 0xa08 <nrf24_configRegister+0x16>
 a0e:	8e b5       	in	r24, 0x2e	; 46
 a10:	8d b5       	in	r24, 0x2d	; 45
 a12:	de bd       	out	0x2e, r29	; 46
 a14:	0d b4       	in	r0, 0x2d	; 45
 a16:	07 fe       	sbrs	r0, 7
 a18:	fd cf       	rjmp	.-6      	; 0xa14 <nrf24_configRegister+0x22>
 a1a:	8e b5       	in	r24, 0x2e	; 46
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

Disassembly of section .text.nrf24_powerUpTx:

00000b6e <nrf24_powerUpTx>:
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 b6e:	60 e7       	ldi	r22, 0x70	; 112
 b70:	87 e0       	ldi	r24, 0x07	; 7
 b72:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 b76:	6a e0       	ldi	r22, 0x0A	; 10
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 b7e:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

00000982 <nrf24_powerUpRx>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 988:	8d b5       	in	r24, 0x2d	; 45
 98a:	82 ee       	ldi	r24, 0xE2	; 226
 98c:	8e bd       	out	0x2e, r24	; 46
 98e:	0d b4       	in	r0, 0x2d	; 45
 990:	07 fe       	sbrs	r0, 7
 992:	fd cf       	rjmp	.-6      	; 0x98e <nrf24_powerUpRx+0xc>
 994:	8e b5       	in	r24, 0x2e	; 46
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 99c:	60 e7       	ldi	r22, 0x70	; 112
 99e:	87 e0       	ldi	r24, 0x07	; 7
 9a0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 9a4:	80 e0       	ldi	r24, 0x00	; 0
 9a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
 9aa:	6b e0       	ldi	r22, 0x0B	; 11
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
 9b8:	08 95       	ret

Disassembly of section .text.nrf24_config:

00000700 <nrf24_config>:
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	c8 2f       	mov	r28, r24
 706:	d6 2f       	mov	r29, r22
 708:	65 e3       	ldi	r22, 0x35	; 53
 70a:	71 e0       	ldi	r23, 0x01	; 1
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
 712:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__DATA_REGION_ORIGIN__>
 716:	6c 2f       	mov	r22, r28
 718:	85 e0       	ldi	r24, 0x05	; 5
 71a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	81 e1       	ldi	r24, 0x11	; 17
 722:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 726:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 72a:	82 e1       	ldi	r24, 0x12	; 18
 72c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	83 e1       	ldi	r24, 0x13	; 19
 734:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	84 e1       	ldi	r24, 0x14	; 20
 73c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	85 e1       	ldi	r24, 0x15	; 21
 744:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	86 e1       	ldi	r24, 0x16	; 22
 74c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 750:	6e e0       	ldi	r22, 0x0E	; 14
 752:	86 e0       	ldi	r24, 0x06	; 6
 754:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 758:	68 e0       	ldi	r22, 0x08	; 8
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 768:	63 e0       	ldi	r22, 0x03	; 3
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	8c e1       	ldi	r24, 0x1C	; 28
 774:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <nrf24_configRegister>
 778:	0e 94 c1 04 	call	0x982	; 0x982 <nrf24_powerUpRx>
 77c:	63 e5       	ldi	r22, 0x53	; 83
 77e:	71 e0       	ldi	r23, 0x01	; 1
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

Disassembly of section .text.nrf24_send:

00000868 <nrf24_send>:
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	ec 01       	movw	r28, r24
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
 874:	0e 94 b7 05 	call	0xb6e	; 0xb6e <nrf24_powerUpTx>
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 87e:	8d b5       	in	r24, 0x2d	; 45
 880:	81 ee       	ldi	r24, 0xE1	; 225
 882:	8e bd       	out	0x2e, r24	; 46
 884:	0d b4       	in	r0, 0x2d	; 45
 886:	07 fe       	sbrs	r0, 7
 888:	fd cf       	rjmp	.-6      	; 0x884 <nrf24_send+0x1c>
 88a:	8e b5       	in	r24, 0x2e	; 46
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 898:	8d b5       	in	r24, 0x2d	; 45
 89a:	80 ea       	ldi	r24, 0xA0	; 160
 89c:	8e bd       	out	0x2e, r24	; 46
 89e:	0d b4       	in	r0, 0x2d	; 45
 8a0:	07 fe       	sbrs	r0, 7
 8a2:	fd cf       	rjmp	.-6      	; 0x89e <nrf24_send+0x36>
 8a4:	8e b5       	in	r24, 0x2e	; 46
 8a6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8aa:	ce 01       	movw	r24, r28
 8ac:	0e 94 2a 05 	call	0xa54	; 0xa54 <nrf24_transmitSync>
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

Disassembly of section .text.nrf24_writeRegister:

00000946 <nrf24_writeRegister>:
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	c8 2f       	mov	r28, r24
 950:	8b 01       	movw	r16, r22
 952:	d4 2f       	mov	r29, r20
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 95a:	cf 71       	andi	r28, 0x1F	; 31
 95c:	c0 62       	ori	r28, 0x20	; 32
 95e:	8d b5       	in	r24, 0x2d	; 45
 960:	ce bd       	out	0x2e, r28	; 46
 962:	0d b4       	in	r0, 0x2d	; 45
 964:	07 fe       	sbrs	r0, 7
 966:	fd cf       	rjmp	.-6      	; 0x962 <nrf24_writeRegister+0x1c>
 968:	8e b5       	in	r24, 0x2e	; 46
 96a:	6d 2f       	mov	r22, r29
 96c:	c8 01       	movw	r24, r16
 96e:	0e 94 2a 05 	call	0xa54	; 0xa54 <nrf24_transmitSync>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

00000a98 <nrf24_rx_address>:
	uart_puts(" Done!");
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
 a9c:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 aa4:	45 e0       	ldi	r20, 0x05	; 5
 aa6:	be 01       	movw	r22, r28
 aa8:	8b e0       	ldi	r24, 0x0B	; 11
 aaa:	0e 94 a3 04 	call	0x946	; 0x946 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
}
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

00000aba <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 ac0:	45 e0       	ldi	r20, 0x05	; 5
 ac2:	bc 01       	movw	r22, r24
 ac4:	8a e0       	ldi	r24, 0x0A	; 10
 ac6:	0e 94 a3 04 	call	0x946	; 0x946 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 aca:	45 e0       	ldi	r20, 0x05	; 5
 acc:	be 01       	movw	r22, r28
 ace:	80 e1       	ldi	r24, 0x10	; 16
 ad0:	0e 94 a3 04 	call	0x946	; 0x946 <nrf24_writeRegister>
}
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	08 95       	ret

Disassembly of section .text.nrf24_init:

000009ba <nrf24_init>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 9ba:	6a e5       	ldi	r22, 0x5A	; 90
 9bc:	71 e0       	ldi	r23, 0x01	; 1
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
 9c4:	84 b1       	in	r24, 0x04	; 4
 9c6:	81 60       	ori	r24, 0x01	; 1
 9c8:	84 b9       	out	0x04, r24	; 4
 9ca:	81 e1       	ldi	r24, 0x11	; 17
 9cc:	92 e0       	ldi	r25, 0x02	; 2
 9ce:	0e 94 5d 05 	call	0xaba	; 0xaba <nrf24_tx_address>
 9d2:	86 e1       	ldi	r24, 0x16	; 22
 9d4:	92 e0       	ldi	r25, 0x02	; 2
 9d6:	0e 94 4c 05 	call	0xa98	; 0xa98 <nrf24_rx_address>
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <nrf24_ce_digitalWrite>
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <nrf24_csn_digitalWrite>
 9e6:	63 e5       	ldi	r22, 0x53	; 83
 9e8:	71 e0       	ldi	r23, 0x01	; 1
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_puts>
 9f0:	08 95       	ret

Disassembly of section .text.uart_init:

00000b18 <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 b18:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 b1c:	87 e6       	ldi	r24, 0x67	; 103
 b1e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 b22:	86 e0       	ldi	r24, 0x06	; 6
 b24:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 b28:	88 e1       	ldi	r24, 0x18	; 24
 b2a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 b2e:	08 95       	ret

Disassembly of section .text.uart_putc:

00000ba2 <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 ba2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 ba6:	95 ff       	sbrs	r25, 5
 ba8:	fc cf       	rjmp	.-8      	; 0xba2 <uart_putc>
	UDR0 = DataByte;
 baa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 bae:	08 95       	ret

Disassembly of section .text.uart_puts:

00000a28 <uart_puts>:
}

void uart_puts(const char *s )
{
 a28:	cf 92       	push	r12
 a2a:	df 92       	push	r13
 a2c:	ef 92       	push	r14
 a2e:	6b 01       	movw	r12, r22
 a30:	e8 2e       	mov	r14, r24
	while (*s)
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <uart_puts+0x18>
	uart_putc(*s++);
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	c9 1a       	sub	r12, r25
 a38:	d9 0a       	sbc	r13, r25
 a3a:	e9 0a       	sbc	r14, r25
 a3c:	0e 94 d1 05 	call	0xba2	; 0xba2 <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 a40:	f6 01       	movw	r30, r12
 a42:	84 91       	lpm	r24, Z
 a44:	e7 fc       	sbrc	r14, 7
 a46:	80 81       	ld	r24, Z
 a48:	81 11       	cpse	r24, r1
 a4a:	f4 cf       	rjmp	.-24     	; 0xa34 <uart_puts+0xc>
	uart_putc(*s++);

}/* uart_puts */
 a4c:	ef 90       	pop	r14
 a4e:	df 90       	pop	r13
 a50:	cf 90       	pop	r12
 a52:	08 95       	ret

Disassembly of section .text.uart_getc:

00000bb0 <uart_getc>:

uint8_t uart_getc()
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
 bb0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 bb4:	88 23       	and	r24, r24
 bb6:	e4 f7       	brge	.-8      	; 0xbb0 <uart_getc>
	DataByte = UDR0 ;
 bb8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return DataByte;
}
 bbc:	08 95       	ret

Disassembly of section .text.avrlibc:

00000bdc <atoi>:
 bdc:	0e 94 df 05 	call	0xbbe	; 0xbbe <atol>
 be0:	cb 01       	movw	r24, r22
 be2:	08 95       	ret

Disassembly of section .text.avrlibc:

00000bbe <atol>:
 bbe:	2a e0       	ldi	r18, 0x0A	; 10
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	40 e0       	ldi	r20, 0x00	; 0
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <strtol>
 bca:	08 95       	ret

Disassembly of section .text.avrlibc:

000001ac <strtol>:
 1ac:	2f 92       	push	r2
 1ae:	3f 92       	push	r3
 1b0:	4f 92       	push	r4
 1b2:	5f 92       	push	r5
 1b4:	6f 92       	push	r6
 1b6:	7f 92       	push	r7
 1b8:	8f 92       	push	r8
 1ba:	af 92       	push	r10
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <strtol+0x22>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <strtol+0x24>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <strtol+0x26>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	3b 01       	movw	r6, r22
 1d8:	88 2e       	mov	r8, r24
 1da:	5a 01       	movw	r10, r20
 1dc:	19 01       	movw	r2, r18
 1de:	41 15       	cp	r20, r1
 1e0:	51 05       	cpc	r21, r1
 1e2:	21 f0       	breq	.+8      	; 0x1ec <strtol+0x40>
 1e4:	fa 01       	movw	r30, r20
 1e6:	60 83       	st	Z, r22
 1e8:	71 83       	std	Z+1, r23	; 0x01
 1ea:	82 83       	std	Z+2, r24	; 0x02
 1ec:	21 14       	cp	r2, r1
 1ee:	31 04       	cpc	r3, r1
 1f0:	29 f0       	breq	.+10     	; 0x1fc <strtol+0x50>
 1f2:	c1 01       	movw	r24, r2
 1f4:	02 97       	sbiw	r24, 0x02	; 2
 1f6:	83 97       	sbiw	r24, 0x23	; 35
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <strtol+0x50>
 1fa:	1a c1       	rjmp	.+564    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 1fc:	e8 2c       	mov	r14, r8
 1fe:	63 01       	movw	r12, r6
 200:	ff ef       	ldi	r31, 0xFF	; 255
 202:	cf 1a       	sub	r12, r31
 204:	df 0a       	sbc	r13, r31
 206:	ef 0a       	sbc	r14, r31
 208:	f3 01       	movw	r30, r6
 20a:	14 91       	lpm	r17, Z
 20c:	87 fc       	sbrc	r8, 7
 20e:	10 81       	ld	r17, Z
 210:	81 2f       	mov	r24, r17
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 c0 05 	call	0xb80	; 0xb80 <isspace>
 218:	4c 2d       	mov	r20, r12
 21a:	3d 2d       	mov	r19, r13
 21c:	2e 2d       	mov	r18, r14
 21e:	89 2b       	or	r24, r25
 220:	19 f0       	breq	.+6      	; 0x228 <strtol+0x7c>
 222:	36 01       	movw	r6, r12
 224:	8e 2c       	mov	r8, r14
 226:	ea cf       	rjmp	.-44     	; 0x1fc <strtol+0x50>
 228:	1d 32       	cpi	r17, 0x2D	; 45
 22a:	69 f4       	brne	.+26     	; 0x246 <strtol+0x9a>
 22c:	e8 2c       	mov	r14, r8
 22e:	63 01       	movw	r12, r6
 230:	52 e0       	ldi	r21, 0x02	; 2
 232:	c5 0e       	add	r12, r21
 234:	d1 1c       	adc	r13, r1
 236:	e1 1c       	adc	r14, r1
 238:	e4 2f       	mov	r30, r20
 23a:	f3 2f       	mov	r31, r19
 23c:	14 91       	lpm	r17, Z
 23e:	27 fd       	sbrc	r18, 7
 240:	10 81       	ld	r17, Z
 242:	01 e0       	ldi	r16, 0x01	; 1
 244:	0e c0       	rjmp	.+28     	; 0x262 <strtol+0xb6>
 246:	1b 32       	cpi	r17, 0x2B	; 43
 248:	59 f4       	brne	.+22     	; 0x260 <strtol+0xb4>
 24a:	e8 2c       	mov	r14, r8
 24c:	63 01       	movw	r12, r6
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	c8 0e       	add	r12, r24
 252:	d1 1c       	adc	r13, r1
 254:	e1 1c       	adc	r14, r1
 256:	e4 2f       	mov	r30, r20
 258:	f3 2f       	mov	r31, r19
 25a:	14 91       	lpm	r17, Z
 25c:	27 fd       	sbrc	r18, 7
 25e:	10 81       	ld	r17, Z
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	21 14       	cp	r2, r1
 264:	31 04       	cpc	r3, r1
 266:	09 f1       	breq	.+66     	; 0x2aa <strtol+0xfe>
 268:	90 e1       	ldi	r25, 0x10	; 16
 26a:	29 16       	cp	r2, r25
 26c:	31 04       	cpc	r3, r1
 26e:	29 f4       	brne	.+10     	; 0x27a <strtol+0xce>
 270:	3f c0       	rjmp	.+126    	; 0x2f0 <strtol+0x144>
 272:	10 e3       	ldi	r17, 0x30	; 48
 274:	21 14       	cp	r2, r1
 276:	31 04       	cpc	r3, r1
 278:	21 f1       	breq	.+72     	; 0x2c2 <strtol+0x116>
 27a:	f8 e0       	ldi	r31, 0x08	; 8
 27c:	2f 16       	cp	r2, r31
 27e:	31 04       	cpc	r3, r1
 280:	01 f1       	breq	.+64     	; 0x2c2 <strtol+0x116>
 282:	54 f4       	brge	.+20     	; 0x298 <strtol+0xec>
 284:	32 e0       	ldi	r19, 0x02	; 2
 286:	23 16       	cp	r2, r19
 288:	31 04       	cpc	r3, r1
 28a:	21 f5       	brne	.+72     	; 0x2d4 <strtol+0x128>
 28c:	41 2c       	mov	r4, r1
 28e:	51 2c       	mov	r5, r1
 290:	61 2c       	mov	r6, r1
 292:	50 e4       	ldi	r21, 0x40	; 64
 294:	75 2e       	mov	r7, r21
 296:	4b c0       	rjmp	.+150    	; 0x32e <strtol+0x182>
 298:	4a e0       	ldi	r20, 0x0A	; 10
 29a:	24 16       	cp	r2, r20
 29c:	31 04       	cpc	r3, r1
 29e:	39 f0       	breq	.+14     	; 0x2ae <strtol+0x102>
 2a0:	50 e1       	ldi	r21, 0x10	; 16
 2a2:	25 16       	cp	r2, r21
 2a4:	31 04       	cpc	r3, r1
 2a6:	b1 f4       	brne	.+44     	; 0x2d4 <strtol+0x128>
 2a8:	3d c0       	rjmp	.+122    	; 0x324 <strtol+0x178>
 2aa:	10 33       	cpi	r17, 0x30	; 48
 2ac:	19 f1       	breq	.+70     	; 0x2f4 <strtol+0x148>
 2ae:	3a e0       	ldi	r19, 0x0A	; 10
 2b0:	23 2e       	mov	r2, r19
 2b2:	31 2c       	mov	r3, r1
 2b4:	4c ec       	ldi	r20, 0xCC	; 204
 2b6:	44 2e       	mov	r4, r20
 2b8:	54 2c       	mov	r5, r4
 2ba:	64 2c       	mov	r6, r4
 2bc:	4c e0       	ldi	r20, 0x0C	; 12
 2be:	74 2e       	mov	r7, r20
 2c0:	36 c0       	rjmp	.+108    	; 0x32e <strtol+0x182>
 2c2:	98 e0       	ldi	r25, 0x08	; 8
 2c4:	29 2e       	mov	r2, r25
 2c6:	31 2c       	mov	r3, r1
 2c8:	41 2c       	mov	r4, r1
 2ca:	51 2c       	mov	r5, r1
 2cc:	61 2c       	mov	r6, r1
 2ce:	20 e1       	ldi	r18, 0x10	; 16
 2d0:	72 2e       	mov	r7, r18
 2d2:	2d c0       	rjmp	.+90     	; 0x32e <strtol+0x182>
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e8       	ldi	r25, 0x80	; 128
 2dc:	91 01       	movw	r18, r2
 2de:	03 2c       	mov	r0, r3
 2e0:	00 0c       	add	r0, r0
 2e2:	44 0b       	sbc	r20, r20
 2e4:	55 0b       	sbc	r21, r21
 2e6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__udivmodsi4>
 2ea:	29 01       	movw	r4, r18
 2ec:	3a 01       	movw	r6, r20
 2ee:	1f c0       	rjmp	.+62     	; 0x32e <strtol+0x182>
 2f0:	10 33       	cpi	r17, 0x30	; 48
 2f2:	c1 f4       	brne	.+48     	; 0x324 <strtol+0x178>
 2f4:	f6 01       	movw	r30, r12
 2f6:	84 91       	lpm	r24, Z
 2f8:	e7 fc       	sbrc	r14, 7
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 7d       	andi	r24, 0xDF	; 223
 2fe:	88 35       	cpi	r24, 0x58	; 88
 300:	09 f0       	breq	.+2      	; 0x304 <strtol+0x158>
 302:	b7 cf       	rjmp	.-146    	; 0x272 <strtol+0xc6>
 304:	ae 2d       	mov	r26, r14
 306:	c6 01       	movw	r24, r12
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	a1 1d       	adc	r26, r1
 30c:	fc 01       	movw	r30, r24
 30e:	14 91       	lpm	r17, Z
 310:	a7 fd       	sbrc	r26, 7
 312:	10 81       	ld	r17, Z
 314:	e2 e0       	ldi	r30, 0x02	; 2
 316:	ce 0e       	add	r12, r30
 318:	d1 1c       	adc	r13, r1
 31a:	e1 1c       	adc	r14, r1
 31c:	02 60       	ori	r16, 0x02	; 2
 31e:	60 e1       	ldi	r22, 0x10	; 16
 320:	26 2e       	mov	r2, r22
 322:	31 2c       	mov	r3, r1
 324:	41 2c       	mov	r4, r1
 326:	51 2c       	mov	r5, r1
 328:	61 2c       	mov	r6, r1
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	78 2e       	mov	r7, r24
 32e:	a0 e0       	ldi	r26, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	cb 01       	movw	r24, r22
 336:	91 01       	movw	r18, r2
 338:	03 2c       	mov	r0, r3
 33a:	00 0c       	add	r0, r0
 33c:	44 0b       	sbc	r20, r20
 33e:	55 0b       	sbc	r21, r21
 340:	29 83       	std	Y+1, r18	; 0x01
 342:	3a 83       	std	Y+2, r19	; 0x02
 344:	4b 83       	std	Y+3, r20	; 0x03
 346:	5c 83       	std	Y+4, r21	; 0x04
 348:	e0 ed       	ldi	r30, 0xD0	; 208
 34a:	e1 0f       	add	r30, r17
 34c:	ea 30       	cpi	r30, 0x0A	; 10
 34e:	60 f0       	brcs	.+24     	; 0x368 <strtol+0x1bc>
 350:	2f eb       	ldi	r18, 0xBF	; 191
 352:	21 0f       	add	r18, r17
 354:	2a 31       	cpi	r18, 0x1A	; 26
 356:	10 f4       	brcc	.+4      	; 0x35c <strtol+0x1b0>
 358:	e9 ec       	ldi	r30, 0xC9	; 201
 35a:	05 c0       	rjmp	.+10     	; 0x366 <strtol+0x1ba>
 35c:	2f e9       	ldi	r18, 0x9F	; 159
 35e:	21 0f       	add	r18, r17
 360:	2a 31       	cpi	r18, 0x1A	; 26
 362:	50 f5       	brcc	.+84     	; 0x3b8 <strtol+0x20c>
 364:	e9 ea       	ldi	r30, 0xA9	; 169
 366:	e1 0f       	add	r30, r17
 368:	2e 2f       	mov	r18, r30
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	22 15       	cp	r18, r2
 36e:	33 05       	cpc	r19, r3
 370:	1c f5       	brge	.+70     	; 0x3b8 <strtol+0x20c>
 372:	a7 fd       	sbrc	r26, 7
 374:	18 c0       	rjmp	.+48     	; 0x3a6 <strtol+0x1fa>
 376:	46 16       	cp	r4, r22
 378:	57 06       	cpc	r5, r23
 37a:	68 06       	cpc	r6, r24
 37c:	79 06       	cpc	r7, r25
 37e:	80 f0       	brcs	.+32     	; 0x3a0 <strtol+0x1f4>
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	3a 81       	ldd	r19, Y+2	; 0x02
 384:	4b 81       	ldd	r20, Y+3	; 0x03
 386:	5c 81       	ldd	r21, Y+4	; 0x04
 388:	0e 94 6d 05 	call	0xada	; 0xada <__mulsi3>
 38c:	6e 0f       	add	r22, r30
 38e:	71 1d       	adc	r23, r1
 390:	81 1d       	adc	r24, r1
 392:	91 1d       	adc	r25, r1
 394:	61 30       	cpi	r22, 0x01	; 1
 396:	71 05       	cpc	r23, r1
 398:	81 05       	cpc	r24, r1
 39a:	30 e8       	ldi	r19, 0x80	; 128
 39c:	93 07       	cpc	r25, r19
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <strtol+0x1f8>
 3a0:	af ef       	ldi	r26, 0xFF	; 255
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <strtol+0x1fa>
 3a4:	a1 e0       	ldi	r26, 0x01	; 1
 3a6:	f6 01       	movw	r30, r12
 3a8:	14 91       	lpm	r17, Z
 3aa:	e7 fc       	sbrc	r14, 7
 3ac:	10 81       	ld	r17, Z
 3ae:	4f ef       	ldi	r20, 0xFF	; 255
 3b0:	c4 1a       	sub	r12, r20
 3b2:	d4 0a       	sbc	r13, r20
 3b4:	e4 0a       	sbc	r14, r20
 3b6:	c8 cf       	rjmp	.-112    	; 0x348 <strtol+0x19c>
 3b8:	20 2f       	mov	r18, r16
 3ba:	21 70       	andi	r18, 0x01	; 1
 3bc:	a1 14       	cp	r10, r1
 3be:	b1 04       	cpc	r11, r1
 3c0:	b1 f0       	breq	.+44     	; 0x3ee <strtol+0x242>
 3c2:	aa 23       	and	r26, r26
 3c4:	49 f0       	breq	.+18     	; 0x3d8 <strtol+0x22c>
 3c6:	51 e0       	ldi	r21, 0x01	; 1
 3c8:	c5 1a       	sub	r12, r21
 3ca:	d1 08       	sbc	r13, r1
 3cc:	e1 08       	sbc	r14, r1
 3ce:	f5 01       	movw	r30, r10
 3d0:	c0 82       	st	Z, r12
 3d2:	d1 82       	std	Z+1, r13	; 0x01
 3d4:	e2 82       	std	Z+2, r14	; 0x02
 3d6:	0b c0       	rjmp	.+22     	; 0x3ee <strtol+0x242>
 3d8:	01 ff       	sbrs	r16, 1
 3da:	1d c0       	rjmp	.+58     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3dc:	f2 e0       	ldi	r31, 0x02	; 2
 3de:	cf 1a       	sub	r12, r31
 3e0:	d1 08       	sbc	r13, r1
 3e2:	e1 08       	sbc	r14, r1
 3e4:	f5 01       	movw	r30, r10
 3e6:	c0 82       	st	Z, r12
 3e8:	d1 82       	std	Z+1, r13	; 0x01
 3ea:	e2 82       	std	Z+2, r14	; 0x02
 3ec:	14 c0       	rjmp	.+40     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ee:	a7 ff       	sbrs	r26, 7
 3f0:	12 c0       	rjmp	.+36     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f2:	22 23       	and	r18, r18
 3f4:	29 f0       	breq	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e8       	ldi	r25, 0x80	; 128
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 400:	6f ef       	ldi	r22, 0xFF	; 255
 402:	7f ef       	ldi	r23, 0xFF	; 255
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f e7       	ldi	r25, 0x7F	; 127
 408:	22 e2       	ldi	r18, 0x22	; 34
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <errno+0x1>
 410:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <errno>
 414:	09 c0       	rjmp	.+18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 416:	22 23       	and	r18, r18
 418:	81 f0       	breq	.+32     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 41a:	90 95       	com	r25
 41c:	80 95       	com	r24
 41e:	70 95       	com	r23
 420:	61 95       	neg	r22
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	8f 4f       	sbci	r24, 0xFF	; 255
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	46 2f       	mov	r20, r22
 42a:	37 2f       	mov	r19, r23
 42c:	28 2f       	mov	r18, r24
 42e:	12 c0       	rjmp	.+36     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0d c0       	rjmp	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43a:	97 ff       	sbrs	r25, 7
 43c:	f5 cf       	rjmp	.-22     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 43e:	82 e2       	ldi	r24, 0x22	; 34
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <errno+0x1>
 446:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <errno>
 44a:	6f ef       	ldi	r22, 0xFF	; 255
 44c:	7f ef       	ldi	r23, 0xFF	; 255
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	9f e7       	ldi	r25, 0x7F	; 127
 452:	ea cf       	rjmp	.-44     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 454:	64 2f       	mov	r22, r20
 456:	73 2f       	mov	r23, r19
 458:	82 2f       	mov	r24, r18
 45a:	26 96       	adiw	r28, 0x06	; 6
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ef 90       	pop	r14
 470:	df 90       	pop	r13
 472:	cf 90       	pop	r12
 474:	bf 90       	pop	r11
 476:	af 90       	pop	r10
 478:	8f 90       	pop	r8
 47a:	7f 90       	pop	r7
 47c:	6f 90       	pop	r6
 47e:	5f 90       	pop	r5
 480:	4f 90       	pop	r4
 482:	3f 90       	pop	r3
 484:	2f 90       	pop	r2
 486:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b80 <isspace>:
 b80:	91 11       	cpse	r25, r1
 b82:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__ctype_isfalse>
 b86:	80 32       	cpi	r24, 0x20	; 32
 b88:	19 f0       	breq	.+6      	; 0xb90 <isspace+0x10>
 b8a:	89 50       	subi	r24, 0x09	; 9
 b8c:	85 50       	subi	r24, 0x05	; 5
 b8e:	c8 f7       	brcc	.-14     	; 0xb82 <isspace+0x2>
 b90:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c20 <__ctype_isfalse>:
 c20:	99 27       	eor	r25, r25
 c22:	88 27       	eor	r24, r24

00000c24 <__ctype_istrue>:
 c24:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000ada <__mulsi3>:
 ada:	db 01       	movw	r26, r22
 adc:	8f 93       	push	r24
 ade:	9f 93       	push	r25
 ae0:	0e 94 98 05 	call	0xb30	; 0xb30 <__muluhisi3>
 ae4:	bf 91       	pop	r27
 ae6:	af 91       	pop	r26
 ae8:	a2 9f       	mul	r26, r18
 aea:	80 0d       	add	r24, r0
 aec:	91 1d       	adc	r25, r1
 aee:	a3 9f       	mul	r26, r19
 af0:	90 0d       	add	r25, r0
 af2:	b2 9f       	mul	r27, r18
 af4:	90 0d       	add	r25, r0
 af6:	11 24       	eor	r1, r1
 af8:	08 95       	ret

Disassembly of section .text.libgcc.div:

000008c2 <__udivmodsi4>:
 8c2:	a1 e2       	ldi	r26, 0x21	; 33
 8c4:	1a 2e       	mov	r1, r26
 8c6:	aa 1b       	sub	r26, r26
 8c8:	bb 1b       	sub	r27, r27
 8ca:	fd 01       	movw	r30, r26
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__udivmodsi4_ep>

000008ce <__udivmodsi4_loop>:
 8ce:	aa 1f       	adc	r26, r26
 8d0:	bb 1f       	adc	r27, r27
 8d2:	ee 1f       	adc	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	a2 17       	cp	r26, r18
 8d8:	b3 07       	cpc	r27, r19
 8da:	e4 07       	cpc	r30, r20
 8dc:	f5 07       	cpc	r31, r21
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__udivmodsi4_ep>
 8e0:	a2 1b       	sub	r26, r18
 8e2:	b3 0b       	sbc	r27, r19
 8e4:	e4 0b       	sbc	r30, r20
 8e6:	f5 0b       	sbc	r31, r21

000008e8 <__udivmodsi4_ep>:
 8e8:	66 1f       	adc	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	1a 94       	dec	r1
 8f2:	69 f7       	brne	.-38     	; 0x8ce <__udivmodsi4_loop>
 8f4:	60 95       	com	r22
 8f6:	70 95       	com	r23
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	9b 01       	movw	r18, r22
 8fe:	ac 01       	movw	r20, r24
 900:	bd 01       	movw	r22, r26
 902:	cf 01       	movw	r24, r30
 904:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000b30 <__muluhisi3>:
 b30:	0e 94 7d 05 	call	0xafa	; 0xafa <__umulhisi3>
 b34:	a5 9f       	mul	r26, r21
 b36:	90 0d       	add	r25, r0
 b38:	b4 9f       	mul	r27, r20
 b3a:	90 0d       	add	r25, r0
 b3c:	a4 9f       	mul	r26, r20
 b3e:	80 0d       	add	r24, r0
 b40:	91 1d       	adc	r25, r1
 b42:	11 24       	eor	r1, r1
 b44:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000afa <__umulhisi3>:
 afa:	a2 9f       	mul	r26, r18
 afc:	b0 01       	movw	r22, r0
 afe:	b3 9f       	mul	r27, r19
 b00:	c0 01       	movw	r24, r0
 b02:	a3 9f       	mul	r26, r19
 b04:	70 0d       	add	r23, r0
 b06:	81 1d       	adc	r24, r1
 b08:	11 24       	eor	r1, r1
 b0a:	91 1d       	adc	r25, r1
 b0c:	b2 9f       	mul	r27, r18
 b0e:	70 0d       	add	r23, r0
 b10:	81 1d       	adc	r24, r1
 b12:	11 24       	eor	r1, r1
 b14:	91 1d       	adc	r25, r1
 b16:	08 95       	ret
