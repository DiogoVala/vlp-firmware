
vlp-firmware_atmel_m.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000cca  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000cca  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fc7  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb5  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e72  00000000  00000000  00004b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000458  00000000  00000000  000059fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  00005e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dec  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00006fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000c08  00000c08  00000cbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000716c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.buildLEDCommand 0000005a  000007fa  000007fa  000008ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 00000028  00000172  00000172  00000226  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.sendCommand 00000036  0000099e  0000099e  00000a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.bitsToByteArray 000000b0  0000063c  0000063c  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendBitStream 00000082  00000778  00000778  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.byte_count 00000001  00800229  00800229  00000cca  2**0
                  ALLOC
 20 .bss.bitstream 000000f0  0080010a  0080010a  00000cca  2**0
                  ALLOC
 21 .bss.bitstream_byte_array 0000001e  008001fa  008001fa  00000cca  2**0
                  ALLOC
 22 .bss.TX_command_array 00000007  00800222  00800222  00000cca  2**0
                  ALLOC
 23 .text.getLedID 00000006  00000bc6  00000bc6  00000c7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.setLedID 00000006  00000bcc  00000bcc  00000c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.getLedState 00000006  00000bd2  00000bd2  00000c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.setLedState 00000006  00000bd8  00000bd8  00000c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.getLedMode 00000006  00000bde  00000bde  00000c92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.setLedMode 00000006  00000be4  00000be4  00000c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.getLedIntensity 00000006  00000bea  00000bea  00000c9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.setLedIntensity 00000006  00000bf0  00000bf0  00000ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.getLedFrequency 00000008  00000bae  00000bae  00000c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.setLedFrequency 00000008  00000bb6  00000bb6  00000c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.getLedDutyCycle 00000006  00000bf6  00000bf6  00000caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.setLedDutyCycle 00000006  00000bfc  00000bfc  00000cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 00000060  000000ce  000000ce  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.main    000001c6  00000476  00000476  0000052a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.nrf24_transmitSync 00000022  00000a36  00000a36  00000aea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.nrf24_ce_digitalWrite 00000014  00000b28  00000b28  00000bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.nrf24_csn_digitalWrite 00000014  00000b3c  00000b3c  00000bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.nrf24_getStatus 00000022  00000a58  00000a58  00000b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.nrf24_isSending 00000010  00000b74  00000b74  00000c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.nrf24_configRegister 00000036  000009d4  000009d4  00000a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.nrf24_powerUpTx 00000012  00000b50  00000b50  00000c04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.nrf24_powerUpRx 00000038  0000092e  0000092e  000009e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .progmemx.data 00000044  0000012e  0000012e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .text.nrf24_config 0000008c  000006ec  000006ec  000007a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.nrf24_send 0000005a  00000854  00000854  00000908  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.nrf24_writeRegister 0000003c  000008f2  000008f2  000009a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.nrf24_rx_address 00000022  00000a7a  00000a7a  00000b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.nrf24_tx_address 00000020  00000a9c  00000a9c  00000b50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.nrf24_init 00000038  00000966  00000966  00000a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .data.nrf24_addr 0000000a  00800218  00000c0c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 53 .text.uart_init 00000018  00000afa  00000afa  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart_putc 0000000e  00000b84  00000b84  00000c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart_puts 0000002c  00000a0a  00000a0a  00000abe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.uart_getc 0000000e  00000b92  00000b92  00000c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.avrlibc 00000008  00000bbe  00000bbe  00000c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.avrlibc 0000000e  00000ba0  00000ba0  00000c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc 000002dc  0000019a  0000019a  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc 00000012  00000b62  00000b62  00000c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc 00000006  00000c02  00000c02  00000cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.libgcc.mul 00000020  00000abc  00000abc  00000b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.div 00000044  000008ae  000008ae  00000962  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.mul 00000016  00000b12  00000b12  00000bc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc.mul 0000001e  00000adc  00000adc  00000b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
   8:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
   c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  10:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  14:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  18:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  1c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  20:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  24:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  28:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  2c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  30:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  34:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  38:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  3c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  40:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  44:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  48:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  4c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  50:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  54:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  58:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  5c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  60:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>
  64:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 18       	sub	r0, r2
  6c:	80 02       	muls	r24, r16
  6e:	18 02       	muls	r17, r24
  70:	22 00       	.word	0x0022	; ????
  72:	0c 0c       	add	r0, r12
  74:	02 22       	and	r0, r18
  76:	02 2a       	or	r0, r18
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 3b 02 	call	0x476	; 0x476 <main>
  c6:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000c08 <__bad_interrupt>:
 c08:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.buildLEDCommand:

000007fa <buildLEDCommand>:
		while(nrf24_isSending());
	}
}

/* Builds the command array with the led params to send via RF */
void buildLEDCommand(led_t* ledp) {
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	8c 01       	movw	r16, r24
	
	memset(TX_command_array, '\0', COMMAND_LENGTH);
 804:	c2 e2       	ldi	r28, 0x22	; 34
 806:	d2 e0       	ldi	r29, 0x02	; 2
 808:	87 e0       	ldi	r24, 0x07	; 7
 80a:	fe 01       	movw	r30, r28
 80c:	11 92       	st	Z+, r1
 80e:	8a 95       	dec	r24
 810:	e9 f7       	brne	.-6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	
    /* Array of bytes to send to RF module */
	
    TX_command_array[ID] = getLedID(ledp);
 812:	c8 01       	movw	r24, r16
 814:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <getLedID>
 818:	88 83       	st	Y, r24
    TX_command_array[STATE] = getLedState(ledp);
 81a:	c8 01       	movw	r24, r16
 81c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <getLedState>
 820:	89 83       	std	Y+1, r24	; 0x01
    TX_command_array[MODE] = getLedMode(ledp);
 822:	c8 01       	movw	r24, r16
 824:	0e 94 ef 05 	call	0xbde	; 0xbde <getLedMode>
 828:	8a 83       	std	Y+2, r24	; 0x02
    TX_command_array[INTENSITY] = getLedIntensity(ledp);
 82a:	c8 01       	movw	r24, r16
 82c:	0e 94 f5 05 	call	0xbea	; 0xbea <getLedIntensity>
 830:	8b 83       	std	Y+3, r24	; 0x03
    TX_command_array[FREQUENCY_LB] = (uint8_t) (getLedFrequency(ledp) & 0x00FF);
 832:	c8 01       	movw	r24, r16
 834:	0e 94 d7 05 	call	0xbae	; 0xbae <getLedFrequency>
 838:	8c 83       	std	Y+4, r24	; 0x04
    TX_command_array[FREQUENCY_HB] = (uint8_t) ((getLedFrequency(ledp) >> 8 ) & 0x00FF);
 83a:	c8 01       	movw	r24, r16
 83c:	0e 94 d7 05 	call	0xbae	; 0xbae <getLedFrequency>
 840:	9d 83       	std	Y+5, r25	; 0x05
    TX_command_array[DUTYCYCLE] = getLedDutyCycle(ledp);	
 842:	c8 01       	movw	r24, r16
 844:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <getLedDutyCycle>
 848:	8e 83       	std	Y+6, r24	; 0x06
}
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	08 95       	ret

Disassembly of section .text.sendCommand:

0000099e <sendCommand>:
    nrf24_send(TX_command_array);
	while(nrf24_isSending());
}

/* Builds and sends command with led params */
void sendCommand(led_t* ledp) {
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	ec 01       	movw	r28, r24
	uart_puts("\r\nSending Command.");
 9a4:	62 e7       	ldi	r22, 0x72	; 114
 9a6:	71 e0       	ldi	r23, 0x01	; 1
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
    buildLEDCommand(ledp);
 9ae:	ce 01       	movw	r24, r28
 9b0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <buildLEDCommand>
            nrf24_send(TX_command_array);
        }
    }
	#endif
	
	for(uint8_t i=0; i<10; i++)
 9b4:	c0 e0       	ldi	r28, 0x00	; 0
 9b6:	09 c0       	rjmp	.+18     	; 0x9ca <sendCommand+0x2c>
	{
		nrf24_send(TX_command_array);
 9b8:	82 e2       	ldi	r24, 0x22	; 34
 9ba:	92 e0       	ldi	r25, 0x02	; 2
 9bc:	0e 94 2a 04 	call	0x854	; 0x854 <nrf24_send>
		while(nrf24_isSending());
 9c0:	0e 94 ba 05 	call	0xb74	; 0xb74 <nrf24_isSending>
 9c4:	81 11       	cpse	r24, r1
 9c6:	fc cf       	rjmp	.-8      	; 0x9c0 <sendCommand+0x22>
            nrf24_send(TX_command_array);
        }
    }
	#endif
	
	for(uint8_t i=0; i<10; i++)
 9c8:	cf 5f       	subi	r28, 0xFF	; 255
 9ca:	ca 30       	cpi	r28, 0x0A	; 10
 9cc:	a8 f3       	brcs	.-22     	; 0x9b8 <sendCommand+0x1a>
	{
		nrf24_send(TX_command_array);
		while(nrf24_isSending());
	}
}
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	08 95       	ret

Disassembly of section .text.bitsToByteArray:

0000063c <bitsToByteArray>:
    TX_command_array[FREQUENCY_HB] = (uint8_t) ((getLedFrequency(ledp) >> 8 ) & 0x00FF);
    TX_command_array[DUTYCYCLE] = getLedDutyCycle(ledp);	
}

/* Transforms an array of bits to an array of bytes */
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize) {
 63c:	fc 01       	movw	r30, r24

    uint8_t index = 0;
    uint8_t newByte = 0;
 63e:	40 e0       	ldi	r20, 0x00	; 0

    for (index = 0; index < bitstreamSize; index++) {
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	2a c0       	rjmp	.+84     	; 0x698 <bitsToByteArray+0x5c>
        newByte = newByte << 1 | bitstream[index];
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	df 01       	movw	r26, r30
 64c:	a2 0f       	add	r26, r18
 64e:	b1 1d       	adc	r27, r1
 650:	8c 91       	ld	r24, X
 652:	48 2b       	or	r20, r24
        if (index % 7 == 0 && index != 0) {
 654:	95 e2       	ldi	r25, 0x25	; 37
 656:	29 9f       	mul	r18, r25
 658:	31 2d       	mov	r19, r1
 65a:	11 24       	eor	r1, r1
 65c:	92 2f       	mov	r25, r18
 65e:	93 1b       	sub	r25, r19
 660:	96 95       	lsr	r25
 662:	93 0f       	add	r25, r19
 664:	96 95       	lsr	r25
 666:	96 95       	lsr	r25
 668:	39 2f       	mov	r19, r25
 66a:	33 0f       	add	r19, r19
 66c:	33 0f       	add	r19, r19
 66e:	33 0f       	add	r19, r19
 670:	39 1b       	sub	r19, r25
 672:	23 13       	cpse	r18, r19
 674:	10 c0       	rjmp	.+32     	; 0x696 <bitsToByteArray+0x5a>
 676:	22 23       	and	r18, r18
 678:	71 f0       	breq	.+28     	; 0x696 <bitsToByteArray+0x5a>
            bitstream_byte_array[index / 8] = newByte;
 67a:	a2 2f       	mov	r26, r18
 67c:	a6 95       	lsr	r26
 67e:	a6 95       	lsr	r26
 680:	a6 95       	lsr	r26
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	a6 50       	subi	r26, 0x06	; 6
 686:	be 4f       	sbci	r27, 0xFE	; 254
 688:	4c 93       	st	X, r20
            byte_count++;
 68a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <byte_count>
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <byte_count>
            newByte = 0;
 694:	40 e0       	ldi	r20, 0x00	; 0
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize) {

    uint8_t index = 0;
    uint8_t newByte = 0;

    for (index = 0; index < bitstreamSize; index++) {
 696:	2f 5f       	subi	r18, 0xFF	; 255
 698:	26 17       	cp	r18, r22
 69a:	a0 f2       	brcs	.-88     	; 0x644 <bitsToByteArray+0x8>
            bitstream_byte_array[index / 8] = newByte;
            byte_count++;
            newByte = 0;
        }
    }
    if (index % 7 != 0) {
 69c:	85 e2       	ldi	r24, 0x25	; 37
 69e:	28 9f       	mul	r18, r24
 6a0:	91 2d       	mov	r25, r1
 6a2:	11 24       	eor	r1, r1
 6a4:	82 2f       	mov	r24, r18
 6a6:	89 1b       	sub	r24, r25
 6a8:	86 95       	lsr	r24
 6aa:	89 0f       	add	r24, r25
 6ac:	86 95       	lsr	r24
 6ae:	86 95       	lsr	r24
 6b0:	98 2f       	mov	r25, r24
 6b2:	99 0f       	add	r25, r25
 6b4:	99 0f       	add	r25, r25
 6b6:	99 0f       	add	r25, r25
 6b8:	98 1b       	sub	r25, r24
 6ba:	29 17       	cp	r18, r25
 6bc:	b1 f0       	breq	.+44     	; 0x6ea <bitsToByteArray+0xae>
        /* Shift remaining bits to the left */
        bitstream_byte_array[index / 8] = newByte << (8 - (index % 8));
 6be:	e2 2f       	mov	r30, r18
 6c0:	e6 95       	lsr	r30
 6c2:	e6 95       	lsr	r30
 6c4:	e6 95       	lsr	r30
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	27 70       	andi	r18, 0x07	; 7
 6ca:	88 e0       	ldi	r24, 0x08	; 8
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	82 1b       	sub	r24, r18
 6d0:	91 09       	sbc	r25, r1
 6d2:	e6 50       	subi	r30, 0x06	; 6
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <bitsToByteArray+0x9e>
 6d8:	44 0f       	add	r20, r20
 6da:	8a 95       	dec	r24
 6dc:	ea f7       	brpl	.-6      	; 0x6d8 <bitsToByteArray+0x9c>
 6de:	40 83       	st	Z, r20
        byte_count++;
 6e0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <byte_count>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <byte_count>
 6ea:	08 95       	ret

Disassembly of section .text.sendBitStream:

00000778 <sendBitStream>:
void updateLED(led_t* ledp);
void byteArrayToBits(uint8_t byte_array[], uint8_t bitstreamSize);
void bitsToByteArray(uint8_t bitstream[], uint8_t bitstreamSize);

/* Builds and sends the bitstream via RF*/
void sendBitStream(uint8_t bitstream[], uint8_t bitstreamSize, led_t* ledp) {
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	7c 01       	movw	r14, r24
 784:	c6 2f       	mov	r28, r22
 786:	8a 01       	movw	r16, r20
	uart_puts("\r\nSending bitstream.");
 788:	65 e8       	ldi	r22, 0x85	; 133
 78a:	71 e0       	ldi	r23, 0x01	; 1
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
    bitsToByteArray(bitstream, bitstreamSize);
 792:	6c 2f       	mov	r22, r28
 794:	c7 01       	movw	r24, r14
 796:	0e 94 1e 03 	call	0x63c	; 0x63c <bitsToByteArray>
    memset(TX_command_array, '\0', sizeof (TX_command_array));
 79a:	e2 e2       	ldi	r30, 0x22	; 34
 79c:	f2 e0       	ldi	r31, 0x02	; 2
 79e:	87 e0       	ldi	r24, 0x07	; 7
 7a0:	df 01       	movw	r26, r30
 7a2:	1d 92       	st	X+, r1
 7a4:	8a 95       	dec	r24
 7a6:	e9 f7       	brne	.-6      	; 0x7a2 <sendBitStream+0x2a>
    TX_command_array[ID] = ledp->ledID;
 7a8:	d8 01       	movw	r26, r16
 7aa:	8c 91       	ld	r24, X
 7ac:	80 83       	st	Z, r24
    TX_command_array[IDENTIFIER] = 0xFF; /* To indicate bitstream */
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	81 83       	std	Z+1, r24	; 0x01
    TX_command_array[BIT_COUNT] = bitstreamSize;
 7b2:	c2 83       	std	Z+2, r28	; 0x02
    for (uint8_t i = BITSTREAM; i < (byte_count + byte_count); i++) {
 7b4:	43 e0       	ldi	r20, 0x03	; 3
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <sendBitStream+0x52>
        TX_command_array[i] = bitstream_byte_array[i - BITSTREAM];
 7b8:	f9 01       	movw	r30, r18
 7ba:	e9 50       	subi	r30, 0x09	; 9
 7bc:	fe 4f       	sbci	r31, 0xFE	; 254
 7be:	80 81       	ld	r24, Z
 7c0:	f9 01       	movw	r30, r18
 7c2:	ee 5d       	subi	r30, 0xDE	; 222
 7c4:	fd 4f       	sbci	r31, 0xFD	; 253
 7c6:	80 83       	st	Z, r24
    bitsToByteArray(bitstream, bitstreamSize);
    memset(TX_command_array, '\0', sizeof (TX_command_array));
    TX_command_array[ID] = ledp->ledID;
    TX_command_array[IDENTIFIER] = 0xFF; /* To indicate bitstream */
    TX_command_array[BIT_COUNT] = bitstreamSize;
    for (uint8_t i = BITSTREAM; i < (byte_count + byte_count); i++) {
 7c8:	4f 5f       	subi	r20, 0xFF	; 255
 7ca:	24 2f       	mov	r18, r20
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <byte_count>
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	28 17       	cp	r18, r24
 7da:	39 07       	cpc	r19, r25
 7dc:	6c f3       	brlt	.-38     	; 0x7b8 <sendBitStream+0x40>
        TX_command_array[i] = bitstream_byte_array[i - BITSTREAM];
    }
    nrf24_send(TX_command_array);
 7de:	82 e2       	ldi	r24, 0x22	; 34
 7e0:	92 e0       	ldi	r25, 0x02	; 2
 7e2:	0e 94 2a 04 	call	0x854	; 0x854 <nrf24_send>
	while(nrf24_isSending());
 7e6:	0e 94 ba 05 	call	0xb74	; 0xb74 <nrf24_isSending>
 7ea:	81 11       	cpse	r24, r1
 7ec:	fc cf       	rjmp	.-8      	; 0x7e6 <sendBitStream+0x6e>
}
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	08 95       	ret

Disassembly of section .text.getLedID:

00000bc6 <getLedID>:
    setLedDutyCycle(ledp, LED_DFLT_DUTYCYCLE);
}

uint8_t getLedID(led_t *ledp) {
    return ledp->ledID;
}
 bc6:	fc 01       	movw	r30, r24
 bc8:	80 81       	ld	r24, Z
 bca:	08 95       	ret

Disassembly of section .text.setLedID:

00000bcc <setLedID>:

void setLedID(led_t *ledp, uint8_t ledID) {
    ledp->ledID = ledID;
 bcc:	fc 01       	movw	r30, r24
 bce:	60 83       	st	Z, r22
 bd0:	08 95       	ret

Disassembly of section .text.getLedState:

00000bd2 <getLedState>:
}

uint8_t getLedState(led_t *ledp) {
    return ledp->ledState;
}
 bd2:	fc 01       	movw	r30, r24
 bd4:	81 81       	ldd	r24, Z+1	; 0x01
 bd6:	08 95       	ret

Disassembly of section .text.setLedState:

00000bd8 <setLedState>:

void setLedState(led_t *ledp, uint8_t ledState) {
    ledp->ledState = ledState;
 bd8:	fc 01       	movw	r30, r24
 bda:	61 83       	std	Z+1, r22	; 0x01
 bdc:	08 95       	ret

Disassembly of section .text.getLedMode:

00000bde <getLedMode>:
}

uint8_t getLedMode(led_t *ledp) {
    return ledp->ledMode;
}
 bde:	fc 01       	movw	r30, r24
 be0:	82 81       	ldd	r24, Z+2	; 0x02
 be2:	08 95       	ret

Disassembly of section .text.setLedMode:

00000be4 <setLedMode>:

void setLedMode(led_t *ledp, led_mode_t ledMode) {
    ledp->ledMode = ledMode;
 be4:	fc 01       	movw	r30, r24
 be6:	62 83       	std	Z+2, r22	; 0x02
 be8:	08 95       	ret

Disassembly of section .text.getLedIntensity:

00000bea <getLedIntensity>:
}

uint8_t getLedIntensity(led_t *ledp) {
    return ledp->ledIntensity;
}
 bea:	fc 01       	movw	r30, r24
 bec:	83 81       	ldd	r24, Z+3	; 0x03
 bee:	08 95       	ret

Disassembly of section .text.setLedIntensity:

00000bf0 <setLedIntensity>:

void setLedIntensity(led_t *ledp, uint8_t ledIntensity) {
    ledp->ledIntensity = ledIntensity;
 bf0:	fc 01       	movw	r30, r24
 bf2:	63 83       	std	Z+3, r22	; 0x03
 bf4:	08 95       	ret

Disassembly of section .text.getLedFrequency:

00000bae <getLedFrequency>:
}

uint16_t getLedFrequency(led_t *ledp) {
    return ledp->ledFrequency;
}
 bae:	fc 01       	movw	r30, r24
 bb0:	84 81       	ldd	r24, Z+4	; 0x04
 bb2:	95 81       	ldd	r25, Z+5	; 0x05
 bb4:	08 95       	ret

Disassembly of section .text.setLedFrequency:

00000bb6 <setLedFrequency>:

void setLedFrequency(led_t *ledp, uint16_t ledFrequency) {
    ledp->ledFrequency = ledFrequency;
 bb6:	fc 01       	movw	r30, r24
 bb8:	75 83       	std	Z+5, r23	; 0x05
 bba:	64 83       	std	Z+4, r22	; 0x04
 bbc:	08 95       	ret

Disassembly of section .text.getLedDutyCycle:

00000bf6 <getLedDutyCycle>:
}

uint8_t getLedDutyCycle(led_t *ledp) {
    return ledp->ledDutyCycle;
}
 bf6:	fc 01       	movw	r30, r24
 bf8:	86 81       	ldd	r24, Z+6	; 0x06
 bfa:	08 95       	ret

Disassembly of section .text.setLedDutyCycle:

00000bfc <setLedDutyCycle>:

void setLedDutyCycle(led_t *ledp, uint8_t ledDutyCycle) {
    ledp->ledDutyCycle = ledDutyCycle;
 bfc:	fc 01       	movw	r30, r24
 bfe:	66 83       	std	Z+6, r22	; 0x06
 c00:	08 95       	ret

Disassembly of section .text.main:

00000476 <main>:

extern uint8_t bitstream[BITSTREAM_MAX_BITS];

led_t led; /* LED object */

int main() {
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	28 97       	sbiw	r28, 0x08	; 8
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61

    /* Initialize common modules */
    uart_init();
 48a:	0e 94 7d 05 	call	0xafa	; 0xafa <uart_init>
    uart_puts("\n\x1b[2J\r"); //Clear screen
 48e:	6e ec       	ldi	r22, 0xCE	; 206
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
    uart_puts("\r\nInitializing.");
 498:	65 ed       	ldi	r22, 0xD5	; 213
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
}

inline static void spi_master_init(void) {
	SPI_DDR = SPI_DDR | _BV(SPI_SS_NRF24L01) |_BV(SPI_SS_DIGPOTSLAVE) | _BV(SPI_MOSI) |  _BV(SPI_SCK); /* Set pins as output */
 4a2:	84 b1       	in	r24, 0x04	; 4
 4a4:	8e 62       	ori	r24, 0x2E	; 46
 4a6:	84 b9       	out	0x04, r24	; 4
    SPCR = _BV(SPE) | 0 | _BV(MSTR) | (SPI_MODE0 & SPI_MODE_MASK) | (SPI_CLOCK_DIV4 & SPI_CLOCK_MASK);
 4a8:	80 e5       	ldi	r24, 0x50	; 80
 4aa:	8c bd       	out	0x2c, r24	; 44

    spi_master_init();
    nrf24_init();
 4ac:	0e 94 b3 04 	call	0x966	; 0x966 <nrf24_init>
    nrf24_config(NRF24_CHANNEL, NRF24_PAYLENGTH);
 4b0:	67 e0       	ldi	r22, 0x07	; 7
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrf24_config>
    uint8_t bitstreamSize = 0; /* Dynamic size of bitstream */

    uint8_t uart_char;

    bool input_type = false; /* false = normal command ; true = bitstream */
    uart_puts("\r\n\nWaiting command input.");
 4b8:	65 ee       	ldi	r22, 0xE5	; 229
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
	uart_puts("\r\n($ID,State,Mode,Intensity,Freq,Duty,*)\r\n\n");
 4c2:	6f ef       	ldi	r22, 0xFF	; 255
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>

    sei();
 4cc:	78 94       	sei
    uint8_t bitstreamIdx = 0;
    uint8_t bitstreamSize = 0; /* Dynamic size of bitstream */

    uint8_t uart_char;

    bool input_type = false; /* false = normal command ; true = bitstream */
 4ce:	f1 2c       	mov	r15, r1

    uint8_t msgBuffer[INPUT_BUFFER_SIZE]; /* Command buffer */
    uint8_t msgbufferIdx = 0; /* Current buffer index */
    uint8_t command_pos = 0; /* What command is being read */

    uint8_t bitstreamIdx = 0;
 4d0:	d1 2c       	mov	r13, r1
    nrf24_config(NRF24_CHANNEL, NRF24_PAYLENGTH);
	

    uint8_t msgBuffer[INPUT_BUFFER_SIZE]; /* Command buffer */
    uint8_t msgbufferIdx = 0; /* Current buffer index */
    uint8_t command_pos = 0; /* What command is being read */
 4d2:	00 e0       	ldi	r16, 0x00	; 0
    nrf24_init();
    nrf24_config(NRF24_CHANNEL, NRF24_PAYLENGTH);
	

    uint8_t msgBuffer[INPUT_BUFFER_SIZE]; /* Command buffer */
    uint8_t msgbufferIdx = 0; /* Current buffer index */
 4d4:	e1 2c       	mov	r14, r1
	uart_puts("\r\n($ID,State,Mode,Intensity,Freq,Duty,*)\r\n\n");

    sei();

    while (1) {
        uart_char = uart_getc();
 4d6:	0e 94 c9 05 	call	0xb92	; 0xb92 <uart_getc>
 4da:	18 2f       	mov	r17, r24
        uart_putc(uart_char);
 4dc:	0e 94 c2 05 	call	0xb84	; 0xb84 <uart_putc>
        switch (uart_char) {
 4e0:	1a 32       	cpi	r17, 0x2A	; 42
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <main+0x70>
 4e4:	83 c0       	rjmp	.+262    	; 0x5ec <main+0x176>
 4e6:	30 f4       	brcc	.+12     	; 0x4f4 <main+0x7e>
 4e8:	1d 30       	cpi	r17, 0x0D	; 13
 4ea:	09 f4       	brne	.+2      	; 0x4ee <main+0x78>
 4ec:	8e c0       	rjmp	.+284    	; 0x60a <main+0x194>
 4ee:	14 32       	cpi	r17, 0x24	; 36
 4f0:	91 f0       	breq	.+36     	; 0x516 <main+0xa0>
 4f2:	91 c0       	rjmp	.+290    	; 0x616 <main+0x1a0>
 4f4:	12 34       	cpi	r17, 0x42	; 66
 4f6:	29 f0       	breq	.+10     	; 0x502 <main+0x8c>
 4f8:	12 36       	cpi	r17, 0x62	; 98
 4fa:	19 f0       	breq	.+6      	; 0x502 <main+0x8c>
 4fc:	1c 32       	cpi	r17, 0x2C	; 44
 4fe:	b9 f0       	breq	.+46     	; 0x52e <main+0xb8>
 500:	8a c0       	rjmp	.+276    	; 0x616 <main+0x1a0>

            case 'b': /* Start of bitstream input */
            case 'B':
                memset(bitstream, '\0', BITSTREAM_MAX_BITS);
 502:	80 ef       	ldi	r24, 0xF0	; 240
 504:	ea e0       	ldi	r30, 0x0A	; 10
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	df 01       	movw	r26, r30
 50a:	1d 92       	st	X+, r1
 50c:	8a 95       	dec	r24
 50e:	e9 f7       	brne	.-6      	; 0x50a <main+0x94>
                bitstreamIdx = 0;
                input_type = BITSTREAM;
 510:	f1 2c       	mov	r15, r1
        switch (uart_char) {

            case 'b': /* Start of bitstream input */
            case 'B':
                memset(bitstream, '\0', BITSTREAM_MAX_BITS);
                bitstreamIdx = 0;
 512:	d1 2c       	mov	r13, r1
                input_type = BITSTREAM;
                break;
 514:	e0 cf       	rjmp	.-64     	; 0x4d6 <main+0x60>

            case '$': /* Start of command message */
                msgbufferIdx = 0;
                command_pos = 0;
                memset(msgBuffer, 0, INPUT_BUFFER_SIZE);
 516:	fe 01       	movw	r30, r28
 518:	31 96       	adiw	r30, 0x01	; 1
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	df 01       	movw	r26, r30
 51e:	1d 92       	st	X+, r1
 520:	8a 95       	dec	r24
 522:	e9 f7       	brne	.-6      	; 0x51e <main+0xa8>
                input_type = COMMAND;
 524:	ff 24       	eor	r15, r15
 526:	f3 94       	inc	r15
                input_type = BITSTREAM;
                break;

            case '$': /* Start of command message */
                msgbufferIdx = 0;
                command_pos = 0;
 528:	00 e0       	ldi	r16, 0x00	; 0
                bitstreamIdx = 0;
                input_type = BITSTREAM;
                break;

            case '$': /* Start of command message */
                msgbufferIdx = 0;
 52a:	e1 2c       	mov	r14, r1
                command_pos = 0;
                memset(msgBuffer, 0, INPUT_BUFFER_SIZE);
                input_type = COMMAND;
                break;
 52c:	d4 cf       	rjmp	.-88     	; 0x4d6 <main+0x60>

            case ',': /* Command delimiter*/
                switch (command_pos) {
 52e:	02 30       	cpi	r16, 0x02	; 2
 530:	21 f1       	breq	.+72     	; 0x57a <main+0x104>
 532:	28 f4       	brcc	.+10     	; 0x53e <main+0xc8>
 534:	00 23       	and	r16, r16
 536:	49 f0       	breq	.+18     	; 0x54a <main+0xd4>
 538:	01 30       	cpi	r16, 0x01	; 1
 53a:	99 f0       	breq	.+38     	; 0x562 <main+0xec>
 53c:	4d c0       	rjmp	.+154    	; 0x5d8 <main+0x162>
 53e:	04 30       	cpi	r16, 0x04	; 4
 540:	a1 f1       	breq	.+104    	; 0x5aa <main+0x134>
 542:	38 f1       	brcs	.+78     	; 0x592 <main+0x11c>
 544:	05 30       	cpi	r16, 0x05	; 5
 546:	e9 f1       	breq	.+122    	; 0x5c2 <main+0x14c>
 548:	47 c0       	rjmp	.+142    	; 0x5d8 <main+0x162>
                        /*NOTE: THERE IS NO VERIFICATION OF INPUTS */
                    case 0:
                        setLedID(&led, (uint8_t) atoi((char*) msgBuffer));
 54a:	be 01       	movw	r22, r28
 54c:	6f 5f       	subi	r22, 0xFF	; 255
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	0e 94 df 05 	call	0xbbe	; 0xbbe <atoi>
 556:	68 2f       	mov	r22, r24
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <setLedID>
                        break;
 560:	3b c0       	rjmp	.+118    	; 0x5d8 <main+0x162>
                    case 1:
                        setLedState(&led, (uint8_t) atoi((char*) msgBuffer));
 562:	be 01       	movw	r22, r28
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	0e 94 df 05 	call	0xbbe	; 0xbbe <atoi>
 56e:	68 2f       	mov	r22, r24
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <setLedState>
                        break;
 578:	2f c0       	rjmp	.+94     	; 0x5d8 <main+0x162>
                    case 2:
                        setLedMode(&led, (uint8_t) atoi((char*) msgBuffer));
 57a:	be 01       	movw	r22, r28
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	0e 94 df 05 	call	0xbbe	; 0xbbe <atoi>
 586:	68 2f       	mov	r22, r24
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <setLedMode>
                        break;
 590:	23 c0       	rjmp	.+70     	; 0x5d8 <main+0x162>
                    case 3:
                        setLedIntensity(&led, (uint8_t) atoi((char*) msgBuffer));
 592:	be 01       	movw	r22, r28
 594:	6f 5f       	subi	r22, 0xFF	; 255
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	80 e8       	ldi	r24, 0x80	; 128
 59a:	0e 94 df 05 	call	0xbbe	; 0xbbe <atoi>
 59e:	68 2f       	mov	r22, r24
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <setLedIntensity>
                        break;
 5a8:	17 c0       	rjmp	.+46     	; 0x5d8 <main+0x162>
                    case 4:
                        setLedFrequency(&led, (uint16_t) atoi((char*) msgBuffer));
 5aa:	be 01       	movw	r22, r28
 5ac:	6f 5f       	subi	r22, 0xFF	; 255
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	80 e8       	ldi	r24, 0x80	; 128
 5b2:	0e 94 df 05 	call	0xbbe	; 0xbbe <atoi>
 5b6:	bc 01       	movw	r22, r24
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <setLedFrequency>
                        break;
 5c0:	0b c0       	rjmp	.+22     	; 0x5d8 <main+0x162>
                    case 5:
                        setLedDutyCycle(&led, (uint8_t) atoi((char*) msgBuffer));
 5c2:	be 01       	movw	r22, r28
 5c4:	6f 5f       	subi	r22, 0xFF	; 255
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	0e 94 df 05 	call	0xbbe	; 0xbbe <atoi>
 5ce:	68 2f       	mov	r22, r24
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <setLedDutyCycle>
                        break;
                    default:
                        break;
                }
                memset(msgBuffer, '\0', INPUT_BUFFER_SIZE);
 5d8:	fe 01       	movw	r30, r28
 5da:	31 96       	adiw	r30, 0x01	; 1
 5dc:	88 e0       	ldi	r24, 0x08	; 8
 5de:	df 01       	movw	r26, r30
 5e0:	1d 92       	st	X+, r1
 5e2:	8a 95       	dec	r24
 5e4:	e9 f7       	brne	.-6      	; 0x5e0 <main+0x16a>
                command_pos++;
 5e6:	0f 5f       	subi	r16, 0xFF	; 255
                msgbufferIdx = 0;
 5e8:	e1 2c       	mov	r14, r1
                break;
 5ea:	75 cf       	rjmp	.-278    	; 0x4d6 <main+0x60>
            case '*': /* End of message */
                if (input_type == BITSTREAM) {
 5ec:	f1 10       	cpse	r15, r1
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <main+0x18a>
                    bitstreamSize = bitstreamIdx;
                    sendBitStream(bitstream, bitstreamSize, &led);
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	51 e0       	ldi	r21, 0x01	; 1
 5f4:	6d 2d       	mov	r22, r13
 5f6:	8a e0       	ldi	r24, 0x0A	; 10
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 bc 03 	call	0x778	; 0x778 <sendBitStream>
 5fe:	6b cf       	rjmp	.-298    	; 0x4d6 <main+0x60>
                }
                else {
                    sendCommand(&led); /* Generate array of bytes to send to RF module*/
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 cf 04 	call	0x99e	; 0x99e <sendCommand>
 608:	66 cf       	rjmp	.-308    	; 0x4d6 <main+0x60>
                }
                break;

            case '\r':
                uart_puts("\r\n"); //Clear screen/
 60a:	6b e2       	ldi	r22, 0x2B	; 43
 60c:	71 e0       	ldi	r23, 0x01	; 1
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
                break;
 614:	60 cf       	rjmp	.-320    	; 0x4d6 <main+0x60>

            default: /* Add character to buffer */
                if (input_type == BITSTREAM) {
 616:	f1 10       	cpse	r15, r1
 618:	08 c0       	rjmp	.+16     	; 0x62a <main+0x1b4>
                    bitstream[bitstreamIdx] = uart_char - '0'; /* char to int */
 61a:	ed 2d       	mov	r30, r13
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	e6 5f       	subi	r30, 0xF6	; 246
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	10 53       	subi	r17, 0x30	; 48
 624:	10 83       	st	Z, r17
                    bitstreamIdx++;
 626:	d3 94       	inc	r13
 628:	56 cf       	rjmp	.-340    	; 0x4d6 <main+0x60>
                } else {
                    msgBuffer[msgbufferIdx] = uart_char;
 62a:	e1 e0       	ldi	r30, 0x01	; 1
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	ec 0f       	add	r30, r28
 630:	fd 1f       	adc	r31, r29
 632:	ee 0d       	add	r30, r14
 634:	f1 1d       	adc	r31, r1
 636:	10 83       	st	Z, r17
                    msgbufferIdx++;
 638:	e3 94       	inc	r14
 63a:	4d cf       	rjmp	.-358    	; 0x4d6 <main+0x60>

Disassembly of section .text.nrf24_transmitSync:

00000a36 <nrf24_transmitSync>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 a36:	ac 01       	movw	r20, r24
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0b c0       	rjmp	.+22     	; 0xa52 <nrf24_transmitSync+0x1c>
 a3c:	fa 01       	movw	r30, r20
 a3e:	e9 0f       	add	r30, r25
 a40:	f1 1d       	adc	r31, r1
 a42:	20 81       	ld	r18, Z
 a44:	8d b5       	in	r24, 0x2d	; 45
 a46:	2e bd       	out	0x2e, r18	; 46
 a48:	0d b4       	in	r0, 0x2d	; 45
 a4a:	07 fe       	sbrs	r0, 7
 a4c:	fd cf       	rjmp	.-6      	; 0xa48 <nrf24_transmitSync+0x12>
 a4e:	8e b5       	in	r24, 0x2e	; 46
 a50:	9f 5f       	subi	r25, 0xFF	; 255
 a52:	96 17       	cp	r25, r22
 a54:	98 f3       	brcs	.-26     	; 0xa3c <nrf24_transmitSync+0x6>
 a56:	08 95       	ret

Disassembly of section .text.nrf24_ce_digitalWrite:

00000b28 <nrf24_ce_digitalWrite>:
    nrf24_csn_digitalWrite(HIGH);
}

void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
 b28:	88 23       	and	r24, r24
 b2a:	21 f0       	breq	.+8      	; 0xb34 <nrf24_ce_digitalWrite+0xc>
	{
		set_bit(NRF24_PORT,NRF24_CE);
 b2c:	85 b1       	in	r24, 0x05	; 5
 b2e:	81 60       	ori	r24, 0x01	; 1
 b30:	85 b9       	out	0x05, r24	; 5
 b32:	08 95       	ret
	}
	else
	{
		clr_bit(NRF24_PORT,NRF24_CE);
 b34:	85 b1       	in	r24, 0x05	; 5
 b36:	8e 7f       	andi	r24, 0xFE	; 254
 b38:	85 b9       	out	0x05, r24	; 5
 b3a:	08 95       	ret

Disassembly of section .text.nrf24_csn_digitalWrite:

00000b3c <nrf24_csn_digitalWrite>:

// MOVE THESE TO SPI FILE
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 b3c:	88 23       	and	r24, r24
 b3e:	21 f0       	breq	.+8      	; 0xb48 <nrf24_csn_digitalWrite+0xc>
	{
		set_bit(SPI_PORT,SPI_SS_NRF24L01);
 b40:	85 b1       	in	r24, 0x05	; 5
 b42:	84 60       	ori	r24, 0x04	; 4
 b44:	85 b9       	out	0x05, r24	; 5
 b46:	08 95       	ret
	}
	else
	{
		clr_bit(SPI_PORT,SPI_SS_NRF24L01);
 b48:	85 b1       	in	r24, 0x05	; 5
 b4a:	8b 7f       	andi	r24, 0xFB	; 251
 b4c:	85 b9       	out	0x05, r24	; 5
 b4e:	08 95       	ret

Disassembly of section .text.nrf24_getStatus:

00000a58 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 a58:	cf 93       	push	r28
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

inline static uint8_t spi_exchange(uint8_t data) {
	
	uint8_t spsr_dummy = SPSR; //Dummy-read to clear flags
 a60:	8d b5       	in	r24, 0x2d	; 45

    SPDR = data;
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF))); /* Waits until SPIF is set */
 a66:	0d b4       	in	r0, 0x2d	; 45
 a68:	07 fe       	sbrs	r0, 7
 a6a:	fd cf       	rjmp	.-6      	; 0xa66 <nrf24_getStatus+0xe>
    return SPDR; /* Reading the data register after reading SPIF clears SPIF */
 a6c:	ce b5       	in	r28, 0x2e	; 46
    rv = spi_exchange(NOP);
    nrf24_csn_digitalWrite(HIGH);
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
    return rv;
}
 a74:	8c 2f       	mov	r24, r28
 a76:	cf 91       	pop	r28
 a78:	08 95       	ret

Disassembly of section .text.nrf24_isSending:

00000b74 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 b74:	0e 94 2c 05 	call	0xa58	; 0xa58 <nrf24_getStatus>
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 b78:	80 73       	andi	r24, 0x30	; 48
 b7a:	11 f0       	breq	.+4      	; 0xb80 <nrf24_isSending+0xc>
    {        
        return 0; /* false */
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	08 95       	ret
    }

    return 1; /* true */
 b80:	81 e0       	ldi	r24, 0x01	; 1

}
 b82:	08 95       	ret

Disassembly of section .text.nrf24_configRegister:

000009d4 <nrf24_configRegister>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
 9d8:	c8 2f       	mov	r28, r24
 9da:	d6 2f       	mov	r29, r22
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 9e2:	cf 71       	andi	r28, 0x1F	; 31
 9e4:	c0 62       	ori	r28, 0x20	; 32
 9e6:	8d b5       	in	r24, 0x2d	; 45
 9e8:	ce bd       	out	0x2e, r28	; 46
 9ea:	0d b4       	in	r0, 0x2d	; 45
 9ec:	07 fe       	sbrs	r0, 7
 9ee:	fd cf       	rjmp	.-6      	; 0x9ea <nrf24_configRegister+0x16>
 9f0:	8e b5       	in	r24, 0x2e	; 46
 9f2:	8d b5       	in	r24, 0x2d	; 45
 9f4:	de bd       	out	0x2e, r29	; 46
 9f6:	0d b4       	in	r0, 0x2d	; 45
 9f8:	07 fe       	sbrs	r0, 7
 9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <nrf24_configRegister+0x22>
 9fc:	8e b5       	in	r24, 0x2e	; 46
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	08 95       	ret

Disassembly of section .text.nrf24_powerUpTx:

00000b50 <nrf24_powerUpTx>:
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 b50:	60 e7       	ldi	r22, 0x70	; 112
 b52:	87 e0       	ldi	r24, 0x07	; 7
 b54:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 b58:	6a e0       	ldi	r22, 0x0A	; 10
 b5a:	80 e0       	ldi	r24, 0x00	; 0
 b5c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 b60:	08 95       	ret

Disassembly of section .text.nrf24_powerUpRx:

0000092e <nrf24_powerUpRx>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 934:	8d b5       	in	r24, 0x2d	; 45
 936:	82 ee       	ldi	r24, 0xE2	; 226
 938:	8e bd       	out	0x2e, r24	; 46
 93a:	0d b4       	in	r0, 0x2d	; 45
 93c:	07 fe       	sbrs	r0, 7
 93e:	fd cf       	rjmp	.-6      	; 0x93a <nrf24_powerUpRx+0xc>
 940:	8e b5       	in	r24, 0x2e	; 46
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 948:	60 e7       	ldi	r22, 0x70	; 112
 94a:	87 e0       	ldi	r24, 0x07	; 7
 94c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
 956:	6b e0       	ldi	r22, 0x0B	; 11
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
 964:	08 95       	ret

Disassembly of section .text.nrf24_config:

000006ec <nrf24_config>:
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	c8 2f       	mov	r28, r24
 6f2:	d6 2f       	mov	r29, r22
 6f4:	6e e2       	ldi	r22, 0x2E	; 46
 6f6:	71 e0       	ldi	r23, 0x01	; 1
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
 6fe:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <payload_len>
 702:	6c 2f       	mov	r22, r28
 704:	85 e0       	ldi	r24, 0x05	; 5
 706:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	81 e1       	ldi	r24, 0x11	; 17
 70e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 712:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <payload_len>
 716:	82 e1       	ldi	r24, 0x12	; 18
 718:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	83 e1       	ldi	r24, 0x13	; 19
 720:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	84 e1       	ldi	r24, 0x14	; 20
 728:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	85 e1       	ldi	r24, 0x15	; 21
 730:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	86 e1       	ldi	r24, 0x16	; 22
 738:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 73c:	66 e0       	ldi	r22, 0x06	; 6
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 744:	68 e0       	ldi	r22, 0x08	; 8
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 754:	63 e0       	ldi	r22, 0x03	; 3
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	8c e1       	ldi	r24, 0x1C	; 28
 760:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24_configRegister>
 764:	0e 94 97 04 	call	0x92e	; 0x92e <nrf24_powerUpRx>
 768:	6c e4       	ldi	r22, 0x4C	; 76
 76a:	71 e0       	ldi	r23, 0x01	; 1
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	08 95       	ret

Disassembly of section .text.nrf24_send:

00000854 <nrf24_send>:
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	ec 01       	movw	r28, r24
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
 860:	0e 94 a8 05 	call	0xb50	; 0xb50 <nrf24_powerUpTx>
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 86a:	8d b5       	in	r24, 0x2d	; 45
 86c:	81 ee       	ldi	r24, 0xE1	; 225
 86e:	8e bd       	out	0x2e, r24	; 46
 870:	0d b4       	in	r0, 0x2d	; 45
 872:	07 fe       	sbrs	r0, 7
 874:	fd cf       	rjmp	.-6      	; 0x870 <nrf24_send+0x1c>
 876:	8e b5       	in	r24, 0x2e	; 46
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 884:	8d b5       	in	r24, 0x2d	; 45
 886:	80 ea       	ldi	r24, 0xA0	; 160
 888:	8e bd       	out	0x2e, r24	; 46
 88a:	0d b4       	in	r0, 0x2d	; 45
 88c:	07 fe       	sbrs	r0, 7
 88e:	fd cf       	rjmp	.-6      	; 0x88a <nrf24_send+0x36>
 890:	8e b5       	in	r24, 0x2e	; 46
 892:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <payload_len>
 896:	ce 01       	movw	r24, r28
 898:	0e 94 1b 05 	call	0xa36	; 0xa36 <nrf24_transmitSync>
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

Disassembly of section .text.nrf24_writeRegister:

000008f2 <nrf24_writeRegister>:
 8f2:	0f 93       	push	r16
 8f4:	1f 93       	push	r17
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	c8 2f       	mov	r28, r24
 8fc:	8b 01       	movw	r16, r22
 8fe:	d4 2f       	mov	r29, r20
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 906:	cf 71       	andi	r28, 0x1F	; 31
 908:	c0 62       	ori	r28, 0x20	; 32
 90a:	8d b5       	in	r24, 0x2d	; 45
 90c:	ce bd       	out	0x2e, r28	; 46
 90e:	0d b4       	in	r0, 0x2d	; 45
 910:	07 fe       	sbrs	r0, 7
 912:	fd cf       	rjmp	.-6      	; 0x90e <__stack+0xf>
 914:	8e b5       	in	r24, 0x2e	; 46
 916:	6d 2f       	mov	r22, r29
 918:	c8 01       	movw	r24, r16
 91a:	0e 94 1b 05 	call	0xa36	; 0xa36 <nrf24_transmitSync>
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

Disassembly of section .text.nrf24_rx_address:

00000a7a <nrf24_rx_address>:
	uart_puts(" Done!");
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 a86:	45 e0       	ldi	r20, 0x05	; 5
 a88:	be 01       	movw	r22, r28
 a8a:	8b e0       	ldi	r24, 0x0B	; 11
 a8c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
}
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	08 95       	ret

Disassembly of section .text.nrf24_tx_address:

00000a9c <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 aa2:	45 e0       	ldi	r20, 0x05	; 5
 aa4:	bc 01       	movw	r22, r24
 aa6:	8a e0       	ldi	r24, 0x0A	; 10
 aa8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 aac:	45 e0       	ldi	r20, 0x05	; 5
 aae:	be 01       	movw	r22, r28
 ab0:	80 e1       	ldi	r24, 0x10	; 16
 ab2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <nrf24_writeRegister>
}
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	08 95       	ret

Disassembly of section .text.nrf24_init:

00000966 <nrf24_init>:
    nrf24_csn_digitalWrite(LOW);
    spi_exchange(R_RX_PL_WID);
    status = spi_exchange(0x00);
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 966:	63 e5       	ldi	r22, 0x53	; 83
 968:	71 e0       	ldi	r23, 0x01	; 1
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
 970:	84 b1       	in	r24, 0x04	; 4
 972:	81 60       	ori	r24, 0x01	; 1
 974:	84 b9       	out	0x04, r24	; 4
 976:	88 e1       	ldi	r24, 0x18	; 24
 978:	92 e0       	ldi	r25, 0x02	; 2
 97a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <nrf24_tx_address>
 97e:	8d e1       	ldi	r24, 0x1D	; 29
 980:	92 e0       	ldi	r25, 0x02	; 2
 982:	0e 94 3d 05 	call	0xa7a	; 0xa7a <nrf24_rx_address>
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf24_ce_digitalWrite>
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <nrf24_csn_digitalWrite>
 992:	6c e4       	ldi	r22, 0x4C	; 76
 994:	71 e0       	ldi	r23, 0x01	; 1
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_puts>
 99c:	08 95       	ret

Disassembly of section .text.uart_init:

00000afa <uart_init>:
#include "uart.h"

void uart_init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 afa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 afe:	87 e6       	ldi	r24, 0x67	; 103
 b00:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 b04:	86 e0       	ldi	r24, 0x06	; 6
 b06:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 b0a:	88 e1       	ldi	r24, 0x18	; 24
 b0c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 b10:	08 95       	ret

Disassembly of section .text.uart_putc:

00000b84 <uart_putc>:
}

void uart_putc(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 b84:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 b88:	95 ff       	sbrs	r25, 5
 b8a:	fc cf       	rjmp	.-8      	; 0xb84 <uart_putc>
	UDR0 = DataByte;
 b8c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b90:	08 95       	ret

Disassembly of section .text.uart_puts:

00000a0a <uart_puts>:
}

void uart_puts(const char *s )
{
 a0a:	cf 92       	push	r12
 a0c:	df 92       	push	r13
 a0e:	ef 92       	push	r14
 a10:	6b 01       	movw	r12, r22
 a12:	e8 2e       	mov	r14, r24
	while (*s)
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <uart_puts+0x18>
	uart_putc(*s++);
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	c9 1a       	sub	r12, r25
 a1a:	d9 0a       	sbc	r13, r25
 a1c:	e9 0a       	sbc	r14, r25
 a1e:	0e 94 c2 05 	call	0xb84	; 0xb84 <uart_putc>
	UDR0 = DataByte;
}

void uart_puts(const char *s )
{
	while (*s)
 a22:	f6 01       	movw	r30, r12
 a24:	84 91       	lpm	r24, Z
 a26:	e7 fc       	sbrc	r14, 7
 a28:	80 81       	ld	r24, Z
 a2a:	81 11       	cpse	r24, r1
 a2c:	f4 cf       	rjmp	.-24     	; 0xa16 <uart_puts+0xc>
	uart_putc(*s++);

}/* uart_puts */
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	08 95       	ret

Disassembly of section .text.uart_getc:

00000b92 <uart_getc>:

uint8_t uart_getc()
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
 b92:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 b96:	88 23       	and	r24, r24
 b98:	e4 f7       	brge	.-8      	; 0xb92 <uart_getc>
	DataByte = UDR0 ;
 b9a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return DataByte;
}
 b9e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000bbe <atoi>:
 bbe:	0e 94 d0 05 	call	0xba0	; 0xba0 <atol>
 bc2:	cb 01       	movw	r24, r22
 bc4:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ba0 <atol>:
 ba0:	2a e0       	ldi	r18, 0x0A	; 10
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	40 e0       	ldi	r20, 0x00	; 0
 ba6:	50 e0       	ldi	r21, 0x00	; 0
 ba8:	0e 94 cd 00 	call	0x19a	; 0x19a <strtol>
 bac:	08 95       	ret

Disassembly of section .text.avrlibc:

0000019a <strtol>:
 19a:	2f 92       	push	r2
 19c:	3f 92       	push	r3
 19e:	4f 92       	push	r4
 1a0:	5f 92       	push	r5
 1a2:	6f 92       	push	r6
 1a4:	7f 92       	push	r7
 1a6:	8f 92       	push	r8
 1a8:	af 92       	push	r10
 1aa:	bf 92       	push	r11
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <strtol+0x22>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <strtol+0x24>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <strtol+0x26>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	3b 01       	movw	r6, r22
 1c6:	88 2e       	mov	r8, r24
 1c8:	5a 01       	movw	r10, r20
 1ca:	19 01       	movw	r2, r18
 1cc:	41 15       	cp	r20, r1
 1ce:	51 05       	cpc	r21, r1
 1d0:	21 f0       	breq	.+8      	; 0x1da <strtol+0x40>
 1d2:	fa 01       	movw	r30, r20
 1d4:	60 83       	st	Z, r22
 1d6:	71 83       	std	Z+1, r23	; 0x01
 1d8:	82 83       	std	Z+2, r24	; 0x02
 1da:	21 14       	cp	r2, r1
 1dc:	31 04       	cpc	r3, r1
 1de:	29 f0       	breq	.+10     	; 0x1ea <strtol+0x50>
 1e0:	c1 01       	movw	r24, r2
 1e2:	02 97       	sbiw	r24, 0x02	; 2
 1e4:	83 97       	sbiw	r24, 0x23	; 35
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <strtol+0x50>
 1e8:	1a c1       	rjmp	.+564    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 1ea:	e8 2c       	mov	r14, r8
 1ec:	63 01       	movw	r12, r6
 1ee:	ff ef       	ldi	r31, 0xFF	; 255
 1f0:	cf 1a       	sub	r12, r31
 1f2:	df 0a       	sbc	r13, r31
 1f4:	ef 0a       	sbc	r14, r31
 1f6:	f3 01       	movw	r30, r6
 1f8:	14 91       	lpm	r17, Z
 1fa:	87 fc       	sbrc	r8, 7
 1fc:	10 81       	ld	r17, Z
 1fe:	81 2f       	mov	r24, r17
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 b1 05 	call	0xb62	; 0xb62 <isspace>
 206:	4c 2d       	mov	r20, r12
 208:	3d 2d       	mov	r19, r13
 20a:	2e 2d       	mov	r18, r14
 20c:	89 2b       	or	r24, r25
 20e:	19 f0       	breq	.+6      	; 0x216 <strtol+0x7c>
 210:	36 01       	movw	r6, r12
 212:	8e 2c       	mov	r8, r14
 214:	ea cf       	rjmp	.-44     	; 0x1ea <strtol+0x50>
 216:	1d 32       	cpi	r17, 0x2D	; 45
 218:	69 f4       	brne	.+26     	; 0x234 <strtol+0x9a>
 21a:	e8 2c       	mov	r14, r8
 21c:	63 01       	movw	r12, r6
 21e:	52 e0       	ldi	r21, 0x02	; 2
 220:	c5 0e       	add	r12, r21
 222:	d1 1c       	adc	r13, r1
 224:	e1 1c       	adc	r14, r1
 226:	e4 2f       	mov	r30, r20
 228:	f3 2f       	mov	r31, r19
 22a:	14 91       	lpm	r17, Z
 22c:	27 fd       	sbrc	r18, 7
 22e:	10 81       	ld	r17, Z
 230:	01 e0       	ldi	r16, 0x01	; 1
 232:	0e c0       	rjmp	.+28     	; 0x250 <strtol+0xb6>
 234:	1b 32       	cpi	r17, 0x2B	; 43
 236:	59 f4       	brne	.+22     	; 0x24e <strtol+0xb4>
 238:	e8 2c       	mov	r14, r8
 23a:	63 01       	movw	r12, r6
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	c8 0e       	add	r12, r24
 240:	d1 1c       	adc	r13, r1
 242:	e1 1c       	adc	r14, r1
 244:	e4 2f       	mov	r30, r20
 246:	f3 2f       	mov	r31, r19
 248:	14 91       	lpm	r17, Z
 24a:	27 fd       	sbrc	r18, 7
 24c:	10 81       	ld	r17, Z
 24e:	00 e0       	ldi	r16, 0x00	; 0
 250:	21 14       	cp	r2, r1
 252:	31 04       	cpc	r3, r1
 254:	09 f1       	breq	.+66     	; 0x298 <strtol+0xfe>
 256:	90 e1       	ldi	r25, 0x10	; 16
 258:	29 16       	cp	r2, r25
 25a:	31 04       	cpc	r3, r1
 25c:	29 f4       	brne	.+10     	; 0x268 <strtol+0xce>
 25e:	3f c0       	rjmp	.+126    	; 0x2de <strtol+0x144>
 260:	10 e3       	ldi	r17, 0x30	; 48
 262:	21 14       	cp	r2, r1
 264:	31 04       	cpc	r3, r1
 266:	21 f1       	breq	.+72     	; 0x2b0 <strtol+0x116>
 268:	f8 e0       	ldi	r31, 0x08	; 8
 26a:	2f 16       	cp	r2, r31
 26c:	31 04       	cpc	r3, r1
 26e:	01 f1       	breq	.+64     	; 0x2b0 <strtol+0x116>
 270:	54 f4       	brge	.+20     	; 0x286 <strtol+0xec>
 272:	32 e0       	ldi	r19, 0x02	; 2
 274:	23 16       	cp	r2, r19
 276:	31 04       	cpc	r3, r1
 278:	21 f5       	brne	.+72     	; 0x2c2 <strtol+0x128>
 27a:	41 2c       	mov	r4, r1
 27c:	51 2c       	mov	r5, r1
 27e:	61 2c       	mov	r6, r1
 280:	50 e4       	ldi	r21, 0x40	; 64
 282:	75 2e       	mov	r7, r21
 284:	4b c0       	rjmp	.+150    	; 0x31c <strtol+0x182>
 286:	4a e0       	ldi	r20, 0x0A	; 10
 288:	24 16       	cp	r2, r20
 28a:	31 04       	cpc	r3, r1
 28c:	39 f0       	breq	.+14     	; 0x29c <strtol+0x102>
 28e:	50 e1       	ldi	r21, 0x10	; 16
 290:	25 16       	cp	r2, r21
 292:	31 04       	cpc	r3, r1
 294:	b1 f4       	brne	.+44     	; 0x2c2 <strtol+0x128>
 296:	3d c0       	rjmp	.+122    	; 0x312 <strtol+0x178>
 298:	10 33       	cpi	r17, 0x30	; 48
 29a:	19 f1       	breq	.+70     	; 0x2e2 <strtol+0x148>
 29c:	3a e0       	ldi	r19, 0x0A	; 10
 29e:	23 2e       	mov	r2, r19
 2a0:	31 2c       	mov	r3, r1
 2a2:	4c ec       	ldi	r20, 0xCC	; 204
 2a4:	44 2e       	mov	r4, r20
 2a6:	54 2c       	mov	r5, r4
 2a8:	64 2c       	mov	r6, r4
 2aa:	4c e0       	ldi	r20, 0x0C	; 12
 2ac:	74 2e       	mov	r7, r20
 2ae:	36 c0       	rjmp	.+108    	; 0x31c <strtol+0x182>
 2b0:	98 e0       	ldi	r25, 0x08	; 8
 2b2:	29 2e       	mov	r2, r25
 2b4:	31 2c       	mov	r3, r1
 2b6:	41 2c       	mov	r4, r1
 2b8:	51 2c       	mov	r5, r1
 2ba:	61 2c       	mov	r6, r1
 2bc:	20 e1       	ldi	r18, 0x10	; 16
 2be:	72 2e       	mov	r7, r18
 2c0:	2d c0       	rjmp	.+90     	; 0x31c <strtol+0x182>
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e8       	ldi	r25, 0x80	; 128
 2ca:	91 01       	movw	r18, r2
 2cc:	03 2c       	mov	r0, r3
 2ce:	00 0c       	add	r0, r0
 2d0:	44 0b       	sbc	r20, r20
 2d2:	55 0b       	sbc	r21, r21
 2d4:	0e 94 57 04 	call	0x8ae	; 0x8ae <__udivmodsi4>
 2d8:	29 01       	movw	r4, r18
 2da:	3a 01       	movw	r6, r20
 2dc:	1f c0       	rjmp	.+62     	; 0x31c <strtol+0x182>
 2de:	10 33       	cpi	r17, 0x30	; 48
 2e0:	c1 f4       	brne	.+48     	; 0x312 <strtol+0x178>
 2e2:	f6 01       	movw	r30, r12
 2e4:	84 91       	lpm	r24, Z
 2e6:	e7 fc       	sbrc	r14, 7
 2e8:	80 81       	ld	r24, Z
 2ea:	8f 7d       	andi	r24, 0xDF	; 223
 2ec:	88 35       	cpi	r24, 0x58	; 88
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <strtol+0x158>
 2f0:	b7 cf       	rjmp	.-146    	; 0x260 <strtol+0xc6>
 2f2:	ae 2d       	mov	r26, r14
 2f4:	c6 01       	movw	r24, r12
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	a1 1d       	adc	r26, r1
 2fa:	fc 01       	movw	r30, r24
 2fc:	14 91       	lpm	r17, Z
 2fe:	a7 fd       	sbrc	r26, 7
 300:	10 81       	ld	r17, Z
 302:	e2 e0       	ldi	r30, 0x02	; 2
 304:	ce 0e       	add	r12, r30
 306:	d1 1c       	adc	r13, r1
 308:	e1 1c       	adc	r14, r1
 30a:	02 60       	ori	r16, 0x02	; 2
 30c:	60 e1       	ldi	r22, 0x10	; 16
 30e:	26 2e       	mov	r2, r22
 310:	31 2c       	mov	r3, r1
 312:	41 2c       	mov	r4, r1
 314:	51 2c       	mov	r5, r1
 316:	61 2c       	mov	r6, r1
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	78 2e       	mov	r7, r24
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	cb 01       	movw	r24, r22
 324:	91 01       	movw	r18, r2
 326:	03 2c       	mov	r0, r3
 328:	00 0c       	add	r0, r0
 32a:	44 0b       	sbc	r20, r20
 32c:	55 0b       	sbc	r21, r21
 32e:	29 83       	std	Y+1, r18	; 0x01
 330:	3a 83       	std	Y+2, r19	; 0x02
 332:	4b 83       	std	Y+3, r20	; 0x03
 334:	5c 83       	std	Y+4, r21	; 0x04
 336:	e0 ed       	ldi	r30, 0xD0	; 208
 338:	e1 0f       	add	r30, r17
 33a:	ea 30       	cpi	r30, 0x0A	; 10
 33c:	60 f0       	brcs	.+24     	; 0x356 <strtol+0x1bc>
 33e:	2f eb       	ldi	r18, 0xBF	; 191
 340:	21 0f       	add	r18, r17
 342:	2a 31       	cpi	r18, 0x1A	; 26
 344:	10 f4       	brcc	.+4      	; 0x34a <strtol+0x1b0>
 346:	e9 ec       	ldi	r30, 0xC9	; 201
 348:	05 c0       	rjmp	.+10     	; 0x354 <strtol+0x1ba>
 34a:	2f e9       	ldi	r18, 0x9F	; 159
 34c:	21 0f       	add	r18, r17
 34e:	2a 31       	cpi	r18, 0x1A	; 26
 350:	50 f5       	brcc	.+84     	; 0x3a6 <strtol+0x20c>
 352:	e9 ea       	ldi	r30, 0xA9	; 169
 354:	e1 0f       	add	r30, r17
 356:	2e 2f       	mov	r18, r30
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	22 15       	cp	r18, r2
 35c:	33 05       	cpc	r19, r3
 35e:	1c f5       	brge	.+70     	; 0x3a6 <strtol+0x20c>
 360:	a7 fd       	sbrc	r26, 7
 362:	18 c0       	rjmp	.+48     	; 0x394 <strtol+0x1fa>
 364:	46 16       	cp	r4, r22
 366:	57 06       	cpc	r5, r23
 368:	68 06       	cpc	r6, r24
 36a:	79 06       	cpc	r7, r25
 36c:	80 f0       	brcs	.+32     	; 0x38e <strtol+0x1f4>
 36e:	29 81       	ldd	r18, Y+1	; 0x01
 370:	3a 81       	ldd	r19, Y+2	; 0x02
 372:	4b 81       	ldd	r20, Y+3	; 0x03
 374:	5c 81       	ldd	r21, Y+4	; 0x04
 376:	0e 94 5e 05 	call	0xabc	; 0xabc <__mulsi3>
 37a:	6e 0f       	add	r22, r30
 37c:	71 1d       	adc	r23, r1
 37e:	81 1d       	adc	r24, r1
 380:	91 1d       	adc	r25, r1
 382:	61 30       	cpi	r22, 0x01	; 1
 384:	71 05       	cpc	r23, r1
 386:	81 05       	cpc	r24, r1
 388:	30 e8       	ldi	r19, 0x80	; 128
 38a:	93 07       	cpc	r25, r19
 38c:	10 f0       	brcs	.+4      	; 0x392 <strtol+0x1f8>
 38e:	af ef       	ldi	r26, 0xFF	; 255
 390:	01 c0       	rjmp	.+2      	; 0x394 <strtol+0x1fa>
 392:	a1 e0       	ldi	r26, 0x01	; 1
 394:	f6 01       	movw	r30, r12
 396:	14 91       	lpm	r17, Z
 398:	e7 fc       	sbrc	r14, 7
 39a:	10 81       	ld	r17, Z
 39c:	4f ef       	ldi	r20, 0xFF	; 255
 39e:	c4 1a       	sub	r12, r20
 3a0:	d4 0a       	sbc	r13, r20
 3a2:	e4 0a       	sbc	r14, r20
 3a4:	c8 cf       	rjmp	.-112    	; 0x336 <strtol+0x19c>
 3a6:	20 2f       	mov	r18, r16
 3a8:	21 70       	andi	r18, 0x01	; 1
 3aa:	a1 14       	cp	r10, r1
 3ac:	b1 04       	cpc	r11, r1
 3ae:	b1 f0       	breq	.+44     	; 0x3dc <strtol+0x242>
 3b0:	aa 23       	and	r26, r26
 3b2:	49 f0       	breq	.+18     	; 0x3c6 <strtol+0x22c>
 3b4:	51 e0       	ldi	r21, 0x01	; 1
 3b6:	c5 1a       	sub	r12, r21
 3b8:	d1 08       	sbc	r13, r1
 3ba:	e1 08       	sbc	r14, r1
 3bc:	f5 01       	movw	r30, r10
 3be:	c0 82       	st	Z, r12
 3c0:	d1 82       	std	Z+1, r13	; 0x01
 3c2:	e2 82       	std	Z+2, r14	; 0x02
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <strtol+0x242>
 3c6:	01 ff       	sbrs	r16, 1
 3c8:	1d c0       	rjmp	.+58     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ca:	f2 e0       	ldi	r31, 0x02	; 2
 3cc:	cf 1a       	sub	r12, r31
 3ce:	d1 08       	sbc	r13, r1
 3d0:	e1 08       	sbc	r14, r1
 3d2:	f5 01       	movw	r30, r10
 3d4:	c0 82       	st	Z, r12
 3d6:	d1 82       	std	Z+1, r13	; 0x01
 3d8:	e2 82       	std	Z+2, r14	; 0x02
 3da:	14 c0       	rjmp	.+40     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3dc:	a7 ff       	sbrs	r26, 7
 3de:	12 c0       	rjmp	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e0:	22 23       	and	r18, r18
 3e2:	29 f0       	breq	.+10     	; 0x3ee <strtol+0x254>
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e8       	ldi	r25, 0x80	; 128
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <strtol+0x25c>
 3ee:	6f ef       	ldi	r22, 0xFF	; 255
 3f0:	7f ef       	ldi	r23, 0xFF	; 255
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	9f e7       	ldi	r25, 0x7F	; 127
 3f6:	22 e2       	ldi	r18, 0x22	; 34
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <errno+0x1>
 3fe:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <errno>
 402:	09 c0       	rjmp	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 404:	22 23       	and	r18, r18
 406:	81 f0       	breq	.+32     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 408:	90 95       	com	r25
 40a:	80 95       	com	r24
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	46 2f       	mov	r20, r22
 418:	37 2f       	mov	r19, r23
 41a:	28 2f       	mov	r18, r24
 41c:	12 c0       	rjmp	.+36     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0d c0       	rjmp	.+26     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 428:	97 ff       	sbrs	r25, 7
 42a:	f5 cf       	rjmp	.-22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 42c:	82 e2       	ldi	r24, 0x22	; 34
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <errno+0x1>
 434:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <errno>
 438:	6f ef       	ldi	r22, 0xFF	; 255
 43a:	7f ef       	ldi	r23, 0xFF	; 255
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f e7       	ldi	r25, 0x7F	; 127
 440:	ea cf       	rjmp	.-44     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 442:	64 2f       	mov	r22, r20
 444:	73 2f       	mov	r23, r19
 446:	82 2f       	mov	r24, r18
 448:	26 96       	adiw	r28, 0x06	; 6
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	bf 90       	pop	r11
 464:	af 90       	pop	r10
 466:	8f 90       	pop	r8
 468:	7f 90       	pop	r7
 46a:	6f 90       	pop	r6
 46c:	5f 90       	pop	r5
 46e:	4f 90       	pop	r4
 470:	3f 90       	pop	r3
 472:	2f 90       	pop	r2
 474:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b62 <isspace>:
 b62:	91 11       	cpse	r25, r1
 b64:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__ctype_isfalse>
 b68:	80 32       	cpi	r24, 0x20	; 32
 b6a:	19 f0       	breq	.+6      	; 0xb72 <isspace+0x10>
 b6c:	89 50       	subi	r24, 0x09	; 9
 b6e:	85 50       	subi	r24, 0x05	; 5
 b70:	c8 f7       	brcc	.-14     	; 0xb64 <isspace+0x2>
 b72:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c02 <__ctype_isfalse>:
 c02:	99 27       	eor	r25, r25
 c04:	88 27       	eor	r24, r24

00000c06 <__ctype_istrue>:
 c06:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000abc <__mulsi3>:
 abc:	db 01       	movw	r26, r22
 abe:	8f 93       	push	r24
 ac0:	9f 93       	push	r25
 ac2:	0e 94 89 05 	call	0xb12	; 0xb12 <__muluhisi3>
 ac6:	bf 91       	pop	r27
 ac8:	af 91       	pop	r26
 aca:	a2 9f       	mul	r26, r18
 acc:	80 0d       	add	r24, r0
 ace:	91 1d       	adc	r25, r1
 ad0:	a3 9f       	mul	r26, r19
 ad2:	90 0d       	add	r25, r0
 ad4:	b2 9f       	mul	r27, r18
 ad6:	90 0d       	add	r25, r0
 ad8:	11 24       	eor	r1, r1
 ada:	08 95       	ret

Disassembly of section .text.libgcc.div:

000008ae <__udivmodsi4>:
 8ae:	a1 e2       	ldi	r26, 0x21	; 33
 8b0:	1a 2e       	mov	r1, r26
 8b2:	aa 1b       	sub	r26, r26
 8b4:	bb 1b       	sub	r27, r27
 8b6:	fd 01       	movw	r30, r26
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <__udivmodsi4_ep>

000008ba <__udivmodsi4_loop>:
 8ba:	aa 1f       	adc	r26, r26
 8bc:	bb 1f       	adc	r27, r27
 8be:	ee 1f       	adc	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	a2 17       	cp	r26, r18
 8c4:	b3 07       	cpc	r27, r19
 8c6:	e4 07       	cpc	r30, r20
 8c8:	f5 07       	cpc	r31, r21
 8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__udivmodsi4_ep>
 8cc:	a2 1b       	sub	r26, r18
 8ce:	b3 0b       	sbc	r27, r19
 8d0:	e4 0b       	sbc	r30, r20
 8d2:	f5 0b       	sbc	r31, r21

000008d4 <__udivmodsi4_ep>:
 8d4:	66 1f       	adc	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	1a 94       	dec	r1
 8de:	69 f7       	brne	.-38     	; 0x8ba <__udivmodsi4_loop>
 8e0:	60 95       	com	r22
 8e2:	70 95       	com	r23
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	9b 01       	movw	r18, r22
 8ea:	ac 01       	movw	r20, r24
 8ec:	bd 01       	movw	r22, r26
 8ee:	cf 01       	movw	r24, r30
 8f0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000b12 <__muluhisi3>:
 b12:	0e 94 6e 05 	call	0xadc	; 0xadc <__umulhisi3>
 b16:	a5 9f       	mul	r26, r21
 b18:	90 0d       	add	r25, r0
 b1a:	b4 9f       	mul	r27, r20
 b1c:	90 0d       	add	r25, r0
 b1e:	a4 9f       	mul	r26, r20
 b20:	80 0d       	add	r24, r0
 b22:	91 1d       	adc	r25, r1
 b24:	11 24       	eor	r1, r1
 b26:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000adc <__umulhisi3>:
 adc:	a2 9f       	mul	r26, r18
 ade:	b0 01       	movw	r22, r0
 ae0:	b3 9f       	mul	r27, r19
 ae2:	c0 01       	movw	r24, r0
 ae4:	a3 9f       	mul	r26, r19
 ae6:	70 0d       	add	r23, r0
 ae8:	81 1d       	adc	r24, r1
 aea:	11 24       	eor	r1, r1
 aec:	91 1d       	adc	r25, r1
 aee:	b2 9f       	mul	r27, r18
 af0:	70 0d       	add	r23, r0
 af2:	81 1d       	adc	r24, r1
 af4:	11 24       	eor	r1, r1
 af6:	91 1d       	adc	r25, r1
 af8:	08 95       	ret
